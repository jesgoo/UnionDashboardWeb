/**
 * @file Generated by er-sync
 * @author Luy<xukai01@baidu.com>
 * @date Thu Dec 06 2012 13:23:38 GMT+0800 (China Standard Time)
 * Copyright (c) 2012 Baidu.com, Inc. All Rights Reserved
 */

$(function() {
    console.log('er.init ott');
    try {
        mf.authority.parse(mf.getUser().authority);
    }
    catch (e) {
    }
    er.init();
});
mf.ott = mf.ott || {};

/**
 * 加强mf.js中的定义,
 */
mf.onenter = (function(fn) {
    return function(opt) {
        opt = opt || {};
        opt.hide = !(opt.showNav2 || false);
        opt.sep = '|';
        fn(this, opt);
    };
})(mf.onenter);

mf.clickCommand = mf.m.commandElement('click');
/*
 * 全局“展开/收起”命令
 * 命令元素必须包含 data-cmd="toggleExpend" data-target="targetId"
 * 可选参数
 * data-open="展开时文本"
 * data-close="收起时文本"
 * data-method="" 收起展开时对应的方式，visibility | display , 默认 display
 * 元素可选事件 onshow, onhide，事件需预先赋值给targetId元素。
 * 事件返回false时将中断行为
 **/
mf.clickCommand.register(
    {
        cmd: 'toggleExpend',
        handle: function (options) {
            var target = document.getElementById(options.target);
            if (!target) return true;
            var ele = this.target;
            var txtOpen = ele.txtOpen || options.open;
            var txtClose = ele.txtClose || options.close;
            var method = options.method || 'display';
            var onshow = target.onshow;
            var onhide = target.onhide;
            if (ele.isOpened) {
                if (onhide && onhide() === false) {
                    return true;
                }
                txtOpen = txtOpen || ele.innerHTML || '收起';
                ele.isOpened = false;
                ele.txtOpen = txtOpen;
                ele.innerHTML = txtClose || '展开';
                method === 'visibility' ? target.style.visibility = 'hidden'
                    : target.style.display = 'none';
            }
            else {
                if (onshow && onshow() === false) {
                    return true;
                }
                txtClose = txtClose || ele.innerHTML || '展开';
                ele.isOpened = true;
                ele.txtClose = txtClose;
                ele.innerHTML = txtOpen || '收起';
                if (/absolute|fixed/i.test($(target).css('position'))) {
                    target.style.top = ($(ele).offset().top
                                            - $(ele.parentNode).offset().top + 26) + 'px';
                }
                method === 'visibility' ? target.style.visibility = 'visible'
                    : target.style.display = 'block';
            }
        }
    }
);

mf.ott.getCellDateTime = function (str) {
    return function (item) {
        return item[str] ? mf.getDateTimeString(new Date(Date.parse(item[str]))) : '';
    }
};

mf.ott.CName = function (s) {
    return s.charAt(0).toUpperCase() + s.substring(1);
};

/*
* 重写 ajax
* */
(function () {
    /**
     * 封装Model数据请求，处理mock data
     *
     * 根据mf.DEBUG重写url
     *
     * mock data规范：
     *   exports.request 请求参数定义
     *   exports.response 响应数据定义
     *
     * @inner
     * @param {string} url
     * @param {function(Object)} onSuccess
     * @param {Object=} [opt]
     */
    var ajax = function (url, onSuccess, opt) {
        opt = opt || {};
        var method = opt.post ? 'POST' : 'GET';
        var data = opt.data || {};
        var ourl = url;
        var ajax = arguments.callee;
        if (!ajax.__called) {
            ajax.__called = true;
            //global error handler
            /*$(document).ajaxError(function(event, request, settings) {
             console.log(event, request, settings);
             mf.msg('网络异常，请尝试稍后操作<br>'); //;+ JSON.stringify(event)
             });*/
        }
        var query = url.indexOf('?') >= 0 ? url.split('?')[1] : '';
        url = url.substring(0,
                url.indexOf('?') >= 0 ? url.indexOf('?') : url.length);
        var outId = location.search.match(/outId=([\w\d]+)(?=\&|$)/);
        if (outId) {    
            query += '&outId=' + outId[1];
        }

        /**
         * 处理服务器返回的数据
         *
         * @param {Object} result 服务器返回json解析后的对象
         */
        var onData = function (result) {
            mf.loaded();
            var model = result.model || result.result|| result.message || {};
            if (!result.success && !model.formError) {//非表单错误处理
                if (model.global) {
                    mf.msg(model.global);
                }
                else if (model.message) {
                    mf.msg(model.message);
                }
                else if (model.sessionTimeout) {
                    //回话超时登录机制。确保shell里的参数结构和mf.ajax参数结构一致
                    var obj = {
                        shell: (function (ajax, url, onSuccess, opt) {
                            return function () {
                                mf.loading();
                                ajax(url, onSuccess, opt);
                            };
                        })(ajax, ourl, onSuccess, opt)
                    };
                    var erPage = mf.getErPage();
                    if (mf.ott) {
                        if (erPage === 'index') {
                            location.href = '#/index/login~force=1';
                            return;
                        }
                    } else { //保证其他项目也能享用超时登出
                        mf.cookieKeyMap.authority && T.cookie.set(
                            mf.cookieKeyMap.authority, 0);
                        window.location.reload();
                    }
                    console.log('sessionTimeout', model.sessionTimeout, erPage, obj);
                    mf.reload(obj);
                }
                else if (model.redirect) {
                    er.locator.redirect(model.redirect);
                }
                else {
                    mf.msg('未知错误，请联系我们<br>');
                }
            }
            else {
                console.log('ajax model', model);
                $.isFunction(onSuccess) && onSuccess(model);
            }
        };

        var errorMsg = function (XMLHttpRequest, otherInfo) {
            console.log('%cajax Error entirely', 'color:red;font-size:150%;', XMLHttpRequest, otherInfo);
            mf.msg('网络异常，请尝试稍后操作<br>');
        };
        var sessionTimeoutModel = {
            success: false,
            model: {
                sessionTimeout: 1
            }
        };
        if (mf.DEBUG) {//mock data 
            // 兼容排序处理
            // url = mf.f('data{0}.js{1}{2}', url + (query.indexOf('order=desc') >= 0 
            // ? '-desc' : ''), query ? '?' : '', query);
            // ? & 简化处理，不影响调试，表纠结！
            url = mf.f('{0}.js?{1}', url.replace(/\.html$/i, ''), query);
            if (!/[\\\/]/.test(url.charAt(0))) {
                url = '/' + url;
            }
            for (var q in data) {
                url += mf.f('&{0}={1}', q, data[q]);
            }
            return $.getScript('data' + url, function () {
                onData(window.exports.response);
            });
        } else {
            if (/\.html$/i.test(url)) {
                url += '?' + query;
            } else {
                url = '/admin.asp?u=' + url + '&' + query;
            }
            return $.ajax({
                url: url,
                type: method,
                data: data,
                cache: false,
                dataType: 'json',
                success: function (result, textStatus, XMLHttpRequest) {
                    console.log('success', textStatus, XMLHttpRequest);
                    if ($.isEmptyObject(result) || $.isEmpty(result)) {
                        onData.call(XMLHttpRequest, sessionTimeoutModel);
                    }
                    else {
                        onData.call(XMLHttpRequest, result);
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    var text = XMLHttpRequest.responseText;
                    console.log('error', XMLHttpRequest)
                    if (/exports\.response/i.test(text)) {
                        try {
                            text = eval(text);
                        }
                        catch (e) {
                            errorMsg(XMLHttpRequest, 'JS parse Error');
                            return false;
                        }
                        onData(window.exports.response);
                    } else if (/success/i.test(text)) {
                        try {
                            text = eval('(function () { return ' + text + ';})()');
                        }
                        catch (e) {
                            errorMsg(XMLHttpRequest, 'JSON parse Error');
                            return false;
                        }
                        onData.call(XMLHttpRequest, text);
                    }
                    else {
                        errorMsg(XMLHttpRequest);
                    }
                }
            });
        }
    };

    /**
     * Http GET
     *
     * @param {string} url
     * @param {function} onSuccess
     */
    mf.get = function (url, onSuccess) {
        return ajax(url, onSuccess);
    };

    /**
     * Http POST
     *
     * @param {string} url
     * @param {Object} data POST data
     * @param {function} onSuccess
     */
    mf.post = function (url, data, onSuccess) {
        return ajax(url, onSuccess, { post: true, data: data });
    };
})();

/**
 * 向前增加内容
 *
 * @public
 * @param {Array} lines
 */
esui.TextLine.prototype.prependLines = function (lines) {
    var me = this;
    var text = me._controlMap.text;
    var content = lines.join('\n');
    var value = me.getValue();

    if (value.length > 0) {
        content = content + '\n' + value;
    }

    text.setValue(content);
};