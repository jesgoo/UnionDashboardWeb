/**
 * @file Generated by er-sync
 * @author killeryyl<longgeyang@jesgoo.com>
 * @date Fri May 29 2015 13:27:15 GMT+0800 (CST)
 * Copyright (c) 2015 jesgoo.com, Inc. All Rights Reserved
 */
(function () {
    var FIELDS_IMAGE = function (model, config, value) {
        var lists = config.lists.resourceList;
        var operateData = mf.operateDataInConfigField(lists);
        var needFieldLists = {
            'id': {
                stable: 1,
                width: 80
                /*content: function (item, index) {
                 return '<a data-cmd="edit" data-index="' + index + '">' + operateData.get(item, 'id', '') + '</a>'
                 }*/
            },
            'type': {},
            'name': {
                stable: 1,
                width: 120
            },
            'preview': {
                title: "预览",
                breakLine: 1,
                content: function (item) {
                    var filename = operateData.get(item, 'filename');
                    var height = operateData.get(item, 'height');
                    var width = operateData.get(item, 'width');
                    var size = operateData.get(item, 'fileSize');
                    size = mf.getEnglishNumber(size) + ' KB';
                    return mf.etplFetch('adv_preview_image_resource', {
                        target: filename,
                        image: filename,
                        height: height,
                        width: width,
                        size: size
                    });
                }
            },
            'createTime': {
                stable: 1,
                width: 150
            }
        };
        return mf.mockTableFields(needFieldLists, lists);
    };
    var FIELDS_APP = function (model, config, value) {
        var lists = config.lists.resourceList;
        var operateData = mf.operateDataInConfigField(lists);
        var needFieldLists = {
            'id': {
                stable: 1,
                width: 80
                /*content: function (item, index) {
                 return '<a data-cmd="edit" data-index="' + index + '">' + operateData.get(item, 'id', '') + '</a>'
                 }*/
            },
            'type': {},
            'name': {
                stable: 1,
                width: 120
            },
            'preview': {
                title: "预览",
                breakLine: 1,
                content: function (item) {
                    var filename = operateData.get(item, 'filename');
                    var appName = operateData.get(item, 'appName');
                    var appPackage = operateData.get(item, 'appPackage');
                    var appVersion = operateData.get(item, 'appVersion');
                    var appLogoFilename = operateData.get(item, 'appLogoFilename');
                    var size = operateData.get(item, 'fileSize');
                    size = mf.getEnglishNumber(size) + ' KB';
                    return mf.etplFetch('adv_preview_app_resource', {
                        target: filename,
                        image: appLogoFilename,
                        appName: appName,
                        appPackage: appPackage,
                        appVersion: appVersion,
                        size: size
                    });
                }
            },
            'createTime': {
                stable: 1,
                width: 150
            }
        };
        return mf.mockTableFields(needFieldLists, lists);
    };
    mf.index.market.model.resource = new er.Model({
        QUERY_MAP: {},
        LOADER_LIST: ['modelLoader', 'modelParser'],
        modelLoader: new er.Model.Loader(function () {
            console.log('modelLoader');
            var loader = this;

            if (!loader.get('resources')) {
                loader.stop();
                mf.parallelAjax([
                    {
                        url: '/config',
                        cache: true
                    },
                    '/resource'
                ], function (config, resources) {
                    loader.set('config', config);
                    loader.set('resources', resources);
                    loader.start();
                });
            }
        }),
        modelParser: new er.Model.Loader(function () {
            console.log('modelLoader');
            var loader = this;

            var config = loader.get('config');
            var resources = loader.get('resources');
            var lists = config.lists.resourceList;
            mf.setValueEntities(lists, resources);

            var operateData = mf.operateDataInConfigField(lists);

            var typeList = {};
            var tab = config.maps.resourceTypeMap.map(function (n) {
                typeList[n.value] = [];
                return {
                    title: n.name,
                    value: n.value
                }
            });
            var targetTab = loader.get('targetTab');
            if (mf.m.utils.hasValue(targetTab)) {
                tab = tab.filter(function (n) {
                    return n.value === targetTab;
                })
            }
            resources = resources || [];
            var idField = mf.mockFieldInConfig(lists)('id');
            resources.forEach(function (resource) {
                var type = operateData.get(resource, 'type');
                var appLogo = operateData.get(resource, 'appLogo');

                if (mf.m.utils.hasValue(appLogo)) {
                    var logoIndex = mf.m.utils.indexOfArray(resources, appLogo, idField);
                    if (logoIndex > -1) {
                        operateData.set(resource, 'appLogoFilename', operateData.get(resources[logoIndex], 'filename'));
                    }
                }
                typeList[type].push(resource);
            });
            for (var value in typeList) {
                loader.set('typeList_' + value, typeList[value]);
            }

            loader.set('fields_' + config.maps.resourceType.image,
                FIELDS_IMAGE(typeList[config.maps.resourceType.image], config, config.maps.resourceType.image));
            loader.set('fields_' + config.maps.resourceType.app,
                FIELDS_APP(typeList[config.maps.resourceType.app], config, config.maps.resourceType.app));
            loader.set('config', config);
            loader.set('resourceList', lists);
            loader.set('tab', tab);
            loader.start();
        })
    });
})();