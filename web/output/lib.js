/**
 * @file Debug mode, for mock data
 */
var __DEBUG = false;
if (location.search.indexOf('debug=1') > -1) {
    __DEBUG = true;
} else if (location.search.indexOf('debug=0') > -1) {
    __DEBUG = false;
}
// Copyright (c) 2009, Baidu Inc. All rights reserved.
//
// Licensed under the BSD License
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//      http://tangram.baidu.com/license.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */

/**
 * @namespace T Tangram七巧板
 * @name T
 * @version 1.3.9
 */

/**
 * 声明baidu包
 * @author: allstar, erik, meizz, berg
 */
var T,
    baidu = T = baidu || {version: "1.3.9"};

//提出guid，防止在与老版本Tangram混用时
//在下一行错误的修改window[undefined]
baidu.guid = "$BAIDU$";

//Tangram可能被放在闭包中
//一些页面级别唯一的属性，需要挂载在window[baidu.guid]上
window[baidu.guid] = window[baidu.guid] || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/ajax.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/11/13
 */


/**
 * @namespace baidu.ajax 对XMLHttpRequest请求的封装。
 */
baidu.ajax = baidu.ajax || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 *
 * path: baidu/fn.js
 * author: berg
 * version: 1.0.0
 * date: 2010/11/02
 */


/**
 * @namespace baidu.fn 对方法的操作，解决内存泄露问题。
 */
baidu.fn = baidu.fn || {};
/*
 * Tangram
 * Copyright 2011 Baidu Inc. All rights reserved.
 */



/**
 * 这是一个空函数，用于需要排除函数作用域链干扰的情况.
 * @author rocy
 * @name baidu.fn.blank
 * @function
 * @grammar baidu.fn.blank()
 * @meta standard
 * @return {Function} 一个空函数
 * @version 1.3.3
 */
baidu.fn.blank = function () {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */




/**
 * 发送一个ajax请求
 * @author: allstar, erik, berg
 * @name baidu.ajax.request
 * @function
 * @grammar baidu.ajax.request(url[, options])
 * @param {string} 	url 发送请求的url
 * @param {Object} 	options 发送请求的选项参数
 * @config {String} 	[method] 			请求发送的类型。默认为GET
 * @config {Boolean}  [async] 			是否异步请求。默认为true（异步）
 * @config {String} 	[data] 				需要发送的数据。如果是GET请求的话，不需要这个属性
 * @config {Object} 	[headers] 			要设置的http request header
 * @config {number}   [timeout]       超时时间，单位ms
 * @config {String} 	[username] 			用户名
 * @config {String} 	[password] 			密码
 * @config {Function} [onsuccess] 		请求成功时触发，function(XMLHttpRequest xhr, string responseText)。
 * @config {Function} [onfailure] 		请求失败时触发，function(XMLHttpRequest xhr)。
 * @config {Function} [onbeforerequest]	发送请求之前触发，function(XMLHttpRequest xhr)。
 * @config {Function} [on{STATUS_CODE}] 	当请求为相应状态码时触发的事件，如on302、on404、on500，function(XMLHttpRequest xhr)。3XX的状态码浏览器无法获取，4xx的，可能因为未知问题导致获取失败。
 * @config {Boolean}  [noCache] 			是否需要缓存，默认为false（缓存），1.1.1起支持。
 *
 * @meta standard
 * @see baidu.ajax.get,baidu.ajax.post,baidu.ajax.form
 *
 * @returns {XMLHttpRequest} 发送请求的XMLHttpRequest对象
 */
baidu.ajax.request = function (url, opt_options) {
    var options     = opt_options || {},
        data        = options.data || "",
        async       = !(options.async === false),
        username    = options.username || "",
        password    = options.password || "",
        method      = (options.method || "GET").toUpperCase(),
        headers     = options.headers || {},
    // 基本的逻辑来自lili同学提供的patch
        timeout     = options.timeout || 0,
        eventHandlers = {},
        tick, key, xhr;

    /**
     * readyState发生变更时调用
     *
     * @ignore
     */
    function stateChangeHandler() {
        if (xhr.readyState == 4) {
            try {
                var stat = xhr.status;
            } catch (ex) {
                // 在请求时，如果网络中断，Firefox会无法取得status
                fire('failure');
                return;
            }

            fire(stat);

            // http://www.never-online.net/blog/article.asp?id=261
            // case 12002: // Server timeout      
            // case 12029: // dropped connections
            // case 12030: // dropped connections
            // case 12031: // dropped connections
            // case 12152: // closed by server
            // case 13030: // status and statusText are unavailable

            // IE error sometimes returns 1223 when it 
            // should be 204, so treat it as success
            if ((stat >= 200 && stat < 300)
                || stat == 304
                || stat == 1223) {
                fire('success');
            } else {
                fire('failure');
            }

            /*
             * NOTE: Testing discovered that for some bizarre reason, on Mozilla, the
             * JavaScript <code>XmlHttpRequest.onreadystatechange</code> handler
             * function maybe still be called after it is deleted. The theory is that the
             * callback is cached somewhere. Setting it to null or an empty function does
             * seem to work properly, though.
             * 
             * On IE, there are two problems: Setting onreadystatechange to null (as
             * opposed to an empty function) sometimes throws an exception. With
             * particular (rare) versions of jscript.dll, setting onreadystatechange from
             * within onreadystatechange causes a crash. Setting it from within a timeout
             * fixes this bug (see issue 1610).
             * 
             * End result: *always* set onreadystatechange to an empty function (never to
             * null). Never set onreadystatechange from within onreadystatechange (always
             * in a setTimeout()).
             */
            window.setTimeout(
                function() {
                    // 避免内存泄露.
                    // 由new Function改成不含此作用域链的 baidu.fn.blank 函数,
                    // 以避免作用域链带来的隐性循环引用导致的IE下内存泄露. By rocy 2011-01-05 .
                    xhr.onreadystatechange = baidu.fn.blank;
                    if (async) {
                        xhr = null;
                    }
                }, 0);
        }
    }

    /**
     * 获取XMLHttpRequest对象
     *
     * @ignore
     * @return {XMLHttpRequest} XMLHttpRequest对象
     */
    function getXHR() {
        if (window.ActiveXObject) {
            try {
                return new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
                try {
                    return new ActiveXObject("Microsoft.XMLHTTP");
                } catch (e) {}
            }
        }
        if (window.XMLHttpRequest) {
            return new XMLHttpRequest();
        }
    }

    /**
     * 触发事件
     *
     * @ignore
     * @param {String} type 事件类型
     */
    function fire(type) {
        type = 'on' + type;
        var handler = eventHandlers[type],
            globelHandler = baidu.ajax[type];

        // 不对事件类型进行验证
        if (handler) {
            if (tick) {
                clearTimeout(tick);
            }

            if (type != 'onsuccess') {
                handler(xhr);
            } else {
                //处理获取xhr.responseText导致出错的情况,比如请求图片地址.
                try {
                    xhr.responseText;
                } catch(error) {
                    return handler(xhr);
                }
                handler(xhr, xhr.responseText);
            }
        } else if (globelHandler) {
            //onsuccess不支持全局事件
            if (type == 'onsuccess') {
                return;
            }
            globelHandler(xhr);
        }
    }


    for (key in options) {
        // 将options参数中的事件参数复制到eventHandlers对象中
        // 这里复制所有options的成员，eventHandlers有冗余
        // 但是不会产生任何影响，并且代码紧凑
        eventHandlers[key] = options[key];
    }

    headers['X-Requested-With'] = 'XMLHttpRequest';


    try {
        xhr = getXHR();

        if (method == 'GET') {
            if (data) {
                url += (url.indexOf('?') >= 0 ? '&' : '?') + data;
                data = null;
            }
            if(options['noCache'])
                url += (url.indexOf('?') >= 0 ? '&' : '?') + 'b' + (+ new Date) + '=1';
        }

        if (username) {
            xhr.open(method, url, async, username, password);
        } else {
            xhr.open(method, url, async);
        }

        if (async) {
            xhr.onreadystatechange = stateChangeHandler;
        }

        // 在open之后再进行http请求头设定
        // FIXME 是否需要添加; charset=UTF-8呢
        if (method == 'POST') {
            xhr.setRequestHeader("Content-Type",
                (headers['Content-Type'] || "application/x-www-form-urlencoded"));
        }

        for (key in headers) {
            if (headers.hasOwnProperty(key)) {
                xhr.setRequestHeader(key, headers[key]);
            }
        }

        fire('beforerequest');

        if (timeout) {
            tick = setTimeout(function(){
                xhr.onreadystatechange = baidu.fn.blank;
                xhr.abort();
                fire("timeout");
            }, timeout);
        }
        xhr.send(data);

        if (!async) {
            stateChangeHandler();
        }
    } catch (ex) {
        fire('failure');
    }

    return xhr;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/ajax/form.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */




/**
 * 将一个表单用ajax方式提交
 * @name baidu.ajax.form
 * @function
 * @grammar baidu.ajax.form(form[, options])
 * @param {HTMLFormElement} form             需要提交的表单元素
 * @param {Object} 	[options] 					发送请求的选项参数
 * @config {Boolean} [async] 			是否异步请求。默认为true（异步）
 * @config {String} 	[username] 			用户名
 * @config {String} 	[password] 			密码
 * @config {Object} 	[headers] 			要设置的http request header
 * @config {Function} [replacer] 			对参数值特殊处理的函数,replacer(string value, string key)
 * @config {Function} [onbeforerequest] 	发送请求之前触发，function(XMLHttpRequest xhr)。
 * @config {Function} [onsuccess] 		请求成功时触发，function(XMLHttpRequest xhr, string responseText)。
 * @config {Function} [onfailure] 		请求失败时触发，function(XMLHttpRequest xhr)。
 * @config {Function} [on{STATUS_CODE}] 	当请求为相应状态码时触发的事件，如on302、on404、on500，function(XMLHttpRequest xhr)。3XX的状态码浏览器无法获取，4xx的，可能因为未知问题导致获取失败。

 * @see baidu.ajax.request
 *
 * @returns {XMLHttpRequest} 发送请求的XMLHttpRequest对象
 */
baidu.ajax.form = function (form, options) {
    options = options || {};
    var elements    = form.elements,
        len         = elements.length,
        method      = form.getAttribute('method'),
        url         = form.getAttribute('action'),
        replacer    = options.replacer || function (value, name) {
            return value;
        },
        sendOptions = {},
        data = [],
        i, item, itemType, itemName, itemValue,
        opts, oi, oLen, oItem;

    /**
     * 向缓冲区添加参数数据
     * @private
     */
    function addData(name, value) {
        data.push(name + '=' + value);
    }

    // 复制发送参数选项对象
    for (i in options) {
        if (options.hasOwnProperty(i)) {
            sendOptions[i] = options[i];
        }
    }

    for (i = 0; i < len; i++) {
        item = elements[i];
        itemName = item.name;

        // 处理：可用并包含表单name的表单项
        if (!item.disabled && itemName) {
            itemType = item.type;
            itemValue = item.value;

            switch (itemType) {
                // radio和checkbox被选中时，拼装queryString数据
                case 'radio':
                case 'checkbox':
                    if (!item.checked) {
                        break;
                    }

                // 默认类型，拼装queryString数据
                case 'textarea':
                case 'text':
                case 'password':
                case 'hidden':
                case 'select-one':
                    addData(itemName, replacer(itemValue, itemName));
                    break;

                // 多行选中select，拼装所有选中的数据
                case 'select-multiple':
                    opts = item.options;
                    oLen = opts.length;
                    for (oi = 0; oi < oLen; oi++) {
                        oItem = opts[oi];
                        if (oItem.selected) {
                            addData(itemName, replacer(oItem.value, itemName));
                        }
                    }
                    break;
            }
        }
    }

    // 完善发送请求的参数选项
    sendOptions.data = data.join('&');
    sendOptions.method = form.getAttribute('method') || 'GET';

    // 发送请求
    return baidu.ajax.request(url, sendOptions);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/ajax/get.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */




/**
 * 发送一个get请求
 * @name baidu.ajax.get
 * @function
 * @grammar baidu.ajax.get(url[, onsuccess])
 * @param {string} 	url 		发送请求的url地址
 * @param {Function} [onsuccess] 请求成功之后的回调函数，function(XMLHttpRequest xhr, string responseText)
 * @meta standard
 * @see baidu.ajax.post,baidu.ajax.request
 *
 * @returns {XMLHttpRequest} 	发送请求的XMLHttpRequest对象
 */
baidu.ajax.get = function (url, onsuccess) {
    return baidu.ajax.request(url, {'onsuccess': onsuccess});
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/ajax/post.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */




/**
 * 发送一个post请求
 * @name baidu.ajax.post
 * @function
 * @grammar baidu.ajax.post(url, data[, onsuccess])
 * @param {string} 	url 		发送请求的url地址
 * @param {string} 	data 		发送的数据
 * @param {Function} [onsuccess] 请求成功之后的回调函数，function(XMLHttpRequest xhr, string responseText)
 * @meta standard
 * @see baidu.ajax.get,baidu.ajax.request
 *
 * @returns {XMLHttpRequest} 	发送请求的XMLHttpRequest对象
 */
baidu.ajax.post = function (url, data, onsuccess) {
    return baidu.ajax.request(
        url,
        {
            'onsuccess': onsuccess,
            'method': 'POST',
            'data': data
        }
    );
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 *
 * path: baidu/array.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/02
 */



/**
 * @namespace baidu.array 操作数组的方法。
 */

baidu.array = baidu.array || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/array/indexOf.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/02
 */



/**
 * 查询数组中指定元素的索引位置
 * @name baidu.array.indexOf
 * @function
 * @grammar baidu.array.indexOf(source, match[, fromIndex])
 * @param {Array} source 需要查询的数组
 * @param {Any} match 查询项
 * @param {number} [fromIndex] 查询的起始位索引位置，如果为负数，则从source.length+fromIndex往后开始查找
 * @see baidu.array.find,baidu.array.lastIndexOf
 *
 * @returns {number} 指定元素的索引位置，查询不到时返回-1
 */
baidu.array.indexOf = function (source, match, fromIndex) {
    var len = source.length,
        iterator = match;

    fromIndex = fromIndex | 0;
    if(fromIndex < 0){//小于0
        fromIndex = Math.max(0, len + fromIndex)
    }
    for ( ; fromIndex < len; fromIndex++) {
        if(fromIndex in source && source[fromIndex] === match) {
            return fromIndex;
        }
    }

    return -1;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */




/**
 * 判断一个数组中是否包含给定元素
 * @name baidu.array.contains
 * @function
 * @grammar baidu.array.contains(source, obj)
 * @param {Array} source 需要判断的数组.
 * @param {Any} obj 要查找的元素.
 * @return {boolean} 判断结果.
 * @author berg
 */
baidu.array.contains = function(source, obj) {
    return (baidu.array.indexOf(source, obj) >= 0);
};

/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/array/each.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/02
 */



/**
 * 遍历数组中所有元素
 * @name baidu.array.each
 * @function
 * @grammar baidu.array.each(source, iterator[, thisObject])
 * @param {Array} source 需要遍历的数组
 * @param {Function} iterator 对每个数组元素进行调用的函数，该函数有两个参数，第一个为数组元素，第二个为数组索引值，function (item, index)。
 * @param {Object} [thisObject] 函数调用时的this指针，如果没有此参数，默认是当前遍历的数组
 * @remark
 * each方法不支持对Object的遍历,对Object的遍历使用baidu.object.each 。
 * @shortcut each
 * @meta standard
 *
 * @returns {Array} 遍历的数组
 */

baidu.each = baidu.array.forEach = baidu.array.each = function (source, iterator, thisObject) {
    var returnValue, item, i, len = source.length;

    if ('function' == typeof iterator) {
        for (i = 0; i < len; i++) {
            item = source[i];
            //TODO
            //此处实现和标准不符合，标准中是这样说的：
            //If a thisObject parameter is provided to forEach, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead.
            returnValue = iterator.call(thisObject || source, item, i);

            if (returnValue === false) {
                break;
            }
        }
    }
    return source;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 清空一个数组
 * @name baidu.array.empty
 * @function
 * @grammar baidu.array.empty(source)
 * @param {Array} source 需要清空的数组.
 * @author berg
 */
baidu.array.empty = function(source) {
    source.length = 0;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 判断一个数组中是否所有元素都满足给定条件
 * @name baidu.array.every
 * @function
 * @grammar baidu.array.every(source, iterator[,thisObject])
 * @param {Array} source 需要判断的数组.
 * @param {Function} iterator 判断函数.
 * @param {Object} [thisObject] 函数调用时的this指针，如果没有此参数，默认是当前遍历的数组
 * @return {boolean} 判断结果.
 * @see baidu.array.some
 */
baidu.array.every = function(source, iterator, thisObject) {
    var i = 0,
        len = source.length;
    for (; i < len; i++) {
        if (i in source && !iterator.call(thisObject || source, source[i], i)) {
            return false;
        }
    }
    return true;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 从数组中筛选符合条件的元素
 * @name baidu.array.filter
 * @function
 * @grammar baidu.array.filter(source, iterator[, thisObject])
 * @param {Array} source 需要筛选的数组
 * @param {Function} iterator 对每个数组元素进行筛选的函数，该函数有两个参数，第一个为数组元素，第二个为数组索引值，function (item, index)，函数需要返回true或false
 * @param {Object} [thisObject] 函数调用时的this指针，如果没有此参数，默认是当前遍历的数组
 * @meta standard
 * @see baidu.array.find
 *
 * @returns {Array} 符合条件的数组项集合
 */

baidu.array.filter = function (source, iterator, thisObject) {
    var result = [],
        resultIndex = 0,
        len = source.length,
        item,
        i;

    if ('function' == typeof iterator) {
        for (i = 0; i < len; i++) {
            item = source[i];
            //TODO
            //和标准不符，see array.each
            if (true === iterator.call(thisObject || source, item, i)) {
                // resultIndex用于优化对result.length的多次读取
                result[resultIndex++] = item;
            }
        }
    }

    return result;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/array/find.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/02
 */



/**
 * 从数组中寻找符合条件的第一个元素
 * @name baidu.array.find
 * @function
 * @grammar baidu.array.find(source, iterator)
 * @param {Array} source 需要查找的数组
 * @param {Function} iterator 对每个数组元素进行查找的函数，该函数有两个参数，第一个为数组元素，第二个为数组索引值，function (item, index)，函数需要返回true或false
 * @see baidu.array.filter,baidu.array.indexOf
 *
 * @returns {Any|null} 符合条件的第一个元素，找不到时返回null
 */
baidu.array.find = function (source, iterator) {
    var item, i, len = source.length;

    if ('function' == typeof iterator) {
        for (i = 0; i < len; i++) {
            item = source[i];
            if (true === iterator.call(source, item, i)) {
                return item;
            }
        }
    }

    return null;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 将两个数组参数合并成一个类似hashMap结构的对象，这个对象使用第一个数组做为key，使用第二个数组做为值，如果第二个参数未指定，则把对象的所有值置为true。
 * @name baidu.array.hash
 * @function
 * @grammar baidu.array.hash(keys[, values])
 * @param {Array} keys 作为key的数组
 * @param {Array} [values] 作为value的数组，未指定此参数时，默认值将对象的值都设为true。
 *
 * @returns {Object} 合并后的对象{key : value}
 */
baidu.array.hash = function(keys, values) {
    var o = {}, vl = values && values.length, i = 0, l = keys.length;
    for (; i < l; i++) {
        o[keys[i]] = (vl && vl > i) ? values[i] : true;
    }
    return o;
};

/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/array/lastIndexOf.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/14
 */



/**
 * 从后往前，查询数组中指定元素的索引位置
 * @name baidu.array.lastIndexOf
 * @function
 * @grammar baidu.array.lastIndexOf(source, match)
 * @param {Array} source 需要查询的数组
 * @param {Any} match 查询项
 * @param {number} [fromIndex] 查询的起始位索引位置，如果为负数，则从source.length+fromIndex往前开始查找
 * @see baidu.array.indexOf
 *
 * @returns {number} 指定元素的索引位置，查询不到时返回-1
 */

baidu.array.lastIndexOf = function (source, match, fromIndex) {
    var len = source.length;

    fromIndex = fromIndex | 0;

    if(!fromIndex || fromIndex >= len){
        fromIndex = len - 1;
    }
    if(fromIndex < 0){
        fromIndex += len;
    }
    for(; fromIndex >= 0; fromIndex --){
        if(fromIndex in source && source[fromIndex] === match){
            return fromIndex;
        }
    }

    return -1;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 遍历数组中所有元素，将每一个元素应用方法进行转换，并返回转换后的新数组。
 * @name baidu.array.map
 * @function
 * @grammar baidu.array.map(source, iterator[, thisObject])
 * @param {Array}    source   需要遍历的数组.
 * @param {Function} iterator 对每个数组元素进行处理的函数.
 * @param {Object} [thisObject] 函数调用时的this指针，如果没有此参数，默认是当前遍历的数组
 * @return {Array} map后的数组.
 * @see baidu.array.reduce
 */
baidu.array.map = function(source, iterator, thisObject) {
    var results = [],
        i = 0,
        l = source.length;
    for (; i < l; i++) {
        results[i] = iterator.call(thisObject || source, source[i], i);
    }
    return results;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 遍历数组中所有元素，将每一个元素应用方法进行合并，并返回合并后的结果。
 * @name baidu.array.reduce
 * @function
 * @grammar baidu.array.reduce(source, iterator[, initializer])
 * @param {Array}    source 需要遍历的数组.
 * @param {Function} iterator 对每个数组元素进行处理的函数，函数接受四个参数：上一次reduce的结果（或初始值），当前元素值，索引值，整个数组.
 * @param {Object}   [initializer] 合并的初始项，如果没有此参数，默认用数组中的第一个值作为初始值.
 * @return {Array} reduce后的值.
 * @version 1.3.4
 * @see baidu.array.reduce
 */
baidu.array.reduce = function(source, iterator, initializer) {
    var i = 0,
        l = source.length,
        found = 0;

    if( arguments.length < 3){
        //没有initializer的情况，找到第一个可用的值
        for(; i < l; i++){
            initializer = source[i++];
            found = 1;
            break;
        }
        if(!found){
            return ;
        }
    }

    for (; i < l; i++) {
        if( i in source){
            initializer = iterator(initializer, source[i] , i , source);
        }
    }
    return initializer;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/array/remove.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/30
 */



/**
 * 移除数组中的项
 * @name baidu.array.remove
 * @function
 * @grammar baidu.array.remove(source, match)
 * @param {Array} source 需要移除项的数组
 * @param {Any} match 要移除的项
 * @meta standard
 * @see baidu.array.removeAt
 *
 * @returns {Array} 移除后的数组
 */
baidu.array.remove = function (source, match) {
    var len = source.length;

    while (len--) {
        if (len in source && source[len] === match) {
            source.splice(len, 1);
        }
    }
    return source;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/array/removeAt.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/30
 */



/**
 * 移除数组中的项
 * @name baidu.array.removeAt
 * @function
 * @grammar baidu.array.removeAt(source, index)
 * @param {Array} source 需要移除项的数组
 * @param {number} index 要移除项的索引位置
 * @see baidu.array.remove
 * @meta standard
 * @returns {Any} 被移除的数组项
 */
baidu.array.removeAt = function (source, index) {
    return source.splice(index, 1)[0];
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 判断一个数组中是否有部分元素满足给定条件
 * @name baidu.array.some
 * @function
 * @grammar baidu.array.some(source, iterator[,thisObject])
 * @param {Array} source 需要判断的数组.
 * @param {Function} iterator 判断函数.
 * @param {Object} [thisObject] 函数调用时的this指针，如果没有此参数，默认是当前遍历的数组
 * @return {boolean} 判断结果.
 * @see baidu.array.every
 */
baidu.array.some = function(source, iterator, thisObject) {
    var i = 0,
        len = source.length;
    for (; i < len; i++) {
        if (i in source && iterator.call(thisObject || source, source[i], i)) {
            return true;
        }
    }
    return false;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/array/unique.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */



/**
 * 过滤数组中的相同项。如果两个元素相同，会删除后一个元素。
 * @name baidu.array.unique
 * @function
 * @grammar baidu.array.unique(source[, compareFn])
 * @param {Array} source 需要过滤相同项的数组
 * @param {Function} [compareFn] 比较两个数组项是否相同的函数,两个数组项作为函数的参数。
 *
 * @returns {Array} 过滤后的新数组
 */
baidu.array.unique = function (source, compareFn) {
    var len = source.length,
        result = source.slice(0),
        i, datum;

    if ('function' != typeof compareFn) {
        compareFn = function (item1, item2) {
            return item1 === item2;
        };
    }

    // 从后往前双重循环比较
    // 如果两个元素相同，删除后一个
    while (--len > 0) {
        datum = result[len];
        i = len;
        while (i--) {
            if (compareFn(datum, result[i])) {
                result.splice(len, 1);
                break;
            }
        }
    }

    return result;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */


/**
 * @namespace baidu.async 对异步调用的封装。
 * @author rocy
 */
baidu.async = baidu.async || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/object.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */


/**
 * @namespace baidu.object 操作原生对象的方法。
 */
baidu.object = baidu.object || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 将源对象的所有属性拷贝到目标对象中
 * @author erik
 * @name baidu.object.extend
 * @function
 * @grammar baidu.object.extend(target, source)
 * @param {Object} target 目标对象
 * @param {Object} source 源对象
 * @see baidu.array.merge
 * @remark
 *
 1.目标对象中，与源对象key相同的成员将会被覆盖。<br>
 2.源对象的prototype成员不会拷贝。

 * @shortcut extend
 * @meta standard
 *
 * @returns {Object} 目标对象
 */
baidu.extend =
    baidu.object.extend = function (target, source) {
        for (var p in source) {
            if (source.hasOwnProperty(p)) {
                target[p] = source[p];
            }
        }

        return target;
    };
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/02
 */


/**
 * @namespace baidu.lang 对语言层面的封装，包括类型判断、模块扩展、继承基类以及对象自定义事件的支持。
 */
baidu.lang = baidu.lang || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/isFunction.js
 * author: rocy
 * version: 1.1.2
 * date: 2010/06/12
 */



/**
 * 判断目标参数是否为function或Function实例
 * @name baidu.lang.isFunction
 * @function
 * @grammar baidu.lang.isFunction(source)
 * @param {Any} source 目标参数
 * @version 1.2
 * @see baidu.lang.isString,baidu.lang.isObject,baidu.lang.isNumber,baidu.lang.isArray,baidu.lang.isElement,baidu.lang.isBoolean,baidu.lang.isDate
 * @meta standard
 * @returns {boolean} 类型判断结果
 */
baidu.lang.isFunction = function (source) {
    // chrome下,'function' == typeof /a/ 为true.
    return '[object Function]' == Object.prototype.toString.call(source);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 判断给定object是否包含Deferred主要特征.
 * @param {Object} obj 待判定object.
 * @return {Boolean} 判定结果, true 则该object符合Deferred特征.
 * @private
 * @author rocy
 */
baidu.async._isDeferred = function(obj) {
    var isFn = baidu.lang.isFunction;
    return obj && isFn(obj.success) && isFn(obj.then)
        && isFn(obj.fail) && isFn(obj.cancel);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */






/**
 * 用于支持异步处理, 使同步异步的调用风格统一.
 * @class
 * @private
 * @grammar new baidu.async.Deferred()
 * @remark
 * 示例:
 function someAsync(){
        var deferred = new baidu.async.Deferred();
        setTimeout(function(){
            afterSomeOperation();
            if(someReason){
                deferred.resolve(someValue);
            } else {
                deferred.reject(someError);
            }
        },100);
        return deferred;
    }
 //用类似同步的方式调用异步操作.
 someAsync().then(onSuccess, onFail);
 //onSuccess或onFail可以确保在正确的时间点执行.

 * @author rocy
 */
baidu.async.Deferred = function() {
    var me = this;
    baidu.extend(me, {
        _fired: 0,
        _firing: 0,
        _cancelled: 0,
        _resolveChain: [],
        _rejectChain: [],
        _result: [],
        _isError: 0
    });

    function fire() {
        if (me._cancelled || me._firing) {
            return;
        }
        //如果已有nextDeferred对象,则转移到nextDeferred上.
        if (me._nextDeferred) {
            me._nextDeferred.then(me._resolveChain[0], me._rejectChain[0]);
            return;
        }
        me._firing = 1;
        var chain = me._isError ? me._rejectChain : me._resolveChain,
            result = me._result[me._isError ? 1 : 0];
        // 此处使用while而非for循环,是为了避免firing时插入新函数.
        while (chain[0] && (! me._cancelled)) {
            //所有函数仅调用一次.
            //TODO: 支持传入 this 和 arguments, 而不是仅仅一个值.
            try {
                var chainResult = chain.shift().call(me, result);
                //若方法返回Deferred,则将剩余方法延至Deferred中执行
                if (baidu.async._isDeferred(chainResult)) {
                    me._nextDeferred = chainResult;
                    [].push.apply(chainResult._resolveChain, me._resolveChain);
                    [].push.apply(chainResult._rejectChain, me._rejectChain);
                    chain = me._resolveChain = [];
                    me._rejectChain = [];
                }
            } catch (error) {
                throw error;
            } finally {
                me._fired = 1;
                me._firing = 0;
            }
        }
    }


    /**
     * 调用onSuccess链.使用给定的value作为函数参数.
     * @param {*} value 成功结果.
     * @return {baidu.async.Deferred} this.
     */
    me.resolve = me.fireSuccess = function(value) {
        me._result[0] = value;
        fire();
        return me;
    };

    /**
     * 调用onFail链. 使用给定的error作为函数参数.
     * @param {Error} error 失败原因.
     * @return {baidu.async.Deferred} this.
     */
    me.reject = me.fireFail = function(error) {
        me._result[1] = error;
        me._isError = 1;
        fire();
        return me;
    };

    /**
     * 添加onSuccess和onFail方法到各自的链上. 如果该deferred已触发,则立即执行.
     * @param {Function} onSuccess 该deferred成功时的回调函数.第一个形参为成功时结果.
     * @param {Function} onFail 该deferred失败时的回调函数.第一个形参为失败时结果.
     * @return {baidu.async.Deferred} this.
     */
    me.then = function(onSuccess, onFail) {
        me._resolveChain.push(onSuccess);
        me._rejectChain.push(onFail);
        if (me._fired) {
            fire();
        }
        return me;
    };

    /**
     * 添加方法到onSuccess链上. 如果该deferred已触发,则立即执行.
     * @param {Function} onSuccess 该deferred成功时的回调函数.第一个形参为成功时结果.
     * @return {baidu.async.Deferred} this.
     */
    me.success = function(onSuccess) {
        return me.then(onSuccess, baidu.fn.blank);
    };

    /**
     * 添加方法到onFail链上. 如果该deferred已触发,则立即执行.
     * @param {Function} onFail 该deferred失败时的回调函数.第一个形参为失败时结果.
     * @return {baidu.async.Deferred} this.
     */
    me.fail = function(onFail) {
        return me.then(baidu.fn.blank, onFail);
    };

    /**
     * 中断该deferred, 使其失效.
     */
    me.cancel = function() {
        me._cancelled = 1;
    };
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */




/**
 * 支持异步的ajax.get封装.
 * @grammar baidu.async.Deferred(url)
 * @param {String} url 请求地址.
 * @version 1.3.9
 * @return {baidu.async.Deferred} Deferred对象,支持链式调用.
 */
baidu.async.get = function(url){
    var deferred = new baidu.async.Deferred();
    baidu.ajax.request(url, {
        onsuccess: function(xhr, responseText) {
            deferred.resolve({xhr: xhr, responseText: responseText});
        },
        onfailure: function(xhr) {
            deferred.reject({xhr: xhr});
        }
    });
    return deferred;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */




/**
 * 支持异步的ajax.post封装.
 * @grammar baidu.async.post(url, data)
 * @param {String} url 请求地址.
 * @param {String} data 请求数据.
 * @version 1.3.9
 * @return {baidu.async.Deferred} Deferred对象,支持链式调用.
 */
baidu.async.post = function(url, data){
    var deferred = new baidu.async.Deferred();
    baidu.ajax.request(url, {
        method: 'POST',
        data: data,
        onsuccess: function(xhr, responseText) {
            deferred.resolve({xhr: xhr, responseText: responseText});
        },
        onfailure: function(xhr) {
            deferred.reject({xhr: xhr});
        }
    });
    return deferred;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */




/**
 * 保证onResolve或onReject可以按序执行. 若第一个参数为deferred,则deferred完成后执行.否则立即执行onResolve,并传入第一个参数.
 * @grammar baidu.async.when(deferredOrValue, onResolve, onReject)
 * @param {baidu.async.Deferred|*} deferredOrValue deferred实例或任意值.
 * @param {Function} onResolve 成功时的回调函数.若第一个参数不是Deferred实例,则立即执行此方法.
 * @param {Function} onReject 失败时的回调函数.
 * @version 1.3.9
 * @remark
 * 示例一:异步调用: baidu.async.when(asyncLoad(), onResolve, onReject).then(nextSuccess, nextFail);
 * 示例二:同步异步不确定的调用: baidu.async.when(syncOrNot(), onResolve, onReject).then(nextSuccess, nextFail);
 * 示例三:同步接异步的调用: baidu.async.when(sync(), onResolve, onReject).then(asyncSuccess, asyncFail).then(afterAllSuccess, afterAllFail);
 * @return {baidu.async.Deferred} deferred.
 */
baidu.async.when = function(deferredOrValue, onResolve, onReject) {
    if (baidu.async._isDeferred(deferredOrValue)) {
        deferredOrValue.then(onResolve, onReject);
        return deferredOrValue;
    }
    var deferred = new baidu.async.Deferred();
    deferred.then(onResolve, onReject).resolve(deferredOrValue);
    return deferred;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/browser.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */



/**
 * @namespace baidu.browser 判断浏览器类型和特性的属性。
 */
baidu.browser = baidu.browser || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 判断是否为chrome浏览器
 * @grammar baidu.browser.chrome
 * @see baidu.browser.ie,baidu.browser.firefox,baidu.browser.safari,baidu.browser.opera
 * @property chrome chrome版本号
 * @return {Number} chrome版本号
 */
baidu.browser.chrome = /chrome\/(\d+\.\d+)/i.test(navigator.userAgent) ? + RegExp['\x241'] : undefined;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 判断是否为firefox浏览器
 * @property firefox firefox版本号
 * @grammar baidu.browser.firefox
 * @meta standard
 * @see baidu.browser.ie,baidu.browser.safari,baidu.browser.opera,baidu.browser.chrome
 * @return {Number} firefox版本号
 */
baidu.browser.firefox = /firefox\/(\d+\.\d+)/i.test(navigator.userAgent) ? + RegExp['\x241'] : undefined;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



//IE 8下，以documentMode为准
//在百度模板中，可能会有$，防止冲突，将$1 写成 \x241
/**
 * 判断是否为ie浏览器
 * @name baidu.browser.ie
 * @field
 * @grammar baidu.browser.ie
 * @returns {Number} IE版本号
 */
baidu.browser.ie = baidu.ie = /msie (\d+\.\d+)/i.test(navigator.userAgent) ? (document.documentMode || + RegExp['\x241']) : undefined;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/browser/isGecko.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/23
 */



/**
 * 判断是否为gecko内核
 * @property isGecko
 * @grammar baidu.browser.isGecko
 * @meta standard
 * @see baidu.browser.isWebkit
 * @returns {Boolean} 布尔值
 */
baidu.browser.isGecko = /gecko/i.test(navigator.userAgent) && !/like gecko/i.test(navigator.userAgent);
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/browser/isStrict.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/23
 */



/**
 * 判断是否严格标准的渲染模式
 * @property isStrict
 * @grammar baidu.browser.isStrict
 * @meta standard
 * @returns {Boolean} 布尔值
 */
baidu.browser.isStrict = document.compatMode == "CSS1Compat";
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/browser/isWebkit.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/23
 */



/**
 * 判断是否为webkit内核
 * @property isWebkit
 * @grammar baidu.browser.isWebkit
 * @meta standard
 * @see baidu.browser.isGecko
 * @returns {Boolean} 布尔值
 */
baidu.browser.isWebkit = /webkit/i.test(navigator.userAgent);
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/browser/maxthon.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/23
 */



try {
    if (/(\d+\.\d+)/.test(external.max_version)) {
        /**
         * 判断是否为maxthon浏览器
         * @property maxthon maxthon版本号
         * @grammar baidu.browser.maxthon
         * @see baidu.browser.ie
         * @returns {Number} maxthon版本号
         */
        baidu.browser.maxthon = + RegExp['\x241'];
    }
} catch (e) {}
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/browser/opera.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/23
 */



/**
 * 判断是否为opera浏览器
 * @property opera opera版本号
 * @grammar baidu.browser.opera
 * @meta standard
 * @see baidu.browser.ie,baidu.browser.firefox,baidu.browser.safari,baidu.browser.chrome
 * @returns {Number} opera版本号
 */

/**
 * opera 从10开始不是用opera后面的字符串进行版本的判断
 * 在Browser identification最后添加Version + 数字进行版本标识
 * opera后面的数字保持在9.80不变
 */
baidu.browser.opera = /opera(\/| )(\d+(\.\d+)?)(.+?(version\/(\d+(\.\d+)?)))?/i.test(navigator.userAgent) ?  + ( RegExp["\x246"] || RegExp["\x242"] ) : undefined;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



(function(){
    var ua = navigator.userAgent;
    /*
     * 兼容浏览器为safari或ipad,其中,一段典型的ipad UA 如下:
     * Mozilla/5.0(iPad; U; CPU iPhone OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B314 Safari/531.21.10
     */

    /**
     * 判断是否为safari浏览器, 支持ipad
     * @property safari safari版本号
     * @grammar baidu.browser.safari
     * @meta standard
     * @see baidu.browser.ie,baidu.browser.firefox,baidu.browser.opera,baidu.browser.chrome
     */
    baidu.browser.safari = /(\d+\.\d)?(?:\.\d)?\s+safari\/?(\d+\.\d+)?/i.test(ua) && !/chrome/i.test(ua) ? + (RegExp['\x241'] || RegExp['\x242']) : undefined;
})();
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/cookie.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/02
 */


/**
 * @namespace baidu.cookie 操作cookie的方法。
 */
baidu.cookie = baidu.cookie || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/cookie/_isValidKey.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */



/**
 * 验证字符串是否合法的cookie键名
 *
 * @param {string} source 需要遍历的数组
 * @meta standard
 * @return {boolean} 是否合法的cookie键名
 */
baidu.cookie._isValidKey = function (key) {
    // http://www.w3.org/Protocols/rfc2109/rfc2109
    // Syntax:  General
    // The two state management headers, Set-Cookie and Cookie, have common
    // syntactic properties involving attribute-value pairs.  The following
    // grammar uses the notation, and tokens DIGIT (decimal digits) and
    // token (informally, a sequence of non-special, non-white space
    // characters) from the HTTP/1.1 specification [RFC 2068] to describe
    // their syntax.
    // av-pairs   = av-pair *(";" av-pair)
    // av-pair    = attr ["=" value] ; optional value
    // attr       = token
    // value      = word
    // word       = token | quoted-string

    // http://www.ietf.org/rfc/rfc2068.txt
    // token      = 1*<any CHAR except CTLs or tspecials>
    // CHAR       = <any US-ASCII character (octets 0 - 127)>
    // CTL        = <any US-ASCII control character
    //              (octets 0 - 31) and DEL (127)>
    // tspecials  = "(" | ")" | "<" | ">" | "@"
    //              | "," | ";" | ":" | "\" | <">
    //              | "/" | "[" | "]" | "?" | "="
    //              | "{" | "}" | SP | HT
    // SP         = <US-ASCII SP, space (32)>
    // HT         = <US-ASCII HT, horizontal-tab (9)>

    return (new RegExp("^[^\\x00-\\x20\\x7f\\(\\)<>@,;:\\\\\\\"\\[\\]\\?=\\{\\}\\/\\u0080-\\uffff]+\x24")).test(key);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/cookie/getRaw.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */



/**
 * 获取cookie的值，不对值进行解码
 * @name baidu.cookie.getRaw
 * @function
 * @grammar baidu.cookie.getRaw(key)
 * @param {string} key 需要获取Cookie的键名
 * @meta standard
 * @see baidu.cookie.get,baidu.cookie.setRaw
 *
 * @returns {string|null} 获取的Cookie值，获取不到时返回null
 */
baidu.cookie.getRaw = function (key) {
    if (baidu.cookie._isValidKey(key)) {
        var reg = new RegExp("(^| )" + key + "=([^;]*)(;|\x24)"),
            result = reg.exec(document.cookie);

        if (result) {
            return result[2] || null;
        }
    }

    return null;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/cookie/get.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */



/**
 * 获取cookie的值，用decodeURIComponent进行解码
 * @name baidu.cookie.get
 * @function
 * @grammar baidu.cookie.get(key)
 * @param {string} key 需要获取Cookie的键名
 * @remark
 * <b>注意：</b>该方法会对cookie值进行decodeURIComponent解码。如果想获得cookie源字符串，请使用getRaw方法。
 * @meta standard
 * @see baidu.cookie.getRaw,baidu.cookie.set
 *
 * @returns {string|null} cookie的值，获取不到时返回null
 */
baidu.cookie.get = function (key) {
    var value = baidu.cookie.getRaw(key);
    if ('string' == typeof value) {
        value = decodeURIComponent(value);
        return value;
    }
    return null;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/cookie/setRaw.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */



/**
 * 设置cookie的值，不对值进行编码
 * @name baidu.cookie.setRaw
 * @function
 * @grammar baidu.cookie.setRaw(key, value[, options])
 * @param {string} key 需要设置Cookie的键名
 * @param {string} value 需要设置Cookie的值
 * @param {Object} [options] 设置Cookie的其他可选参数
 * @config {string} [path] cookie路径
 * @config {Date|number} [expires] cookie过期时间,如果类型是数字的话, 单位是毫秒
 * @config {string} [domain] cookie域名
 * @config {string} [secure] cookie是否安全传输
 * @remark
 *
 <b>options参数包括：</b><br>
 path:cookie路径<br>
 expires:cookie过期时间，Number型，单位为毫秒。<br>
 domain:cookie域名<br>
 secure:cookie是否安全传输

 * @meta standard
 * @see baidu.cookie.set,baidu.cookie.getRaw
 */
baidu.cookie.setRaw = function (key, value, options) {
    if (!baidu.cookie._isValidKey(key)) {
        return;
    }

    options = options || {};
    //options.path = options.path || "/"; // meizz 20100402 设定一个初始值，方便后续的操作
    //berg 20100409 去掉，因为用户希望默认的path是当前路径，这样和浏览器对cookie的定义也是一致的

    // 计算cookie过期时间
    var expires = options.expires;
    if ('number' == typeof options.expires) {
        expires = new Date();
        expires.setTime(expires.getTime() + options.expires);
    }

    document.cookie =
        key + "=" + value
            + (options.path ? "; path=" + options.path : "")
            + (expires ? "; expires=" + expires.toGMTString() : "")
            + (options.domain ? "; domain=" + options.domain : "")
            + (options.secure ? "; secure" : '');
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/cookie/remove.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */



/**
 * 删除cookie的值
 * @name baidu.cookie.remove
 * @function
 * @grammar baidu.cookie.remove(key, options)
 * @param {string} key 需要删除Cookie的键名
 * @param {Object} options 需要删除的cookie对应的 path domain 等值
 * @meta standard
 */
baidu.cookie.remove = function (key, options) {
    options = options || {};
    options.expires = new Date(0);
    baidu.cookie.setRaw(key, '', options);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/cookie/set.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */



/**
 * 设置cookie的值，用encodeURIComponent进行编码
 * @name baidu.cookie.set
 * @function
 * @grammar baidu.cookie.set(key, value[, options])
 * @param {string} key 需要设置Cookie的键名
 * @param {string} value 需要设置Cookie的值
 * @param {Object} [options] 设置Cookie的其他可选参数
 * @config {string} [path] cookie路径
 * @config {Date|number} [expires] cookie过期时间,如果类型是数字的话, 单位是毫秒
 * @config {string} [domain] cookie域名
 * @config {string} [secure] cookie是否安全传输
 * @remark
 *
 1. <b>注意：</b>该方法会对cookie值进行encodeURIComponent编码。如果想设置cookie源字符串，请使用setRaw方法。<br><br>
 2. <b>options参数包括：</b><br>
 path:cookie路径<br>
 expires:cookie过期时间，Number型，单位为毫秒。<br>
 domain:cookie域名<br>
 secure:cookie是否安全传输

 * @meta standard
 * @see baidu.cookie.setRaw,baidu.cookie.get
 */
baidu.cookie.set = function (key, value, options) {
    baidu.cookie.setRaw(key, encodeURIComponent(value), options);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/date.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/04
 */


/**
 * @namespace baidu.date 操作日期的方法。
 */
baidu.date = baidu.date || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/number.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/2
 */


/**
 * @namespace baidu.number 操作number的方法。
 */
baidu.number = baidu.number || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/number/pad.js
 * author: dron, erik, berg
 * version: 1.1.0
 * date: 20100412
 */



/**
 * 对目标数字进行0补齐处理
 * @name baidu.number.pad
 * @function
 * @grammar baidu.number.pad(source, length)
 * @param {number} source 需要处理的数字
 * @param {number} length 需要输出的长度
 *
 * @returns {string} 对目标数字进行0补齐处理后的结果
 */
baidu.number.pad = function (source, length) {
    var pre = "",
        negative = (source < 0),
        string = String(Math.abs(source));

    if (string.length < length) {
        pre = (new Array(length - string.length + 1)).join('0');
    }

    return (negative ?  "-" : "") + pre + string;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/date/format.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/04
 */




/**
 * 对目标日期对象进行格式化
 * @name baidu.date.format
 * @function
 * @grammar baidu.date.format(source, pattern)
 * @param {Date} source 目标日期对象
 * @param {string} pattern 日期格式化规则
 * @remark
 *
 <b>格式表达式，变量含义：</b><br><br>
 hh: 带 0 补齐的两位 12 进制时表示<br>
 h: 不带 0 补齐的 12 进制时表示<br>
 HH: 带 0 补齐的两位 24 进制时表示<br>
 H: 不带 0 补齐的 24 进制时表示<br>
 mm: 带 0 补齐两位分表示<br>
 m: 不带 0 补齐分表示<br>
 ss: 带 0 补齐两位秒表示<br>
 s: 不带 0 补齐秒表示<br>
 yyyy: 带 0 补齐的四位年表示<br>
 yy: 带 0 补齐的两位年表示<br>
 MM: 带 0 补齐的两位月表示<br>
 M: 不带 0 补齐的月表示<br>
 dd: 带 0 补齐的两位日表示<br>
 d: 不带 0 补齐的日表示

 *
 * @returns {string} 格式化后的字符串
 */

baidu.date.format = function (source, pattern) {
    if ('string' != typeof pattern) {
        return source.toString();
    }

    function replacer(patternPart, result) {
        pattern = pattern.replace(patternPart, result);
    }

    var pad     = baidu.number.pad,
        year    = source.getFullYear(),
        month   = source.getMonth() + 1,
        date2   = source.getDate(),
        hours   = source.getHours(),
        minutes = source.getMinutes(),
        seconds = source.getSeconds();

    replacer(/yyyy/g, pad(year, 4));
    replacer(/yy/g, pad(parseInt(year.toString().slice(2), 10), 2));
    replacer(/MM/g, pad(month, 2));
    replacer(/M/g, month);
    replacer(/dd/g, pad(date2, 2));
    replacer(/d/g, date2);

    replacer(/HH/g, pad(hours, 2));
    replacer(/H/g, hours);
    replacer(/hh/g, pad(hours % 12, 2));
    replacer(/h/g, hours % 12);
    replacer(/mm/g, pad(minutes, 2));
    replacer(/m/g, minutes);
    replacer(/ss/g, pad(seconds, 2));
    replacer(/s/g, seconds);

    return pattern;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/date/parse.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/04
 */



/**
 * 将目标字符串转换成日期对象
 * @name baidu.date.parse
 * @function
 * @grammar baidu.date.parse(source)
 * @param {string} source 目标字符串
 * @remark
 *
 对于目标字符串，下面这些规则决定了 parse 方法能够成功地解析： <br>
 <ol>
 <li>短日期可以使用“/”或“-”作为日期分隔符，但是必须用月/日/年的格式来表示，例如"7/20/96"。</li>
 <li>以 "July 10 1995" 形式表示的长日期中的年、月、日可以按任何顺序排列，年份值可以用 2 位数字表示也可以用 4 位数字表示。如果使用 2 位数字来表示年份，那么该年份必须大于或等于 70。 </li>
 <li>括号中的任何文本都被视为注释。这些括号可以嵌套使用。 </li>
 <li>逗号和空格被视为分隔符。允许使用多个分隔符。 </li>
 <li>月和日的名称必须具有两个或两个以上的字符。如果两个字符所组成的名称不是独一无二的，那么该名称就被解析成最后一个符合条件的月或日。例如，"Ju" 被解释为七月而不是六月。 </li>
 <li>在所提供的日期中，如果所指定的星期几的值与按照该日期中剩余部分所确定的星期几的值不符合，那么该指定值就会被忽略。例如，尽管 1996 年 11 月 9 日实际上是星期五，"Tuesday November 9 1996" 也还是可以被接受并进行解析的。但是结果 date 对象中包含的是 "Friday November 9 1996"。 </li>
 <li>JScript 处理所有的标准时区，以及全球标准时间 (UTC) 和格林威治标准时间 (GMT)。</li>
 <li>小时、分钟、和秒钟之间用冒号分隔，尽管不是这三项都需要指明。"10:"、"10:11"、和 "10:11:12" 都是有效的。 </li>
 <li>如果使用 24 小时计时的时钟，那么为中午 12 点之后的时间指定 "PM" 是错误的。例如 "23:15 PM" 就是错误的。</li>
 <li>包含无效日期的字符串是错误的。例如，一个包含有两个年份或两个月份的字符串就是错误的。</li>
 </ol>

 *
 * @returns {Date} 转换后的日期对象
 */

baidu.date.parse = function (source) {
    var reg = new RegExp("^\\d+(\\-|\\/)\\d+(\\-|\\/)\\d+\x24");
    if ('string' == typeof source) {
        if (reg.test(source) || isNaN(Date.parse(source))) {
            var d = source.split(/ |T/),
                d1 = d.length > 1
                    ? d[1].split(/[^\d]/)
                    : [0, 0, 0],
                d0 = d[0].split(/[^\d]/);
            return new Date(d0[0] - 0,
                d0[1] - 1,
                d0[2] - 0,
                d1[0] - 0,
                d1[1] - 0,
                d1[2] - 0);
        } else {
            return new Date(source);
        }
    }

    return new Date();
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */


/**
 * @namespace baidu.dom 操作dom的方法。
 */
baidu.dom = baidu.dom || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/_NAME_ATTRS.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/2
 */




/**
 * 提供给setAttr与getAttr方法作名称转换使用
 * ie6,7下class要转换成className
 * @meta standard
 */

baidu.dom._NAME_ATTRS = (function () {
    var result = {
        'cellpadding': 'cellPadding',
        'cellspacing': 'cellSpacing',
        'colspan': 'colSpan',
        'rowspan': 'rowSpan',
        'valign': 'vAlign',
        'usemap': 'useMap',
        'frameborder': 'frameBorder'
    };

    if (baidu.browser.ie < 8) {
        result['for'] = 'htmlFor';
        result['class'] = 'className';
    } else {
        result['htmlFor'] = 'for';
        result['className'] = 'class';
    }

    return result;
})();
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/isString.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/30
 */



/**
 * 判断目标参数是否string类型或String对象
 * @name baidu.lang.isString
 * @function
 * @grammar baidu.lang.isString(source)
 * @param {Any} source 目标参数
 * @shortcut isString
 * @meta standard
 * @see baidu.lang.isObject,baidu.lang.isNumber,baidu.lang.isArray,baidu.lang.isElement,baidu.lang.isBoolean,baidu.lang.isDate
 *
 * @returns {boolean} 类型判断结果
 */
baidu.lang.isString = function (source) {
    return '[object String]' == Object.prototype.toString.call(source);
};

// 声明快捷方法
baidu.isString = baidu.lang.isString;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/g.js
 * author: allstar, erik, berg
 * version: 1.3
 * date: 2010-07-07
 */




/**
 * 从文档中获取指定的DOM元素
 * **内部方法**
 *
 * @param {string|HTMLElement} id 元素的id或DOM元素
 * @meta standard
 * @return {HTMLElement} DOM元素，如果不存在，返回null，如果参数不合法，直接返回参数
 */
baidu.dom._g = function (id) {
    if (baidu.lang.isString(id)) {
        return document.getElementById(id);
    }
    return id;
};

// 声明快捷方法
baidu._g = baidu.dom._g;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/g.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/11/17
 */



/**
 * 从文档中获取指定的DOM元素
 * @name baidu.dom.g
 * @function
 * @grammar baidu.dom.g(id)
 * @param {string|HTMLElement} id 元素的id或DOM元素
 * @shortcut g,T.G
 * @meta standard
 * @see baidu.dom.q
 *
 * @returns {HTMLElement|null} 获取的元素，查找不到时返回null,如果参数不合法，直接返回参数
 */
baidu.dom.g = function (id) {
    if ('string' == typeof id || id instanceof String) {
        return document.getElementById(id);
    } else if (id && id.nodeName && (id.nodeType == 1 || id.nodeType == 9)) {
        return id;
    }
    return null;
};

// 声明快捷方法
baidu.g = baidu.G = baidu.dom.g;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/_matchNode.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/18
 */




/**
 * 从目标元素指定的方向搜索元素
 *
 * @param {HTMLElement|string} element   目标元素或目标元素的id
 * @param {string}             direction 遍历的方向名称，取值为previousSibling,nextSibling
 * @param {string}             start     遍历的开始位置，取值为firstChild,lastChild,previousSibling,nextSibling
 * @meta standard
 * @return {HTMLElement} 搜索到的元素，如果没有找到，返回 null
 */
baidu.dom._matchNode = function (element, direction, start) {
    element = baidu.dom.g(element);

    for (var node = element[start]; node; node = node[direction]) {
        if (node.nodeType == 1) {
            return node;
        }
    }

    return null;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/_styleFilters.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/12/02
 */



/**
 * 提供给setStyle与getStyle使用
 */
baidu.dom._styleFilter = baidu.dom._styleFilter || [];

/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/_styleFilter/color.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */



/**
 * 提供给setStyle与getStyle使用
 * @meta standard
 */
baidu.dom._styleFilter[baidu.dom._styleFilter.length] = {
    get: function (key, value) {
        if (/color/i.test(key) && value.indexOf("rgb(") != -1) {
            var array = value.split(",");

            value = "#";
            for (var i = 0, color; color = array[i]; i++){
                color = parseInt(color.replace(/[^\d]/gi, ''), 10).toString(16);
                value += color.length == 1 ? "0" + color : color;
            }

            value = value.toUpperCase();
        }

        return value;
    }
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/_styleFilter/filter.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */



/**
 * 为获取和设置样式的过滤器
 * @private
 * @meta standard
 */
baidu.dom._styleFilter.filter = function (key, value, method) {
    for (var i = 0, filters = baidu.dom._styleFilter, filter; filter = filters[i]; i++) {
        if (filter = filter[method]) {
            value = filter(key, value);
        }
    }

    return value;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/_styleFilter/px.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */



/**
 * 提供给setStyle与getStyle使用
 * @meta standard
 */
baidu.dom._styleFilter[baidu.dom._styleFilter.length] = {
    set: function (key, value) {
        if (value.constructor == Number
            && !/zIndex|fontWeight|opacity|zoom|lineHeight/i.test(key)){
            value = value + "px";
        }

        return value;
    }
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/_styleFixer.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/17
 */



/**
 * 提供给setStyle与getStyle使用
 */
baidu.dom._styleFixer = baidu.dom._styleFixer || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/_styleFixer/display.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/24
 */





/**
 * 提供给setStyle与getStyle使用
 * @meta standard
 */
baidu.dom._styleFixer.display = baidu.browser.ie && baidu.browser.ie < 8 ? { // berg: 修改到<8，因为ie7同样存在这个问题，from 先伟
    set: function (element, value) {
        element = element.style;
        if (value == 'inline-block') {
            element.display = 'inline';
            element.zoom = 1;
        } else {
            element.display = value;
        }
    }
} : baidu.browser.firefox && baidu.browser.firefox < 3 ? {
    set: function (element, value) {
        element.style.display = value == 'inline-block' ? '-moz-inline-box' : value;
    }
} : null;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All right reserved.
 * 
 * path: baidu/dom/_styleFixer/float.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/17
 */



/**
 * 提供给setStyle与getStyle使用
 * @meta standard
 */
baidu.dom._styleFixer["float"] = baidu.browser.ie ? "styleFloat" : "cssFloat";
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/_styleFixer/opacity.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/17
 */




/**
 * 提供给setStyle与getStyle使用
 * @meta standard
 */
baidu.dom._styleFixer.opacity = baidu.browser.ie ? {
    get: function (element) {
        var filter = element.style.filter;
        return filter && filter.indexOf("opacity=") >= 0 ? (parseFloat(filter.match(/opacity=([^)]*)/)[1]) / 100) + "" : "1";
    },

    set: function (element, value) {
        var style = element.style;
        // 只能Quirks Mode下面生效??
        style.filter = (style.filter || "").replace(/alpha\([^\)]*\)/gi, "") + (value == 1 ? "" : "alpha(opacity=" + value * 100 + ")");
        // IE filters only apply to elements with "layout."
        style.zoom = 1;
    }
} : null;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/getDocument.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/17
 */



/**
 * 获取目标元素所属的document对象
 * @name baidu.dom.getDocument
 * @function
 * @grammar baidu.dom.getDocument(element)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @meta standard
 * @see baidu.dom.getWindow
 *
 * @returns {HTMLDocument} 目标元素所属的document对象
 */
baidu.dom.getDocument = function (element) {
    element = baidu.dom.g(element);
    return element.nodeType == 9 ? element : element.ownerDocument || element.document;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */





/**
 * 获取目标元素的computed style值。如果元素的样式值不能被浏览器计算，则会返回空字符串（IE）
 *
 * @author berg
 * @name baidu.dom.getComputedStyle
 * @function
 * @grammar baidu.dom.getComputedStyle(element, key)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {string} key 要获取的样式名
 *
 * @see baidu.dom.getStyle
 *
 * @returns {string} 目标元素的computed style值
 */

baidu.dom.getComputedStyle = function(element, key){
    element = baidu.dom._g(element);
    var doc = baidu.dom.getDocument(element),
        styles;
    if (doc.defaultView && doc.defaultView.getComputedStyle) {
        styles = doc.defaultView.getComputedStyle(element, null);
        if (styles) {
            return styles[key] || styles.getPropertyValue(key);
        }
    }
    return '';
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */


/**
 * @namespace baidu.string 操作字符串的方法。
 */
baidu.string = baidu.string || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string/toCamelCase.js
 * author: erik, berg
 * version: 1.2
 * date: 2010-06-22
 */



/**
 * 将目标字符串进行驼峰化处理
 * @name baidu.string.toCamelCase
 * @function
 * @grammar baidu.string.toCamelCase(source)
 * @param {string} source 目标字符串
 * @remark
 * 支持单词以“-_”分隔
 * @meta standard
 *
 * @returns {string} 驼峰化处理后的字符串
 */

    //todo:考虑以后去掉下划线支持？
baidu.string.toCamelCase = function (source) {
    //提前判断，提高getStyle等的效率 thanks xianwei
    if (source.indexOf('-') < 0 && source.indexOf('_') < 0) {
        return source;
    }
    return source.replace(/[-_][^-_]/g, function (match) {
        return match.charAt(1).toUpperCase();
    });
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */







/**
 * 获取目标元素的样式值
 * @name baidu.dom.getStyle
 * @function
 * @grammar baidu.dom.getStyle(element, key)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {string} key 要获取的样式名
 * @remark
 *
 * 为了精简代码，本模块默认不对任何浏览器返回值进行归一化处理（如使用getStyle时，不同浏览器下可能返回rgb颜色或hex颜色），也不会修复浏览器的bug和差异性（如设置IE的float属性叫styleFloat，firefox则是cssFloat）。<br />
 * baidu.dom._styleFixer和baidu.dom._styleFilter可以为本模块提供支持。<br />
 * 其中_styleFilter能对颜色和px进行归一化处理，_styleFixer能对display，float，opacity，textOverflow的浏览器兼容性bug进行处理。
 * @shortcut getStyle
 * @meta standard
 * @see baidu.dom.setStyle,baidu.dom.setStyles, baidu.dom.getComputedStyle
 *
 * @returns {string} 目标元素的样式值
 */
// TODO
// 1. 无法解决px/em单位统一的问题（IE）
// 2. 无法解决样式值为非数字值的情况（medium等 IE）
baidu.dom.getStyle = function (element, key) {
    var dom = baidu.dom;

    element = dom.g(element);
    key = baidu.string.toCamelCase(key);
    //computed style, then cascaded style, then explicitly set style.
    var value = element.style[key] ||
        (element.currentStyle ? element.currentStyle[key] : "") ||
        dom.getComputedStyle(element, key);

    // 在取不到值的时候，用fixer进行修正
    if (!value) {
        var fixer = dom._styleFixer[key];
        if(fixer){
            value = fixer.get ? fixer.get(element) : baidu.dom.getStyle(element, fixer);
        }
    }

    /* 检查结果过滤器 */
    if (fixer = dom._styleFilter) {
        value = fixer.filter(key, value, 'get');
    }

    return value;
};

// 声明快捷方法
baidu.getStyle = baidu.dom.getStyle;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/_styleFixer/textOverflow.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/17
 */






/**
 * 提供给setStyle与getStyle使用，在做textOverflow时会向element对象中添加,_baiduOverflow, _baiduHTML两个属性保存原始的innerHTML信息
 */
baidu.dom._styleFixer.textOverflow = (function () {
    var fontSizeCache = {};

    function pop(list) {
        var o = list.length;
        if (o > 0) {
            o = list[o - 1];
            list.length--;
        } else {
            o = null;
        }
        return o;
    }

    function setText(element, text) {
        element[baidu.browser.firefox ? "textContent" : "innerText"] = text;
    }

    function count(element, width, ellipsis) {
        /* 计算cache的名称 */
        var o = baidu.browser.ie ? element.currentStyle || element.style : getComputedStyle(element, null),
            fontWeight = o.fontWeight,
            cacheName =
                "font-family:" + o.fontFamily + ";font-size:" + o.fontSize
                    + ";word-spacing:" + o.wordSpacing + ";font-weight:" + ((parseInt(fontWeight) || 0) == 401 ? 700 : fontWeight)
                    + ";font-style:" + o.fontStyle + ";font-variant:" + o.fontVariant,
            cache = fontSizeCache[cacheName];

        if (!cache) {
            o = element.appendChild(document.createElement("div"));

            o.style.cssText = "float:left;" + cacheName;
            cache = fontSizeCache[cacheName] = [];

            /* 计算ASCII字符的宽度cache */
            for (var i=0; i < 256; i++) {
                i == 32 ? (o.innerHTML = "&nbsp;") : setText(o, String.fromCharCode(i));
                cache[i] = o.offsetWidth;
            }

            /* 计算非ASCII字符的宽度、字符间距、省略号的宽度,\u4e00是汉字一的编码*/
            setText(o, "\u4e00");
            cache[256] = o.offsetWidth;
            setText(o, "\u4e00\u4e00");
            cache[257] = o.offsetWidth - cache[256] * 2;
            cache[258] = cache[".".charCodeAt(0)] * 3 + cache[257] * 3;

            element.removeChild(o);
        }

        for (
            /* wordWidth是每个字符或子节点计算之前的宽度序列 */
            var node = element.firstChild, charWidth = cache[256], wordSpacing = cache[257], ellipsisWidth = cache[258],
                wordWidth = [], ellipsis = ellipsis ? ellipsisWidth : 0;
            node;
            node = node.nextSibling
            ) {
            if (width < ellipsis) {
                element.removeChild(node);
            }
            else if (node.nodeType == 3) {
                for (var i = 0, text = node.nodeValue, length = text.length; i < length; i++) {
                    o = text.charCodeAt(i);
                    /* 计算增加字符后剩余的长度 */
                    wordWidth[wordWidth.length] = [width, node, i];
                    width -= (i ? wordSpacing : 0) + (o < 256 ? cache[o] : charWidth);
                    if (width < ellipsis) {
                        break;
                    }
                }
            }
            else {
                o = node.tagName;
                if (o == "IMG" || o == "TABLE") {
                    /* 特殊元素直接删除 */
                    o = node;
                    node = node.previousSibling;
                    element.removeChild(o);
                }
                else {
                    wordWidth[wordWidth.length] = [width, node];
                    width -= node.offsetWidth;
                }
            }
        }

        if (width < ellipsis) {
            /* 过滤直到能得到大于省略号宽度的位置 */
            while (o = pop(wordWidth)) {
                width = o[0];
                node = o[1];
                o = o[2];
                if (node.nodeType == 3) {
                    if (width >= ellipsisWidth) {
                        node.nodeValue = node.nodeValue.substring(0, o) + "...";
                        return true;
                    }
                    else if (!o) {
                        element.removeChild(node);
                    }
                }
                else if (count(node, width, true)) {
                    return true;
                }
                else {
                    element.removeChild(node);
                }
            }

            /* 能显示的宽度小于省略号的宽度，直接不显示 */
            element.innerHTML = "";
        }
    }

    return {
        get: function (element) {
            var browser = baidu.browser,
                getStyle = dom.getStyle;
            return (browser.opera ?
                getStyle("OTextOverflow") :
                browser.firefox ?
                    element._baiduOverflow :
                    getStyle("textOverflow")) ||
                "clip";
        },

        set: function (element, value) {
            var browser = baidu.browser;
            if (element.tagName == "TD" || element.tagName == "TH" || browser.firefox) {
                element._baiduHTML && (element.innerHTML = element._baiduHTML);

                if (value == "ellipsis") {
                    element._baiduHTML = element.innerHTML;
                    var o = document.createElement("div"), width = element.appendChild(o).offsetWidth;
                    element.removeChild(o);
                    count(element, width);
                }
                else {
                    element._baiduHTML = "";
                }
            }

            o = element.style;
            browser.opera ? (o.OTextOverflow = value) : browser.firefox ? (element._baiduOverflow = value) : (o.textOverflow = value);
        }
    };
})();
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string/trim.js
 * author: dron, erik
 * version: 1.1.0
 * date: 2009/11/15
 */



/**
 * 删除目标字符串两端的空白字符
 * @name baidu.string.trim
 * @function
 * @grammar baidu.string.trim(source)
 * @param {string} source 目标字符串
 * @remark
 * 不支持删除单侧空白字符
 * @shortcut trim
 * @meta standard
 *
 * @returns {string} 删除两端空白字符后的字符串
 */

(function () {
    var trimer = new RegExp("(^[\\s\\t\\xa0\\u3000]+)|([\\u3000\\xa0\\s\\t]+\x24)", "g");

    baidu.string.trim = function (source) {
        return String(source)
            .replace(trimer, "");
    };
})();

// 声明快捷方法
baidu.trim = baidu.string.trim;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All right reserved.
 * 
 * path: baidu/dom/addClass.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/2
 */




/**
 * 为目标元素添加className
 * @name baidu.dom.addClass
 * @function
 * @grammar baidu.dom.addClass(element, className)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {string} className 要添加的className，允许同时添加多个class，中间使用空白符分隔
 * @remark
 * 使用者应保证提供的className合法性，不应包含不合法字符，className合法字符参考：http://www.w3.org/TR/CSS2/syndata.html。
 * @shortcut addClass
 * @meta standard
 * @see baidu.dom.removeClass
 *
 *
 * @returns {HTMLElement} 目标元素
 */
baidu.dom.addClass = function (element, className) {
    element = baidu.dom.g(element);
    var classArray = className.split(/\s+/),
        result = element.className,
        classMatch = " " + result + " ",
        i = 0,
        l = classArray.length;

    for (; i < l; i++){
        if ( classMatch.indexOf( " " + classArray[i] + " " ) < 0 ) {
            result += (result ? ' ' : '') + classArray[i];
        }
    }

    element.className = result;
    return element;
};

// 声明快捷方法
baidu.addClass = baidu.dom.addClass;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/children.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/17
 */




/**
 * 获取目标元素的直接子元素列表
 * @name baidu.dom.children
 * @function
 * @grammar baidu.dom.children(element)
 * @param {HTMLElement|String} element 目标元素或目标元素的id
 * @meta standard
 *
 * @returns {Array} 目标元素的子元素列表，没有子元素时返回空数组
 */
baidu.dom.children = function (element) {
    element = baidu.dom.g(element);

    for (var children = [], tmpEl = element.firstChild; tmpEl; tmpEl = tmpEl.nextSibling) {
        if (tmpEl.nodeType == 1) {
            children.push(tmpEl);
        }
    }

    return children;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/contains.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/17
 */



/**
 * 判断一个元素是否包含另一个元素
 * @name baidu.dom.contains
 * @function
 * @grammar baidu.dom.contains(container, contained)
 * @param {HTMLElement|string} container 包含元素或元素的id
 * @param {HTMLElement|string} contained 被包含元素或元素的id
 * @meta standard
 * @see baidu.dom.intersect
 *
 * @returns {boolean} contained元素是否被包含于container元素的DOM节点上
 */
baidu.dom.contains = function (container, contained) {

    var g = baidu.dom._g;
    container = g(container);
    contained = g(contained);

    //fixme: 无法处理文本节点的情况(IE)
    return container.contains
        ? container != contained && container.contains(contained)
        : !!(container.compareDocumentPosition(contained) & 16);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/setAttr.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/17
 */




/**
 * 设置目标元素的attribute值
 * @name baidu.dom.setAttr
 * @function
 * @grammar baidu.dom.setAttr(element, key, value)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {string} key 要设置的attribute键名
 * @param {string} value 要设置的attribute值
 * @remark
 *
 设置object的自定义属性时，由于浏览器限制，无法设置。

 * @shortcut setAttr
 * @meta standard
 * @see baidu.dom.getAttr,baidu.dom.setAttrs
 *
 * @returns {HTMLElement} 目标元素
 */
baidu.dom.setAttr = function (element, key, value) {
    element = baidu.dom.g(element);

    if ('style' == key){
        element.style.cssText = value;
    } else {
        key = baidu.dom._NAME_ATTRS[key] || key;
        element.setAttribute(key, value);
    }

    return element;
};

// 声明快捷方法
baidu.setAttr = baidu.dom.setAttr;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/setAttrs.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/17
 */




/**
 * 批量设置目标元素的attribute值
 * @name baidu.dom.setAttrs
 * @function
 * @grammar baidu.dom.setAttrs(element, attributes)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {Object} attributes 要设置的attribute集合
 * @shortcut setAttrs
 * @meta standard
 * @see baidu.dom.setAttr,baidu.dom.getAttr
 *
 * @returns {HTMLElement} 目标元素
 */
baidu.dom.setAttrs = function (element, attributes) {
    element = baidu.dom.g(element);

    for (var key in attributes) {
        baidu.dom.setAttr(element, key, attributes[key]);
    }

    return element;
};

// 声明快捷方法
baidu.setAttrs = baidu.dom.setAttrs;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All right reserved.
 */


/**
 * 创建 Element 对象。
 * @author berg
 * @name baidu.dom.create
 * @function
 * @grammar baidu.dom.create(tagName[, options])
 * @param {string} tagName 标签名称.
 * @param {Object} opt_attributes 元素创建时拥有的属性，如style和className.
 * @version 1.3
 * @meta standard
 * @returns {HTMLElement} 创建的 Element 对象
 */
baidu.dom.create = function(tagName, opt_attributes) {
    var el = document.createElement(tagName),
        attributes = opt_attributes || {};
    return baidu.dom.setAttrs(el, attributes);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/guid.js
 * author: meizz
 * version: 1.1.0
 * date: 2010/02/04
 */

/**
 * 返回一个当前页面的唯一标识字符串。
 * @name baidu.lang.guid
 * @function
 * @grammar baidu.lang.guid()
 * @version 1.1.1
 * @meta standard
 *
 * @returns {String} 当前页面的唯一标识字符串
 */

(function(){
    //不直接使用window，可以提高3倍左右性能
    var guid = window[baidu.guid];

    baidu.lang.guid = function() {
        return "TANGRAM__" + (guid._counter ++).toString(36);
    };

    guid._counter = guid._counter || 1;
})();
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/_instances.js
 * author: meizz, erik
 * version: 1.1.0
 * date: 2009/12/1
 */




/**
 * 所有类的实例的容器
 * key为每个实例的guid
 * @meta standard
 */

window[baidu.guid]._instances = window[baidu.guid]._instances || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/Class.js
 * author: meizz, erik
 * version: 1.1.0
 * date: 2009/12/1
 */





/**
 * Tangram继承机制提供的一个基类，用户可以通过继承baidu.lang.Class来获取它的属性及方法。
 * @class
 * @name 	baidu.lang.Class
 * @grammar baidu.lang.Class(guid)
 * @param 	{string}	guid	对象的唯一标识
 * @meta standard
 * @remark baidu.lang.Class和它的子类的实例均包含一个全局唯一的标识guid。guid是在构造函数中生成的，因此，继承自baidu.lang.Class的类应该直接或者间接调用它的构造函数。<br>baidu.lang.Class的构造函数中产生guid的方式可以保证guid的唯一性，及每个实例都有一个全局唯一的guid。
 * @meta standard
 * @see baidu.lang.inherits,baidu.lang.Event
 */
baidu.lang.Class = function(guid) {
    this.guid = guid || baidu.lang.guid();
    window[baidu.guid]._instances[this.guid] = this;
};
window[baidu.guid]._instances = window[baidu.guid]._instances || {};

/**
 * 释放对象所持有的资源，主要是自定义事件。
 * @name dispose
 * @grammar obj.dispose()
 * TODO: 将_listeners中绑定的事件剔除掉
 */
baidu.lang.Class.prototype.dispose = function(){
    delete window[baidu.guid]._instances[this.guid];

    for(var property in this){
        if (!baidu.lang.isFunction(this[property])) {
            delete this[property];
        }
    }
    this.disposed = true;   // 20100716
};

/**
 * 重载了默认的toString方法，使得返回信息更加准确一些。
 * @return {string} 对象的String表示形式
 */
baidu.lang.Class.prototype.toString = function(){
    return "[object " + (this._className || "Object" ) + "]";
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/Event.js
 * author: meizz, erik, berg
 * version: 1.1.1
 * date: 2009/11/24
 * modify: 2010/04/19 berg
 */






/**
 * 自定义的事件对象。
 * @class
 * @name 	baidu.lang.Event
 * @grammar baidu.lang.Event(type[, target])
 * @param 	{string} type	 事件类型名称。为了方便区分事件和一个普通的方法，事件类型名称必须以"on"(小写)开头。
 * @param 	{Object} [target]触发事件的对象
 * @meta standard
 * @remark 引入该模块，会自动为Class引入3个事件扩展方法：addEventListener、removeEventListener和dispatchEvent。
 * @meta standard
 * @see baidu.lang.Class
 */
baidu.lang.Event = function (type, target) {
    this.type = type;
    this.returnValue = true;
    this.target = target || null;
    this.currentTarget = null;
};

/**
 * 注册对象的事件监听器。引入baidu.lang.Event后，Class的子类实例才会获得该方法。
 * @grammar obj.addEventListener(type, handler[, key])
 * @param 	{string}   type         自定义事件的名称
 * @param 	{Function} handler      自定义事件被触发时应该调用的回调函数
 * @param 	{string}   [key]		为事件监听函数指定的名称，可在移除时使用。如果不提供，方法会默认为它生成一个全局唯一的key。
 * @remark 	事件类型区分大小写。如果自定义事件名称不是以小写"on"开头，该方法会给它加上"on"再进行判断，即"click"和"onclick"会被认为是同一种事件。
 */
baidu.lang.Class.prototype.addEventListener = function (type, handler, key) {
    if (!baidu.lang.isFunction(handler)) {
        return;
    }

    !this.__listeners && (this.__listeners = {});

    var t = this.__listeners, id;
    if (typeof key == "string" && key) {
        if (/[^\w\-]/.test(key)) {
            throw("nonstandard key:" + key);
        } else {
            handler.hashCode = key;
            id = key;
        }
    }
    type.indexOf("on") != 0 && (type = "on" + type);

    typeof t[type] != "object" && (t[type] = {});
    id = id || baidu.lang.guid();
    handler.hashCode = id;
    t[type][id] = handler;
};

/**
 * 移除对象的事件监听器。引入baidu.lang.Event后，Class的子类实例才会获得该方法。
 * @grammar obj.removeEventListener(type, handler)
 * @param {string}   type     事件类型
 * @param {Function|string} handler  要移除的事件监听函数或者监听函数的key
 * @remark 	如果第二个参数handler没有被绑定到对应的自定义事件中，什么也不做。
 */
baidu.lang.Class.prototype.removeEventListener = function (type, handler) {
    if (typeof handler != "undefined") {
        if ( (baidu.lang.isFunction(handler) && ! (handler = handler.hashCode))
            || (! baidu.lang.isString(handler))
            ){
            return;
        }
    }

    !this.__listeners && (this.__listeners = {});

    type.indexOf("on") != 0 && (type = "on" + type);

    var t = this.__listeners;
    if (!t[type]) {
        return;
    }
    if (typeof handler != "undefined") {
        t[type][handler] && delete t[type][handler];
    } else {
        for(var guid in t[type]){
            delete t[type][guid];
        }
    }
};

/**
 * 派发自定义事件，使得绑定到自定义事件上面的函数都会被执行。引入baidu.lang.Event后，Class的子类实例才会获得该方法。
 * @grammar obj.dispatchEvent(event, options)
 * @param {baidu.lang.Event|String} event 	Event对象，或事件名称(1.1.1起支持)
 * @param {Object} 					options 扩展参数,所含属性键值会扩展到Event对象上(1.2起支持)
 * @remark 处理会调用通过addEventListenr绑定的自定义事件回调函数之外，还会调用直接绑定到对象上面的自定义事件。例如：<br>
 myobj.onMyEvent = function(){}<br>
 myobj.addEventListener("onMyEvent", function(){});
 */
baidu.lang.Class.prototype.dispatchEvent = function (event, options) {
    if (baidu.lang.isString(event)) {
        event = new baidu.lang.Event(event);
    }
    !this.__listeners && (this.__listeners = {});

    // 20100603 添加本方法的第二个参数，将 options extend到event中去传递
    options = options || {};
    for (var i in options) {
        event[i] = options[i];
    }

    var i, t = this.__listeners, p = event.type;
    event.target = event.target || this;
    event.currentTarget = this;

    p.indexOf("on") != 0 && (p = "on" + p);

    baidu.lang.isFunction(this[p]) && this[p].apply(this, arguments);

    if (typeof t[p] == "object") {
        for (i in t[p]) {
            t[p][i].apply(this, arguments);
        }
    }
    return event.returnValue;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/createSingle.js
 * author: meizz, berg
 * version: 1.1.2
 * date: 2010-05-13
 */





/**
 * 创建一个baidu.lang.Class的单例实例
 * @name baidu.lang.createSingle
 * @function
 * @grammar baidu.lang.createSingle(json)
 * @param {Object} json 直接挂载到这个单例里的预定属性/方法
 * @version 1.2
 * @see baidu.lang.Class
 *
 * @returns {Object} 一个实例
 */
baidu.lang.createSingle = function (json) {
    var c = new baidu.lang.Class();

    for (var key in json) {
        c[key] = json[key];
    }
    return c;
};

/*
 * Tangram
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/dragManager.js
 * author: rocy
 * version: 1.4.0
 * date: 2010/10/14
 */



/**
 * 拖曳管理器
 * @function
 * @param   {HTMLElement|ID}    element 被拖曳的元素
 * @param   {JSON}              options 拖曳配置项 {toggle, autoStop, interval, capture, range, ondragstart, ondragend, ondrag}
 * @return {DOMElement}                 可拖拽的元素
 * @private
 */
baidu.dom.ddManager = baidu.lang.createSingle({
    _targetsDroppingOver:{}
});
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/02
 */



/**
 * @namespace baidu.event 屏蔽浏览器差异性的事件封装。
 * @property target 	事件的触发元素
 * @property pageX 		鼠标事件的鼠标x坐标
 * @property pageY 		鼠标事件的鼠标y坐标
 * @property keyCode 	键盘事件的键值
 */
baidu.event = baidu.event || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/_listeners.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/23
 */



/**
 * 事件监听器的存储表
 * @private
 * @meta standard
 */
baidu.event._listeners = baidu.event._listeners || [];
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/on.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/16
 */




/**
 * 为目标元素添加事件监听器
 * @name baidu.event.on
 * @function
 * @grammar baidu.event.on(element, type, listener)
 * @param {HTMLElement|string|window} element 目标元素或目标元素id
 * @param {string} type 事件类型
 * @param {Function} listener 需要添加的监听器
 * @remark
 *
 1. 不支持跨浏览器的鼠标滚轮事件监听器添加<br>
 2. 改方法不为监听器灌入事件对象，以防止跨iframe事件挂载的事件对象获取失败

 * @shortcut on
 * @meta standard
 * @see baidu.event.un
 *
 * @returns {HTMLElement|window} 目标元素
 */
baidu.event.on = function (element, type, listener) {
    type = type.replace(/^on/i, '');
    element = baidu.dom._g(element);

    var realListener = function (ev) {
            // 1. 这里不支持EventArgument,  原因是跨frame的事件挂载
            // 2. element是为了修正this
            listener.call(element, ev);
        },
        lis = baidu.event._listeners,
        filter = baidu.event._eventFilter,
        afterFilter,
        realType = type;
    type = type.toLowerCase();
    // filter过滤
    if(filter && filter[type]){
        afterFilter = filter[type](element, type, realListener);
        realType = afterFilter.type;
        realListener = afterFilter.listener;
    }

    // 事件监听器挂载
    if (element.addEventListener) {
        element.addEventListener(realType, realListener, false);
    } else if (element.attachEvent) {
        element.attachEvent('on' + realType, realListener);
    }

    // 将监听器存储到数组中
    lis[lis.length] = [element, type, listener, realListener, realType];
    return element;
};

// 声明快捷方法
baidu.on = baidu.event.on;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/un.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/16
 */




/**
 * 为目标元素移除事件监听器
 * @name baidu.event.un
 * @function
 * @grammar baidu.event.un(element, type, listener)
 * @param {HTMLElement|string|window} element 目标元素或目标元素id
 * @param {string} type 事件类型
 * @param {Function} listener 需要移除的监听器
 * @shortcut un
 * @meta standard
 * @see baidu.event.on
 *
 * @returns {HTMLElement|window} 目标元素
 */
baidu.event.un = function (element, type, listener) {
    element = baidu.dom._g(element);
    type = type.replace(/^on/i, '').toLowerCase();

    var lis = baidu.event._listeners,
        len = lis.length,
        isRemoveAll = !listener,
        item,
        realType, realListener;

    //如果将listener的结构改成json
    //可以节省掉这个循环，优化性能
    //但是由于un的使用频率并不高，同时在listener不多的时候
    //遍历数组的性能消耗不会对代码产生影响
    //暂不考虑此优化
    while (len--) {
        item = lis[len];

        // listener存在时，移除element的所有以listener监听的type类型事件
        // listener不存在时，移除element的所有type类型事件
        if (item[1] === type
            && item[0] === element
            && (isRemoveAll || item[2] === listener)) {
            realType = item[4];
            realListener = item[3];
            if (element.removeEventListener) {
                element.removeEventListener(realType, realListener, false);
            } else if (element.detachEvent) {
                element.detachEvent('on' + realType, realListener);
            }
            lis.splice(len, 1);
        }
    }

    return element;
};

// 声明快捷方法
baidu.un = baidu.event.un;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/preventDefault.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/23
 */



/**
 * 阻止事件的默认行为
 * @name baidu.event.preventDefault
 * @function
 * @grammar baidu.event.preventDefault(event)
 * @param {Event} event 事件对象
 * @meta standard
 * @see baidu.event.stop,baidu.event.stopPropagation
 */
baidu.event.preventDefault = function (event) {
    if (event.preventDefault) {
        event.preventDefault();
    } else {
        event.returnValue = false;
    }
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/page.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/17
 */


/**
 * @namespace baidu.page 对页面层面的封装，包括页面的高宽属性、以及外部css和js的动态添加。
 */
baidu.page = baidu.page || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/page/getScrollTop.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/17
 */



/**
 * 获取纵向滚动量
 * @name baidu.page.getScrollTop
 * @function
 * @grammar baidu.page.getScrollTop()
 * @see baidu.page.getScrollLeft
 * @meta standard
 * @returns {number} 纵向滚动量
 */
baidu.page.getScrollTop = function () {
    var d = document;
    return window.pageYOffset || d.documentElement.scrollTop || d.body.scrollTop;
};
/**
 * 获取横向滚动量
 * @name baidu.page.getScrollLeft
 * @function
 * @grammar baidu.page.getScrollLeft()
 * @see baidu.page.getScrollTop
 *
 * @returns {number} 横向滚动量
 */
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/page/getScrollLeft.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/17
 */



/**
 * 获取横向滚动量
 *
 * @return {number} 横向滚动量
 */
baidu.page.getScrollLeft = function () {
    var d = document;
    return window.pageXOffset || d.documentElement.scrollLeft || d.body.scrollLeft;
};
/**
 * 获得页面里的目前鼠标所在的坐标
 * @name baidu.page.getMousePosition
 * @function
 * @grammar baidu.page.getMousePosition()
 * @version 1.2
 *
 * @returns {object} 鼠标坐标值{x:[Number], y:[Number]}
 */
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path: baidu/page/getMousePosition.js
 * author: meizz
 * version: 1.1.0
 * date: 2010/06/02
 */




/**
 * 取得当前页面里的目前鼠标所在的坐标（x y）
 *
 * @return  {JSON}  当前鼠标的坐标值({x, y})
 */
(function(){

    baidu.page.getMousePosition = function(){
        return {
            x : baidu.page.getScrollLeft() + xy.x,
            y : baidu.page.getScrollTop() + xy.y
        };
    };

    var xy = {x:0, y:0};
// 监听当前网页的 mousemove 事件以获得鼠标的实时坐标
    baidu.event.on(document, "onmousemove", function(e){
        e = window.event || e;
        xy.x = e.clientX;
        xy.y = e.clientY;
    });

})();
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/getPosition.js
 * author: berg
 * version: 1.2.0
 * date: 2010/12/16
 *
 * thanks google closure & jquery
 * 本函数部分思想来自：http://code.google.com/p/doctype/wiki/ArticlePageOffset
 */










/**
 * 获取目标元素相对于整个文档左上角的位置
 * @name baidu.dom.getPosition
 * @function
 * @grammar baidu.dom.getPosition(element)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @meta standard
 *
 * @returns {Object} 目标元素的位置，键值为top和left的Object。
 */
baidu.dom.getPosition = function (element) {
    element = baidu.dom.g(element);
    var doc = baidu.dom.getDocument(element),
        browser = baidu.browser,
        getStyle = baidu.dom.getStyle,
    // Gecko 1.9版本以下用getBoxObjectFor计算位置
    // 但是某些情况下是有bug的
    // 对于这些有bug的情况
    // 使用递归查找的方式
        BUGGY_GECKO_BOX_OBJECT = browser.isGecko > 0 &&
            doc.getBoxObjectFor &&
            getStyle(element, 'position') == 'absolute' &&
            (element.style.top === '' || element.style.left === ''),
        pos = {"left":0,"top":0},
        viewport = (browser.ie && !browser.isStrict) ? doc.body : doc.documentElement,
        parent,
        box;

    if(element == viewport){
        return pos;
    }


    if(element.getBoundingClientRect){ // IE and Gecko 1.9+

        //当HTML或者BODY有border width时, 原生的getBoundingClientRect返回值是不符合预期的
        //考虑到通常情况下 HTML和BODY的border只会设成0px,所以忽略该问题.
        box = element.getBoundingClientRect();

        pos.left = Math.floor(box.left) + Math.max(doc.documentElement.scrollLeft, doc.body.scrollLeft);
        pos.top  = Math.floor(box.top)  + Math.max(doc.documentElement.scrollTop,  doc.body.scrollTop);

        // IE会给HTML元素添加一个border，默认是medium（2px）
        // 但是在IE 6 7 的怪异模式下，可以被html { border: 0; } 这条css规则覆盖
        // 在IE7的标准模式下，border永远是2px，这个值通过clientLeft 和 clientTop取得
        // 但是。。。在IE 6 7的怪异模式，如果用户使用css覆盖了默认的medium
        // clientTop和clientLeft不会更新
        pos.left -= doc.documentElement.clientLeft;
        pos.top  -= doc.documentElement.clientTop;

        var htmlDom = doc.body,
        // 在这里，不使用element.style.borderLeftWidth，只有computedStyle是可信的
            htmlBorderLeftWidth = parseInt(getStyle(htmlDom, 'borderLeftWidth')),
            htmlBorderTopWidth = parseInt(getStyle(htmlDom, 'borderTopWidth'));
        if(browser.ie && !browser.isStrict){
            pos.left -= isNaN(htmlBorderLeftWidth) ? 2 : htmlBorderLeftWidth;
            pos.top  -= isNaN(htmlBorderTopWidth) ? 2 : htmlBorderTopWidth;
        }
        /*
         * 因为firefox 3.6和4.0在特定页面下(场景待补充)都会出现1px偏移,所以暂时移除该逻辑分支
         * 如果 2.0版本时firefox仍存在问题,该逻辑分支将彻底移除. by rocy 2011-01-20
         } else if (doc.getBoxObjectFor && !BUGGY_GECKO_BOX_OBJECT){ // gecko 1.9-

         // 1.9以下的Gecko，会忽略ancestors的scroll值
         // https://bugzilla.mozilla.org/show_bug.cgi?id=328881 and
         // https://bugzilla.mozilla.org/show_bug.cgi?id=330619

         box = doc.getBoxObjectFor(element);
         var vpBox = doc.getBoxObjectFor(viewport);
         pos.left = box.screenX - vpBox.screenX;
         pos.top  = box.screenY - vpBox.screenY;
         */
    } else { // safari/opera/firefox
        parent = element;

        do {
            pos.left += parent.offsetLeft;
            pos.top  += parent.offsetTop;

            // safari里面，如果遍历到了一个fixed的元素，后面的offset都不准了
            if (browser.isWebkit > 0 && getStyle(parent, 'position') == 'fixed') {
                pos.left += doc.body.scrollLeft;
                pos.top  += doc.body.scrollTop;
                break;
            }

            parent = parent.offsetParent;
        } while (parent && parent != element);

        // 对body offsetTop的修正
        if(browser.opera > 0 || (browser.isWebkit > 0 && getStyle(element, 'position') == 'absolute')){
            pos.top  -= doc.body.offsetTop;
        }

        // 计算除了body的scroll
        parent = element.offsetParent;
        while (parent && parent != doc.body) {
            pos.left -= parent.scrollLeft;
            // see https://bugs.opera.com/show_bug.cgi?id=249965
//            if (!b.opera || parent.tagName != 'TR') {
            if (!browser.opera || parent.tagName != 'TR') {
                pos.top -= parent.scrollTop;
            }
            parent = parent.offsetParent;
        }
    }

    return pos;
};
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/drag.js
 * author: meizz, berg, lxp
 * version: 1.1.0
 * date: 2010/06/02
 */















/**
 * 拖动指定的DOM元素
 * @name baidu.dom.drag
 * @function
 * @grammar baidu.dom.drag(element, options)
 * @param {HTMLElement|string} element 元素或者元素的id
 * @param {Object} options 拖曳配置项

 * @param {Array} options.range 限制drag的拖拽范围，数组中必须包含四个值，分别是上、右、下、左边缘相对上方或左方的像素距离。默认无限制
 * @param {Number} options.interval 拖曳行为的触发频度（时间：毫秒）
 * @param {Boolean} options.capture 鼠标拖曳粘滞
 * @param {Object} options.mouseEvent 键名为clientX和clientY的object，若不设置此项，默认会获取当前鼠标位置
 * @param {Function} options.ondragstart drag开始时触发
 * @param {Function} options.ondrag drag进行中触发
 * @param {Function} options.ondragend drag结束时触发
 * @param {function} options.autoStop 是否在onmouseup时自动停止拖拽。默认为true
 * @version 1.2
 * @remark
 *
 要拖拽的元素必须事先设定样式的postion值，如果postion为absloute，并且没有设定top和left，拖拽开始时，无法取得元素的top和left值，这时会从[0,0]点开始拖拽

 * @see baidu.dom.draggable
 */
/**
 * 拖曳DOM元素
 * @param   {HTMLElement|ID}    element 被拖曳的元素
 * @param   {JSON}              options 拖曳配置项
 *          {autoStop, interval, capture, range, ondragstart, ondragend, ondrag, mouseEvent}
 */
(function(){
    var target, // 被拖曳的DOM元素
        op, ox, oy, //timer, 
        top, left, mozUserSelect,
        lastLeft, lastTop,
        isFunction = baidu.lang.isFunction,
        timer,
        offset_parent,offset_target;

    baidu.dom.drag = function(element, options) {
        //每次开始拖拽的时候重置lastTop和lastLeft
        lastTop = lastLeft = null;

        if (!(target = baidu.dom.g(element))) return false;
        op = baidu.object.extend({
            autoStop:true   // false 用户手动结束拖曳 ｜ true 在mouseup时自动停止拖曳
            ,capture : true // 鼠标拖曳粘滞
            ,interval : 16  // 拖曳行为的触发频度（时间：毫秒）
            ,handler : target
        }, options);

        offset_parent = baidu.dom.getPosition(target.offsetParent);
        offset_target = baidu.dom.getPosition(target);

        if(baidu.getStyle(target,'position') == "absolute"){
            top =  offset_target.top - (target.offsetParent == document.body ? 0 : offset_parent.top);
            left = offset_target.left - (target.offsetParent == document.body ? 0 :offset_parent.left);
        }else{
            top = parseFloat(baidu.getStyle(target,"top")) || -parseFloat(baidu.getStyle(target,"bottom")) || 0;
            left = parseFloat(baidu.getStyle(target,"left")) || -parseFloat(baidu.getStyle(target,"right")) || 0;
        }

        if(op.mouseEvent){
            // [2010/11/16] 可以不依赖getMousePosition，直接通过一个可选参数获得鼠标位置
            ox = baidu.page.getScrollLeft() + op.mouseEvent.clientX;
            oy = baidu.page.getScrollTop() + op.mouseEvent.clientY;
        }else{
            var xy = baidu.page.getMousePosition();    // 得到当前鼠标坐标值
            ox = xy.x;
            oy = xy.y;
        }

        //timer = setInterval(render, op.interval);

        // 这项为 true，缺省在 onmouseup 事件终止拖曳
        op.autoStop && baidu.event.on(op.handler, "mouseup", stop);
        op.autoStop && baidu.event.on(window, "mouseup", stop);

        // 在拖曳过程中页面里的文字会被选中高亮显示，在这里修正
        baidu.event.on(document, "selectstart", unselect);

        // 设置鼠标粘滞
        if (op.capture && op.handler.setCapture) {
            op.handler.setCapture();
        } else if (op.capture && window.captureEvents) {
            window.captureEvents(Event.MOUSEMOVE|Event.MOUSEUP);
        }
        //baidu.on(target,"mousemove",render);

        // fixed for firefox
        mozUserSelect = document.body.style.MozUserSelect;
        document.body.style.MozUserSelect = "none";

        // ondragstart 事件
        if(isFunction(op.ondragstart)){
            op.ondragstart(target, op);
        }

        timer = setInterval(render, op.interval);
        return {stop : stop, update : update};
    };

    /**
     * 更新当前拖拽对象的属性
     */
    function update(options){
        baidu.extend(op, options);
    }

    /**
     * 手动停止拖拽
     */
    function stop() {
        clearInterval(timer);

        // 解除鼠标粘滞
        if (op.capture && op.handler.releaseCapture) {
            op.handler.releaseCapture();
        } else if (op.capture && window.releaseEvents) {
            window.releaseEvents(Event.MOUSEMOVE|Event.MOUSEUP);
        }

        // 拖曳时网页内容被框选
        document.body.style.MozUserSelect = mozUserSelect;
        baidu.event.un(document, "selectstart", unselect);
        op.autoStop && baidu.event.un(op.handler, "mouseup", stop);
        op.autoStop && baidu.event.un(window, "mouseup", stop);

        // ondragend 事件
        if(isFunction(op.ondragend)){
            op.ondragend(target, op);
        }
    }

    // 对DOM元素进行top/left赋新值以实现拖曳的效果
    function render(e) {
        var rg = op.range,
            xy = baidu.page.getMousePosition(),
            el = left + xy.x - ox,
            et = top  + xy.y - oy;

        // 如果用户限定了可拖动的范围
        if (typeof rg == "object" && rg && rg.length == 4) {
            el = Math.max(rg[3], el);
            el = Math.min(rg[1] - target.offsetWidth,  el);
            et = Math.max(rg[0], et);
            et = Math.min(rg[2] - target.offsetHeight, et);
        }
        target.style.top = et + "px";
        target.style.left = el + "px";

        if((lastLeft !== el || lastTop !== et) && (lastLeft !== null || lastTop !== null) ){
            if(isFunction(op.ondrag)){
                op.ondrag(target, op);
            }
        }
        lastLeft = el;
        lastTop = et;
    }

    // 对document.body.onselectstart事件进行监听，避免拖曳时文字被选中
    function unselect(e) {
        return baidu.event.preventDefault(e, false);
    }
})();
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/setStyle.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/18
 */






/**
 * 设置目标元素的style样式值
 * @name baidu.dom.setStyle
 * @function
 * @grammar baidu.dom.setStyle(element, key, value)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {string} key 要设置的样式名
 * @param {string} value 要设置的样式值
 * @remark
 *
 为了精简代码，本模块默认不对任何浏览器返回值进行归一化处理（如使用getStyle时，不同浏览器下可能返回rgb颜色或hex颜色），也不会修复浏览器的bug和差异性（如设置IE的float属性叫styleFloat，firefox则是cssFloat）。<br />
 baidu.dom._styleFixer和baidu.dom._styleFilter可以为本模块提供支持。<br />
 其中_styleFilter能对颜色和px进行归一化处理，_styleFixer能对display，float，opacity，textOverflow的浏览器兼容性bug进行处理。

 * @shortcut setStyle
 * @meta standard
 * @see baidu.dom.getStyle,baidu.dom.setStyles
 *
 * @returns {HTMLElement} 目标元素
 */
baidu.dom.setStyle = function (element, key, value) {
    var dom = baidu.dom, fixer;

    // 放弃了对firefox 0.9的opacity的支持
    element = dom.g(element);
    key = baidu.string.toCamelCase(key);

    if (fixer = dom._styleFilter) {
        value = fixer.filter(key, value, 'set');
    }

    fixer = dom._styleFixer[key];
    (fixer && fixer.set) ? fixer.set(element, value) : (element.style[fixer || key] = value);

    return element;
};

// 声明快捷方法
baidu.setStyle = baidu.dom.setStyle;
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All rights reserved.
 */














/**
 * 让一个DOM元素可拖拽
 * @name baidu.dom.draggable
 * @function
 * @grammar baidu.dom.draggable(element[, options])
 * @param  {string|HTMLElement}   element 		        元素或者元素的ID.
 * @param  {Object} 		      [options] 			选项.
 * @config {Array} 		          [range] 		        限制drag的拖拽范围，数组中必须包含四个值，分别是上、右、下、左边缘相对上方或左方的像素距离。默认无限制.
 * @config {Number} 	          [interval] 	        拖曳行为的触发频度（时间：毫秒）.
 * @config {Boolean} 	          [capture] 	        鼠标拖曳粘滞.
 * @config {Object} 	          [mouseEvent] 	        键名为clientX和clientY的object，若不设置此项，默认会获取当前鼠标位置.
 * @config {Function} 	          [onbeforedragstart]   drag开始前触发（即鼠标按下时）.
 * @config {Function} 	          [ondragstart]         drag开始时触发.
 * @config {Function} 	          [ondrag] 		        drag进行中触发.
 * @config {Function} 	          [ondragend] 	        drag结束时触发.
 * @config {HTMLElement}          [handler] 	        用于拖拽的手柄，比如dialog的title.
 * @config {Function} 	          [toggle] 		        在每次ondrag的时候，会调用这个方法判断是否应该停止拖拽。如果此函数返回值为false，则停止拖拽.
 * @version 1.2
 * @remark    要拖拽的元素必须事先设定样式的postion值，如果postion为absloute，并且没有设定top和left，拖拽开始时，无法取得元素的top和left值，这时会从[0,0]点开始拖拽<br>如果要拖拽的元素是static定位，会被改成relative定位方式。
 * @see baidu.dom.drag
 * @returns {Draggable Instance} 拖拽实例，包含cancel方法，可以停止拖拽.
 */

baidu.dom.draggable = function(element, options) {
    options = baidu.object.extend({toggle: function() {return true}}, options || {});
    options.autoStop = true;
    element = baidu.dom.g(element);
    options.handler = options.handler || element;
    var manager,
        events = ['ondragstart', 'ondrag', 'ondragend'],
        i = events.length - 1,
        eventName,
        dragSingle,
        draggableSingle = {
            dispose: function() {
                dragSingle && dragSingle.stop();
                baidu.event.un(options.handler, 'onmousedown', handlerMouseDown);
                baidu.lang.Class.prototype.dispose.call(draggableSingle);
            }
        },
        me = this;

    //如果存在ddManager, 将事件转发到ddManager中
    if (manager = baidu.dom.ddManager) {
        for (; i >= 0; i--) {
            eventName = events[i];
            options[eventName] = (function(eventName) {
                var fn = options[eventName];
                return function() {
                    baidu.lang.isFunction(fn) && fn.apply(me, arguments);
                    manager.dispatchEvent(eventName, {DOM: element});
                }
            })(eventName);
        }
    }


    // 拖曳只针对有 position 定位的元素
    if (element) {
        function handlerMouseDown(e) {
            var event = options.mouseEvent = window.event || e;
            if (event.button > 1 //只支持鼠标左键拖拽; 左键代码: IE为1,W3C为0
                // 可以通过配置项里的这个开关函数暂停或启用拖曳功能
                || (baidu.lang.isFunction(options.toggle) && !options.toggle())) {
                return;
            }
            if (baidu.dom.getStyle(element, 'position') == 'static') {
                baidu.dom.setStyle(element, 'position', 'relative');
            }
            if (baidu.lang.isFunction(options.onbeforedragstart)) {
                options.onbeforedragstart(element);
            }
            dragSingle = baidu.dom.drag(element, options);
            draggableSingle.stop = dragSingle.stop;
            draggableSingle.update = dragSingle.update;
            //防止ff下出现禁止拖拽的图标
            baidu.event.preventDefault(event);
        }

        // 对拖曳的扳机元素监听 onmousedown 事件，以便进行拖曳行为
        baidu.event.on(options.handler, 'onmousedown', handlerMouseDown);
    }
    return {
        cancel: function() {
            draggableSingle.dispose();
        }
    };
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/intersect.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/12/02
 */




/**
 * 检查两个元素是否相交
 * @name baidu.dom.intersect
 * @function
 * @grammar baidu.dom.intersect(element1, element2)
 * @param {HTMLElement|string} element1 要检查的元素或元素的id
 * @param {HTMLElement|string} element2 要检查的元素或元素的id
 * @see baidu.dom.contains
 *
 * @returns {boolean} 两个元素是否相交的检查结果
 */
baidu.dom.intersect = function (element1, element2) {
    var g = baidu.dom.g,
        getPosition = baidu.dom.getPosition,
        max = Math.max,
        min = Math.min;

    element1 = g(element1);
    element2 = g(element2);

    var pos1 = getPosition(element1),
        pos2 = getPosition(element2);

    return max(pos1.left, pos2.left) <= min(pos1.left + element1.offsetWidth, pos2.left + element2.offsetWidth)
        && max(pos1.top, pos2.top) <= min(pos1.top + element1.offsetHeight, pos2.top + element2.offsetHeight);
};
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/droppable.js
 * author: rocy
 * version: 1.4.0
 * date: 2010/10/14
 */








//TODO: 添加对 accept, hoverclass 等参数的支持.
/**
 * 让一个DOM元素可以容纳被拖拽的DOM元素
 * @name baidu.dom.droppable
 * @function
 * @grammar baidu.dom.droppable(element[, options])
 * @param {HTMLElement|string} element 容器元素或者容器元素的ID
 * @param {Object} [options] 选项，拖拽元素对于容器元素的事件

 * @config {Function} [ondrop] 当元素放到容器元素内部触发
 * @config {Function} [ondropover] 当元素在容器元素上方时触发
 * @config {Function} [ondropout] 当元素移除容器元素时触发
 * @version 1.3
 * @remark
 *
 需要将元素和容器元素的定位都设置为absolute

 * @see baidu.dom.droppable
 *
 * @returns {Function} cancel取消拖拽
 */
baidu.dom.droppable = function(element, options){
    options = options || {};
    var manager = baidu.dom.ddManager,
        target = baidu.dom.g(element),
        guid = baidu.lang.guid(),
    //拖拽进行时判断
        _dragging = function(event){
            var _targetsDroppingOver = manager._targetsDroppingOver,
                eventData = {trigger:event.DOM,reciever: target};
            //判断被拖拽元素和容器是否相撞
            if(baidu.dom.intersect(target, event.DOM)){
                //进入容器区域
                if(! _targetsDroppingOver[guid]){
                    //初次进入
                    (typeof options.ondropover == 'function') && options.ondropover.call(target,eventData);
                    manager.dispatchEvent("ondropover", eventData);
                    _targetsDroppingOver[guid] = true;
                }
            } else {
                //出了容器区域
                if(_targetsDroppingOver[guid]){
                    (typeof options.ondropout == 'function') && options.ondropout.call(target,eventData);
                    manager.dispatchEvent("ondropout", eventData);
                }
                delete _targetsDroppingOver[guid];
            }
        },
    //拖拽结束时判断
        _dragend = function(event){
            var eventData = {trigger:event.DOM,reciever: target};
            if(baidu.dom.intersect(target, event.DOM)){
                typeof options.ondrop == 'function' && options.ondrop.call(target, eventData);
                manager.dispatchEvent("ondrop", eventData);
            }
            delete manager._targetsDroppingOver[guid];
        };
    //事件注册,return object提供事件解除
    manager.addEventListener("ondrag", _dragging);
    manager.addEventListener("ondragend", _dragend);
    return {
        cancel : function(){
            manager.removeEventListener("ondrag", _dragging);
            manager.removeEventListener("ondragend",_dragend);
        }
    };
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/empty.js
 * author: berg
 * version: 1.0
 * date: 2010-07-06
 */

/**
 * 删除一个节点下面的所有子节点。
 * @name baidu.dom.empty
 * @function
 * @grammar baidu.dom.empty(element)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @version 1.3
 *
 * @returns {HTMLElement} 目标元素

 */



baidu.dom.empty = function (element) {
    element = baidu.dom.g(element);

    while(element.firstChild){
        element.removeChild(element.firstChild);
    }
    //todo：删除元素上绑定的事件等?

    return element;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/first.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/11/18
 */



/**
 * 获取目标元素的第一个元素节点
 * @name baidu.dom.first
 * @function
 * @grammar baidu.dom.first(element)
 * @param {HTMLElement|String} element 目标元素或目标元素的id
 * @see baidu.dom.last,baidu.dom.prev,baidu.dom.next
 * @meta standard
 * @returns {HTMLElement|null} 目标元素的第一个元素节点，查找不到时返回null
 */
baidu.dom.first = function (element) {
    return baidu.dom._matchNode(element, 'nextSibling', 'firstChild');
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/getAttr.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */




/**
 * 获取目标元素的属性值
 * @name baidu.dom.getAttr
 * @function
 * @grammar baidu.dom.getAttr(element, key)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {string} key 要获取的attribute键名
 * @shortcut getAttr
 * @meta standard
 * @see baidu.dom.setAttr,baidu.dom.setAttrs
 *
 * @returns {string|null} 目标元素的attribute值，获取不到时返回null
 */
baidu.dom.getAttr = function (element, key) {
    element = baidu.dom.g(element);

    if ('style' == key){
        return element.style.cssText;
    }

    key = baidu.dom._NAME_ATTRS[key] || key;
    return element.getAttribute(key);
};

// 声明快捷方法
baidu.getAttr = baidu.dom.getAttr;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/setStyles.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/18
 */




/**
 * 批量设置目标元素的style样式值
 * @name baidu.dom.setStyles
 * @function
 * @grammar baidu.dom.setStyles(element, styles)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {Object} styles 要设置的样式集合
 * @shortcut setStyles
 * @meta standard
 * @see baidu.dom.setStyle,baidu.dom.getStyle
 *
 * @returns {HTMLElement} 目标元素
 */
baidu.dom.setStyles = function (element, styles) {
    element = baidu.dom.g(element);

    for (var key in styles) {
        baidu.dom.setStyle(element, key, styles[key]);
    }

    return element;
};

// 声明快捷方法
baidu.setStyles = baidu.dom.setStyles;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/page/getViewHeight.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/20
 */



/**
 * 获取页面视觉区域高度
 * @name baidu.page.getViewHeight
 * @function
 * @grammar baidu.page.getViewHeight()
 * @see baidu.page.getViewWidth
 * @meta standard
 * @returns {number} 页面视觉区域高度
 */
baidu.page.getViewHeight = function () {
    var doc = document,
        client = doc.compatMode == 'BackCompat' ? doc.body : doc.documentElement;

    return client.clientHeight;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/page/getViewWidth.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/20
 */



/**
 * 获取页面视觉区域宽度
 * @name baidu.page.getViewWidth
 * @function
 * @grammar baidu.page.getViewWidth()
 * @see baidu.page.getViewHeight
 *
 * @returns {number} 页面视觉区域宽度
 */
baidu.page.getViewWidth = function () {
    var doc = document,
        client = doc.compatMode == 'BackCompat' ? doc.body : doc.documentElement;

    return client.clientWidth;
};
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All right reserved.
 */
















/**
 * 使目标元素拥有可进行与页面可见区域相对位置保持不变的移动的能力
 * @name baidu.dom.fixable
 * @function
 * @grammar baidu.dom.fixable(element, options)
 * @param {HTMLElement|String} element 目标元素或目标元素的id
 * @param {Object} options 配置项
 * @config {String} [vertival] 取值[top|bottom] 默认值 top
 * @config {Strgin} [horizontal] 取值[left|right] 默认值 left
 * @config {Object} [offset] {x:String|Number, y:String|Number}} 横向与纵向的取值
 * @config {Boolean} [autofix] 是否自动进行fix，默认值为true
 * @config {Function} [onrender] 当被渲染时候触发
 * @config {Function} [onupdate] 当位置被更新的时候触发
 * @config {Function} [onrelease] 当被释放的时候触发
 * @returns {Object} 返回值一个对象，有三个方法：render、update、release
 */

baidu.dom.fixable = function(element, options){

    var target  = baidu.g(element),
        isUnderIE7 = baidu.browser.ie && baidu.browser.ie <= 7 ? true : false,
        vertival = options.vertival || 'top',
        horizontal = options.horizontal || 'left',
        autofix = typeof options.autofix != 'undefined' ? options.autofix : true,
        origPos,offset,isRender = false,
        onrender = options.onrender || new Function(),
        onupdate = options.onupdate || new Function(),
        onrelease = options.onrelease || new Function();

    if(!target) return;

    //获取target原始值
    origPos = _getOriginalStyle();
    //设置offset值
    offset = {
        y: isUnderIE7 ? (origPos.position == "static" ? baidu.dom.getPosition(target).top :  baidu.dom.getPosition(target).top - baidu.dom.getPosition(target.parentNode).top) : target.offsetTop,
        x: isUnderIE7 ? (origPos.position == "static" ? baidu.dom.getPosition(target).left :  baidu.dom.getPosition(target).left - baidu.dom.getPosition(target.parentNode).left) : target.offsetLeft
    };
    baidu.extend(offset, options.offset || {});

    autofix && render();

    function _convert(){
        return {
            top : vertival == "top" ? offset.y : baidu.page.getViewHeight() - offset.y - origPos.height,
            left: horizontal == "left" ? offset.x : baidu.page.getViewWidth() - offset.x - origPos.width
        };
    }

    /**
     *
     */
    function _handleOnMove(){
        var p = _convert();

        target.style.setExpression("left","eval((document.body.scrollLeft || document.documentElement.scrollLeft) + " + p.left + ") + 'px'");
        target.style.setExpression("top", "eval((document.body.scrollTop || document.documentElement.scrollTop) + " + p.top + ") + 'px'");
    }

    /**
     * 返回target原始position值
     * @return {Object}
     */
    function _getOriginalStyle(){
        var result = {
            position: baidu.getStyle(target,"position"),
            height: function(){
                var h = baidu.getStyle(target,"height");
                return (h != "auto") ? (/\d+/.exec(h)[0]) : target.offsetHeight;
            }(),
            width: function(){
                var w = baidu.getStyle(target,"width");
                return (w != "auto") ? (/\d+/.exec(w)[0]) : target.offsetWidth;
            }()
        };

        _getValue('top', result);
        _getValue('left', result);
        _getValue('bottom', result);
        _getValue('right', result);

        return result;
    }

    function _getValue(position, options){
        var result;

        if(options.position == 'static'){
            options[position] = '';
        }else{
            result = baidu.getStyle(target, position);
            if(result == 'auto' || result == '0px' ){
                options[position] = '';
            }else{
                options[position] = result;
            }
        }
    }

    function render(){
        if(isRender) return;

        baidu.setStyles(target, {top:'', left:'', bottom:'', right:''});

        if(!isUnderIE7){
            var style = {position:"fixed"};
            style[vertival == "top" ? "top" : "bottom"] = offset.y + "px";
            style[horizontal == "left" ? "left" : "right"] = offset.x + "px";

            baidu.setStyles(target, style);
        }else{
            baidu.setStyle(target,"position","absolute");
            _handleOnMove();
        }

        onrender();
        isRender = true;
    }

    function release(){
        if(!isRender) return;

        var style = {
            position: origPos.position,
            left: origPos.left == '' ? 'auto' : origPos.left,
            top: origPos.top == '' ? 'auto' : origPos.top,
            bottom: origPos.bottom == '' ? 'auto' : origPos.bottom,
            right: origPos.right == '' ?  'auto' : origPos.right
        };

        if(isUnderIE7){
            target.style.removeExpression("left");
            target.style.removeExpression("top");
        }
        baidu.setStyles(target, style);

        onrelease();
        isRender = false;
    }

    function update(options){
        if(!options) return;

        //更新事件
        onrender = options.onrender || onrender;
        onupdate = options.onupdate || onupdate;
        onrelease = options.onrelease || onrelease;

        //更新设置
        vertival = options.vertival || 'top';
        horizontal = options.horizontal || 'left';

        //更新offset
        baidu.extend(offset, options.offset || {});

        onupdate();
    }

    return {render: render, update: update, release:release};
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/getAncestorBy.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */



/**
 * 获取目标元素符合条件的最近的祖先元素
 * @name baidu.dom.getAncestorBy
 * @function
 * @grammar baidu.dom.getAncestorBy(element, method)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {Function} method 判断祖先元素条件的函数，function (element)
 * @see baidu.dom.getAncestorByTag,baidu.dom.getAncestorByClass
 *
 * @returns {HTMLElement|null} 符合条件的最近的祖先元素，查找不到时返回null
 */
baidu.dom.getAncestorBy = function (element, method) {
    element = baidu.dom.g(element);

    while ((element = element.parentNode) && element.nodeType == 1) {
        if (method(element)) {
            return element;
        }
    }

    return null;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/getAncestorByClass.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */




/**
 * 获取目标元素指定元素className最近的祖先元素
 * @name baidu.dom.getAncestorByClass
 * @function
 * @grammar baidu.dom.getAncestorByClass(element, className)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {string} className 祖先元素的class，只支持单个class
 * @remark 使用者应保证提供的className合法性，不应包含不合法字符，className合法字符参考：http://www.w3.org/TR/CSS2/syndata.html。
 * @see baidu.dom.getAncestorBy,baidu.dom.getAncestorByTag
 *
 * @returns {HTMLElement|null} 指定元素className最近的祖先元素，查找不到时返回null
 */
baidu.dom.getAncestorByClass = function (element, className) {
    element = baidu.dom.g(element);
    className = new RegExp("(^|\\s)" + baidu.string.trim(className) + "(\\s|\x24)");

    while ((element = element.parentNode) && element.nodeType == 1) {
        if (className.test(element.className)) {
            return element;
        }
    }

    return null;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/getAncestorByTag.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */



/**
 * 获取目标元素指定标签的最近的祖先元素
 * @name baidu.dom.getAncestorByTag
 * @function
 * @grammar baidu.dom.getAncestorByTag(element, tagName)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {string} tagName 祖先元素的标签名
 * @see baidu.dom.getAncestorBy,baidu.dom.getAncestorByClass
 *
 * @returns {HTMLElement|null} 指定标签的最近的祖先元素，查找不到时返回null
 */
baidu.dom.getAncestorByTag = function (element, tagName) {
    element = baidu.dom.g(element);
    tagName = tagName.toUpperCase();

    while ((element = element.parentNode) && element.nodeType == 1) {
        if (element.tagName == tagName) {
            return element;
        }
    }

    return null;
};

/*
 * Tangram
 * Copyright 2009 Baidu Inc. All right reserved.
 * 
 * path: baidu/dom/getParent.js
 * author: berg
 * version: 1.0.0
 * date: 2010/12/02
 */



/**
 * 获得元素的父节点
 * @name baidu.dom.getParent
 * @function
 * @grammar baidu.dom.getParent(element)
 * @param {HTMLElement|string} element   目标元素或目标元素的id
 * @returns {HTMLElement|null} 父元素，如果找不到父元素，返回null
 */
baidu.dom.getParent = function (element) {
    element = baidu.dom._g(element);
    //parentElement在IE下准确，parentNode在ie下可能不准确
    return element.parentElement || element.parentNode || null;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/getText.js
 * author: berg
 * version: 1.0
 * date: 2010/07/16 
 */



/**
 * 获得元素中的文本内容。
 * @name baidu.dom.getText
 * @function
 * @grammar baidu.dom.getText(element)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @version 1.3
 *
 * @returns {String} 元素中文本的内容
 */
baidu.dom.getText = function (element) {
    var ret = "", childs, i=0, l;

    element = baidu._g(element);

    //  text 和 CDATA 节点，取nodeValue
    if ( element.nodeType === 3 || element.nodeType === 4 ) {
        ret += element.nodeValue;
    } else if ( element.nodeType !== 8 ) {// 8 是 comment Node
        childs = element.childNodes;
        for(l = childs.length; i < l; i++){
            ret += baidu.dom.getText(childs[i]);
        }
    }

    return ret;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/getWindow.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */




/**
 * 获取目标元素所属的window对象
 * @name baidu.dom.getWindow
 * @function
 * @grammar baidu.dom.getWindow(element)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @see baidu.dom.getDocument
 *
 * @returns {window} 目标元素所属的window对象
 */
baidu.dom.getWindow = function (element) {
    element = baidu.dom.g(element);
    var doc = baidu.dom.getDocument(element);

    // 没有考虑版本低于safari2的情况
    // @see goog/dom/dom.js#goog.dom.DomHelper.prototype.getWindow
    return doc.parentWindow || doc.defaultView || null;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/hasAttr.js
 * author: berg
 * version: 1.0
 * date: 2010/07/16 
 */



/**
 * 查询一个元素是否包含指定的属性
 * @name baidu.dom.hasAttr
 * @function
 * @grammar baidu.dom.hasAttr(element, name)
 * @param {DOMElement|string} element DOM元素或元素的id
 * @param {string} name 要查找的属性名
 * @version 1.3
 *
 * @returns {Boolean} 是否包含此属性
 */

baidu.dom.hasAttr = function (element, name){
    element = baidu.g(element);
    var attr = element.attributes.getNamedItem(name);
    return !!( attr && attr.specified );
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/hasClass.js
 * author: berg
 * version: 1.0
 * date: 2010-07-06
 */






/**
 * 判断元素是否拥有指定的className
 * @name baidu.dom.hasClass
 * @function
 * @grammar baidu.dom.hasClass(element, className)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {string} className 要判断的className，可以是用空格拼接的多个className
 * @version 1.2
 * @remark
 * 对于参数className，支持空格分隔的多个className
 * @see baidu.dom.addClass, baidu.dom.removeClass
 * @meta standard
 * @returns {Boolean} 是否拥有指定的className，如果要查询的classname有一个或多个不在元素的className中，返回false
 */
baidu.dom.hasClass = function (element, className) {
    element = baidu.dom.g(element);
    var classArray = baidu.string.trim(className).split(/\s+/),
        len = classArray.length;

    className = element.className.split(/\s+/).join(" ");

    while (len--) {
        if(!(new RegExp("(^| )" + classArray[len] + "( |\x24)")).test(className)){
            return false;
        }
    }
    return true;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/hide.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/17
 */



/**
 * 隐藏目标元素
 * @name baidu.dom.hide
 * @function
 * @grammar baidu.dom.hide(element)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @shortcut hide
 * @meta standard
 * @see baidu.dom.show,baidu.dom.toggle
 *
 * @returns {HTMLElement} 目标元素
 */
baidu.dom.hide = function (element) {
    element = baidu.dom.g(element);
    element.style.display = "none";

    return element;
};

// 声明快捷方法
baidu.hide = baidu.dom.hide;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/insertAfter.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */



/**
 * 将目标元素添加到基准元素之后
 * @name baidu.dom.insertAfter
 * @function
 * @grammar baidu.dom.insertAfter(newElement, existElement)
 * @param {HTMLElement|string} newElement 被添加的目标元素
 * @param {HTMLElement|string} existElement 基准元素
 * @meta standard
 * @see baidu.dom.insertBefore
 *
 * @returns {HTMLElement} 被添加的目标元素
 */
baidu.dom.insertAfter = function (newElement, existElement) {
    var g, existParent;
    g = baidu.dom._g;
    newElement = g(newElement);
    existElement = g(existElement);
    existParent = existElement.parentNode;

    if (existParent) {
        existParent.insertBefore(newElement, existElement.nextSibling);
    }
    return newElement;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/insertBefore.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/11/17
 */



/**
 * 将目标元素添加到基准元素之前
 * @name baidu.dom.insertBefore
 * @function
 * @grammar baidu.dom.insertBefore(newElement, existElement)
 * @param {HTMLElement|string} newElement 被添加的目标元素
 * @param {HTMLElement|string} existElement 基准元素
 * @meta standard
 * @see baidu.dom.insertAfter
 *
 * @returns {HTMLElement} 被添加的目标元素
 */
baidu.dom.insertBefore = function (newElement, existElement) {
    var g, existParent;
    g = baidu.dom._g;
    newElement = g(newElement);
    existElement = g(existElement);
    existParent = existElement.parentNode;

    if (existParent) {
        existParent.insertBefore(newElement, existElement);
    }

    return newElement;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */




/**
 * 在目标元素的指定位置插入HTML代码
 * @name baidu.dom.insertHTML
 * @function
 * @grammar baidu.dom.insertHTML(element, position, html)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {string} position 插入html的位置信息，取值为beforeBegin,afterBegin,beforeEnd,afterEnd
 * @param {string} html 要插入的html
 * @remark
 *
 * 对于position参数，大小写不敏感<br>
 * 参数的意思：beforeBegin&lt;span&gt;afterBegin   this is span! beforeEnd&lt;/span&gt; afterEnd <br />
 * 此外，如果使用本函数插入带有script标签的HTML字符串，script标签对应的脚本将不会被执行。
 *
 * @shortcut insertHTML
 * @meta standard
 *
 * @returns {HTMLElement} 目标元素
 */
baidu.dom.insertHTML = function (element, position, html) {
    element = baidu.dom.g(element);
    var range,begin;

    //在opera中insertAdjacentHTML方法实现不标准，如果DOMNodeInserted方法被监听则无法一次插入多element
    //by lixiaopeng @ 2011-8-19
    if (element.insertAdjacentHTML && !baidu.browser.opera) {
        element.insertAdjacentHTML(position, html);
    } else {
        // 这里不做"undefined" != typeof(HTMLElement) && !window.opera判断，其它浏览器将出错？！
        // 但是其实做了判断，其它浏览器下等于这个函数就不能执行了
        range = element.ownerDocument.createRange();
        // FF下range的位置设置错误可能导致创建出来的fragment在插入dom树之后html结构乱掉
        // 改用range.insertNode来插入html, by wenyuxiang @ 2010-12-14.
        position = position.toUpperCase();
        if (position == 'AFTERBEGIN' || position == 'BEFOREEND') {
            range.selectNodeContents(element);
            range.collapse(position == 'AFTERBEGIN');
        } else {
            begin = position == 'BEFOREBEGIN';
            range[begin ? 'setStartBefore' : 'setEndAfter'](element);
            range.collapse(begin);
        }
        range.insertNode(range.createContextualFragment(html));
    }
    return element;
};

baidu.insertHTML = baidu.dom.insertHTML;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/last.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/18
 */



/**
 * 获取目标元素的最后一个元素节点
 * @name baidu.dom.last
 * @function
 * @grammar baidu.dom.last(element)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @see baidu.dom.first,baidu.dom.prev,baidu.dom.next
 *
 * @returns {HTMLElement|null} 目标元素的最后一个元素节点，查找不到时返回null
 */
baidu.dom.last = function (element) {
    return baidu.dom._matchNode(element, 'previousSibling', 'lastChild');
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/next.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/18
 */



/**
 * 获取目标元素的下一个兄弟元素节点
 * @name baidu.dom.next
 * @function
 * @grammar baidu.dom.next(element)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @see baidu.dom.first,baidu.dom.last,baidu.dom.prev
 * @meta standard
 * @returns {HTMLElement|null} 目标元素的下一个兄弟元素节点，查找不到时返回null
 */
baidu.dom.next = function (element) {
    return baidu.dom._matchNode(element, 'nextSibling', 'nextSibling');
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/prev.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/18
 */



/**
 * 获取目标元素的上一个兄弟元素节点
 * @name baidu.dom.prev
 * @function
 * @grammar baidu.dom.prev(element)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @see baidu.dom.first,baidu.dom.last,baidu.dom.next
 *
 *
 * @returns {HTMLElement|null} 目标元素的上一个兄弟元素节点，查找不到时返回null
 */
baidu.dom.prev = function (element) {
    return baidu.dom._matchNode(element, 'previousSibling', 'previousSibling');
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string/escapeReg.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */



/**
 * 将目标字符串中可能会影响正则表达式构造的字符串进行转义。
 * @name baidu.string.escapeReg
 * @function
 * @grammar baidu.string.escapeReg(source)
 * @param {string} source 目标字符串
 * @remark
 * 给以下字符前加上“\”进行转义：.*+?^=!:${}()|[]/\
 * @meta standard
 *
 * @returns {string} 转义后的字符串
 */
baidu.string.escapeReg = function (source) {
    return String(source)
        .replace(new RegExp("([.*+?^=!:\x24{}()|[\\]\/\\\\])", "g"), '\\\x241');
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/q.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */





/**
 * 通过className获取元素
 * @name baidu.dom.q
 * @function
 * @grammar baidu.dom.q(className[, element, tagName])
 * @param {string} className 元素的class，只能指定单一的class，如果为空字符串或者纯空白的字符串，返回空数组。
 * @param {string|HTMLElement} [element] 开始搜索的元素，默认是document。
 * @param {string} [tagName] 要获取元素的标签名，如果没有值或者值为空字符串或者纯空白的字符串，表示不限制标签名。
 * @remark 不保证返回数组中DOM节点的顺序和文档中DOM节点的顺序一致。
 * @shortcut q,T.Q
 * @meta standard
 * @see baidu.dom.g
 *
 * @returns {Array} 获取的元素集合，查找不到或className参数错误时返回空数组.
 */
baidu.dom.q = function (className, element, tagName) {
    var result = [],
        trim = baidu.string.trim,
        len, i, elements, node;

    if (!(className = trim(className))) {
        return result;
    }

    // 初始化element参数
    if ('undefined' == typeof element) {
        element = document;
    } else {
        element = baidu.dom.g(element);
        if (!element) {
            return result;
        }
    }

    // 初始化tagName参数
    tagName && (tagName = trim(tagName).toUpperCase());

    // 查询元素
    if (element.getElementsByClassName) {
        elements = element.getElementsByClassName(className);
        len = elements.length;
        for (i = 0; i < len; i++) {
            node = elements[i];
            if (tagName && node.tagName != tagName) {
                continue;
            }
            result[result.length] = node;
        }
    } else {
        className = new RegExp(
            "(^|\\s)"
                + baidu.string.escapeReg(className)
                + "(\\s|\x24)");
        elements = tagName
            ? element.getElementsByTagName(tagName)
            : (element.all || element.getElementsByTagName("*"));
        len = elements.length;
        for (i = 0; i < len; i++) {
            node = elements[i];
            className.test(node.className) && (result[result.length] = node);
        }
    }

    return result;
};

// 声明快捷方法
baidu.q = baidu.Q = baidu.dom.q;
/*
 * Tangram query
 *
 * code from https://github.com/hackwaly/Q
 * 
 * version: 1.0.0
 * date: 20110801
 * author: wenyuxiang
 */




/**
 * 提供css选择器功能
 * @name baidu.dom.query
 * @function
 * @grammar baidu.dom.query(selector[, context, results])
 * @param {String} selector 选择器定义
 * @param {HTMLElement | DOMDocument} [context] 查找的上下文
 * @param {Array} [results] 查找的结果会追加到这个数组中
 * @version 1.2
 * @remark
 *
 选择器支持所有的<a href="http://www.w3.org/TR/css3-selectors/">css3选择器</a> ，核心实现采用sizzle。可参考<a href="http://wiki.github.com/jeresig/sizzle/" target="_blank">sizzle 文档</a>

 * @see baidu.dom.g, baidu.dom.q, baidu.dom.query.matches
 *
 * @returns {Array}        包含所有筛选出的DOM元素的数组
 */

baidu.dom.query = (function (){
    var d = document;
    d._Q_rev = 0;

    var MUTATION = false;
    var _onMu = function (){
        d._Q_rev ++;
        MUTATION = true;
    };
    if (d.addEventListener) {
        d.addEventListener('DOMNodeInserted', _onMu, false);
        d.addEventListener('DOMNodeRemoved', _onMu, false);
    }

    var BY_ID1;
    var BY_CLASS;
    var IE678 = window.ActiveXObject && !d.addEventListener;
    (function (){
        var div = d.createElement('div');
        div.innerHTML = '<a name="d"></a><div id="d"></div>';
        BY_ID1 = div.getElementsByTagName('*')["d"] === div.lastChild;
        div.innerHTML = '<div class="t e"></div><div class="t"></div>';
        div.lastChild.className = 'e';
        BY_CLASS = div.getElementsByClassName && div.getElementsByClassName('e').length == 2;
    })();
    var BY_NAME = !!d.getElementsByName;
    var BY_ELEMENT = typeof d.documentElement.nextElementSibling !== 'undefined';
    var BY_CHILDREN = !!d.documentElement.children;
    var BY_CHILDREN_TAG = BY_CHILDREN && !!d.documentElement.children.tags;

    var PATTERN = /(?:\s*([ ~+>,])\s*)?(?:([:.#]?)((?:[\w\u00A1-\uFFFF-]|\\.)+|\*)|\[\s*((?:[\w\u00A1-\uFFFF-]|\\.)+)(?:\s*([~^$|*!]?=)\s*((['"]).*?\7|[^\]]*))?\s*\])/g;

    function trim(str){
        return str.replace(/^\s*|\s*$/, '');
    }
    function make(kind, array){
        return (array.kind = kind, array);
    }
    var parse = function (){
        var text;
        var index;

        function match(regex){
            var mc = (regex.lastIndex = index, regex.exec(text));
            return mc && mc.index == index ? (index = regex.lastIndex, mc) : null;
        }
        function dequote(str){
            var ch = str.charAt(0);
            return ch == '"' || ch == "'" ? str.slice(1, -1) : str;
        }
        function error(){ throw ['ParseError', text, index]; }

        function parse(){
            var mc, simple, seq = [], chain = [seq], group = [chain];
            while (mc = match(PATTERN)) {
                if (mc[1]) {
                    if (mc[1] == ',') group.push(chain = []);
                    if (seq.length) chain.push(seq = []);
                    if (mc[1] != ',') seq.comb = mc[1];
                }
                simple = [mc[4] || mc[3]];
                if (mc[6]) simple.push(dequote(mc[6]));
                simple.kind = mc[5] || (mc[4] ? '[' : mc[2] || 'T');
                if (simple[0] == '*' && simple.kind != 'T') error();
                if (mc[2] == ':') {
                    simple.kind = ':' + mc[3];
                    if (text.charAt(index) == '(') {
                        index ++;
                        if (mc[3] == 'not' || mc[3] == 'has') {
                            var t = index;
                            simple[0] = parse();
                            simple[1] = text.slice(t, index);
                            if (text.charAt(index) == ')') index ++; else error();
                        } else {
                            var tmpIndex = text.indexOf(')', index);
                            if (tmpIndex != -1) {
                                simple[0] = trim(text.slice(index, tmpIndex));
                                index = tmpIndex + 1;
                            } else error();

                            if (mc[3].indexOf('nth') == 0) {
                                var tmp = simple[0];
                                tmp = (tmp == 'even' ? '2n' : tmp == 'odd' ? '2n+1' :
                                    (tmp.indexOf('n') == -1 ? '0n': '') + tmp.replace(/\s*/g, '')).split('n');
                                simple[0] = !tmp[0] ? 1 : Number(tmp[0]) | 0;
                                simple[1] = Number(tmp[1]) | 0;
                            } else if (mc[3] == 'contains') {
                                simple[0] = dequote(simple[0]);
                            }
                        }
                    }
                }
                seq.push(simple);
            }
            return group;
        }

        return function (selector){
            return (text = selector, index = 0, selector = parse(), match(/\s*/g), index < text.length) ? error() : selector;
        };

    }();

    var fRMap = { '#': 9, 'N': BY_NAME ? 7 : 0, '.': BY_CLASS ? 6 : 0, 'T': 5 };
    var tRMap = { '#': 9, '=': 9, '[': 8, 'N': 9, 'T': 8, '.': 5,  '~=': 3, '|=': 3, '*=': 3,
        ':not': 6, ':has': 1, ':contains': 3, ':nth-child': 2, ':nth-last-child': 2,
        ':first-child': 3, ':last-child': 3, ':only-child': 3, ':not-ex': 7 };
    var efMap = { id: '#', name: 'N' };
    var testingOrder = function (a, b){ return a.tR - b.tR; };
    var regPos = /:(nth|eq|gt|lt|first|last|even|odd)$/;

    function process(seq){
        var finder, t;
        var k = seq.length;
        while (k --) {
            var simple = seq[k];
            // 转化[id="xxx"][name="xxx"][tagName="xxx"][className~="xxx"]之类的选择器
            // 识别:root,html|head|body|title等全局仅一个的标签的选择器，忽略*选择器
            // 合并类选择器以便于使用getElementsByClassName
            if (simple.kind == ':html') simple = make('T', 'html');
            if (simple.kind == '=') {
                if (efMap[simple[0]]) simple = make(efMap[simple[0]], [simple[1]]);
            } else if (simple.kind == '~=' && simple[0] == 'className') simple = make('.', [simple[1]]);
            if (simple.kind == 'T') {
                if (simple[0] == '*') simple.kind = '*'; else seq.tag = simple;
                t = simple[0].toLowerCase();
            } else if (simple.kind == '.') {
                if (!seq.classes) seq.classes = simple; else {
                    seq.classes.push(simple[0]);
                    simple.kind = '*';
                }
            }
            if (simple.kind == ':not' && !((t=simple[0],t.length==1)&&(t=t[0],t.length==1))) {
                simple.kind = ':not-ex';
            }
            //remark: 这里是为了支持sizzle的setFilter系列
            if (regPos.test(simple.kind)) {
                simple[0] = Number(simple[0]) | 0;
                var newSimple = make(simple.kind, simple.slice(0));
                simple.kind = '*';
                if (!seq.allPoses) {
                    seq.allPoses = [newSimple];
                } else {
                    seq.allPoses.push(newSimple);
                }
            }
            // 计算选择器的得分用于优先级排序等策略
            simple.fR = fRMap[simple.kind] | 0;
            simple.tR = tRMap[simple.kind] | 0;
            if (simple.fR && (!finder || simple.fR > finder.fR)) finder = simple;
            seq[k] = simple;
        }
        // 按照优先级对用于测试的选择器进行排序
        seq.sort(testingOrder);
        // 记录用于getElementXXX的最佳的选择器
        seq.$ = finder;
        return seq;
    }
    // 对chain进行处理
    // 注意为了处理方便, 返回的数组是倒序的
    // div p a => [div] [p] [a]
    // div p>a => [div] [p>a]
    function slice(chain){
        var part = [];
        var parts = [part];
        var k = chain.length;
        while (k --) {
            var seq = chain[k];
            seq = process(seq);
            seq.N = 'node' + k;
            //remark: 这里是为了支持sizzle的setFilter.
            if (seq.allPoses) {
                if (!chain.allPoses) {
                    chain.allPoses = [];
                }
                chain.allPoses.push.apply(chain.allPoses, seq.allPoses);
            }
            if (seq.$ && (!part.fR || seq.$.fR > part.fR || (seq.$.fR == part.fR && parts.length == 1))) {
                part.fR = seq.$.fR;
                part.fI = part.length;
            }
            part.push(seq);
            if (seq.comb == ' ' && k && part.fI != null) {
                parts.push(part = []);
                part.fR = 0;
            }
            if (k == chain.length - 1 && seq.tag) chain.tag = seq.tag;
        }
        for (var i=0; i<parts.length; i++) {
            part = parts[i];
            var part1 = parts[i + 1];
            if (part1 != null) {
                if (part.fR > part1.fR || (part.fR == part1.fR && part1.fI != 0)){
                    parts.splice(i + 1, 1);
                    part.push.apply(part, part1);
                    i --;
                } else {
                    part.R = part1[0].N;
                }
            } else {
                part.R = 'root';
            }
        }
        // 如果没有找到任何一个可以用于find的seq.
        if (parts[0].fI == null) {
            parts[0].fI = 0;
            parts[0][0].$ = make('*', ['*']);
        }
        return parts;
    }

    function format(tpl, params){
        return tpl.replace(/#\{([^}]+)\}/g, function (m, p){
            return params[p] == null ? m : params[p] + '';
        });
    }

    var CTX_NGEN = 0;

    var TPL_DOC = '/*^var doc=root.ownerDocument||root;^*/';
    var TPL_XHTML = TPL_DOC + '/*^var xhtml=Q._isXHTML(doc);^*/';
    var TPL_CONTAINS = IE678 ? '#{0}.contains(#{1})' : '#{0}.compareDocumentPosition(#{1})&16';
    var TPL_QID = '#{N}._Q_id||(#{N}._Q_id=++qid)';
    var TPL_FIND = {
        '#': 'var #{N}=Q._byId("#{P}", #{R});if(#{N}){#{X}}',
        'N': TPL_DOC + 'var #{N}A=doc.getElementsByName("#{P}");for(var #{N}I=0,#{N};#{N}=#{N}A[#{N}I];#{N}I++){if(#{R}===doc||' + format(TPL_CONTAINS, ['#{R}', '#{N}']) +'){#{X}}}',
        'T': 'var #{N}A=#{R}.getElementsByTagName("#{P}");for(var #{N}I=0,#{N};#{N}=#{N}A[#{N}I];#{N}I++){#{X}}',
        '.': 'var #{N}A=#{R}.getElementsByClassName("#{P}");for(var #{N}I=0,#{N};#{N}=#{N}A[#{N}I];#{N}I++){#{X}}',
        '*': 'var #{N}A=#{R}.getElementsByTagName("*");for(var #{N}I=0,#{N};#{N}=#{N}A[#{N}I];#{N}I++){#{X}}',
        '+': BY_ELEMENT ? '/*^var #{N};^*/if(#{N}=#{R}.nextElementSibling){#{X}}' : 'var #{N}=#{R};while(#{N}=#{N}.nextSibling){if(#{N}.nodeType==1){#{X}break;}}',
        '~': BY_ELEMENT ? '/*^var #{N}H={};^*/var #{N}=#{R};while(#{N}=#{N}.nextElementSibling){if(#{N}H[' + TPL_QID + '])break;#{N}H[' + TPL_QID + ']=1;#{X}}' : '/*^var #{N}H={};^*/var #{N}=#{R};while(#{N}=#{N}.nextSibling){if(#{N}.nodeType==1){if(#{N}H[' + TPL_QID + '])break;#{N}H[' + TPL_QID + ']=1;#{X}}}',
        '>': 'var #{N}A=#{R}.children||#{R}.childNodes;for(var #{N}I=0,#{N};#{N}=#{N}A[#{N}I];#{N}I++){if(#{N}.nodeType==1){#{X}}}',
        '>T': 'var #{N}A=#{R}.children.tags("#{P}");for(var #{N}I=0,#{N};#{N}=#{N}A[#{N}I];#{N}I++){#{X}}'
    };
    var TPL_LEFT = 'var #{R}V={_:false};NP_#{R}:{P_#{R}:{#{X}break NP_#{R};}#{R}V._=true;#{Y}}';
    var TPL_TOPASS = 'if(t=#{N}H[' + TPL_QID + ']){if(t._){break P_#{R};}else{break NP_#{R};}}#{N}H[' + TPL_QID + ']=#{R}V;#{X}';
    var TPL_TOPASS_UP = format(TPL_TOPASS, { X: 'if(#{N}!==#{R}){#{X}}' });
    var TPL_PASSED = 'break P_#{R};';
    var TPL_PASS = {
        '>': '/*^var #{N}H={};^*/var #{N}=#{C}.parentNode;' + TPL_TOPASS_UP,
        ' ': '/*^var #{N}H={};^*/var #{N}=#{C};while(#{N}=#{N}.parentNode){' + TPL_TOPASS_UP + '}',
        '+': BY_ELEMENT ? '/*^var #{N}H={};var #{N};^*/if(#{N}=#{C}.previousElementSibling){#{X}}' : '/*^var #{N}H={};^*/var #{N}=#{C};while(#{N}=#{N}.previousSibling){#{X}break;}',
        '~': BY_ELEMENT ? '/*^var #{N}H={};^*/var #{N}=#{C};while(#{N}=#{N}.previousElementSibling){' + TPL_TOPASS + '}' : '/*^var #{N}H={};^*/var #{N}=#{C};while(#{N}=#{N}.previousSibling){' + TPL_TOPASS + '}'
    };
    var TPL_MAIN = 'function(root){var result=[];var qid=Q.qid,t,l=result.length;BQ:{#{X}}Q.qid=qid;return result;}';
    var TPL_HELP = '/*^var #{N}L;^*/if(!#{N}L||!(' + format(TPL_CONTAINS, ['#{N}L', '#{N}']) +')){#{X}#{N}L=#{N};}';
    var TPL_PUSH = 'result[l++]=#{N};';
    var TPL_INPUT_T = TPL_XHTML + '/*^var input_t=!xhtml?"INPUT":"input";^*/';
    var TPL_POS = '/*^var pos=-1;^*/';
    var TPL_TEST = {
        'T': TPL_XHTML +'/*^var #{N}T=!xhtml?("#{0}").toUpperCase():"#{0}";^*/#{N}.nodeName==#{N}T',
        '#': '#{N}.id=="#{0}"',
        'N': '#{N}.name=="#{0}"',

        '[': IE678 ? '(t=#{N}.getAttributeNode("#{0}"))&&(t.specified)' : '#{N}.hasAttribute("#{0}")',
        '=': '#{A}=="#{1}"',
        '!=': '#{A}!="#{1}"',
        '^=': '(t=#{A})&&t.slice(0,#{L})=="#{1}"',
        '$=': '(t=#{A})&&t.slice(-#{L})=="#{1}"',
        '*=': '(t=#{A})&&t.indexOf("#{1}")!==-1',
        '|=': '(t=#{A})&&(t=="#{1}"||t.slice(0,#{L})=="#{P}")',
        '~=': '(t=#{A})&&(" "+t+" ").indexOf("#{P}")!==-1',

        ':element': '#{N}.nodeType==1',
        ':contains': '(#{N}.textContent||#{N}.innerText).indexOf("#{0}")!==-1',
        ':first-child': BY_ELEMENT ? '#{N}.parentNode.firstElementChild===#{N}' : 'Q._isFirstChild(#{N})',
        ':nth-child': TPL_DOC + '/*^var rev=doc._Q_rev||(doc._Q_rev=Q.qid++);^*/Q._index(#{N},#{0},#{1},rev)',
        ':last-child': BY_ELEMENT ? '#{N}.parentNode.lastElementChild===#{N}' : 'Q._isLastChild(#{N})',
        ':only-child': BY_ELEMENT ? '(t=#{N}.parentNode)&&(t.firstElementChild===#{N}&&t.lastElementChild===#{N})' : 'Q._isOnlyChild(#{N})',

        ':not-ex': '/*^var _#{G}=Q._hash(Q("#{1}",root));qid=Q.qid;^*/!_#{G}[' + TPL_QID + ']',
        ':has': '(t=Q("#{1}", #{N}),qid=Q.qid,t.length>0)',
        ':parent': '!!#{N}.firstChild',
        ':empty': '!#{N}.firstChild',

        ':header': '/h\\d/i.test(#{N}.nodeName)',
        ':input': '/input|select|textarea|button/i.test(#{N}.nodeName)',
        ':enabled': '#{N}.disabled===false&&#{N}.type!=="hidden"',
        ':disabled': '#{N}.disabled===true',
        ':checked': '#{N}.checked===true',
        ':selected': '(#{N}.parentNode.selectedIndex,#{N}.selected===true)',

        // TODO: 这些伪类可以转化成为标签选择器加以优化！
        ':focus': TPL_DOC + '#{N}===doc.activeElement',
        ':button': TPL_INPUT_T + '#{N}.nodeName==="button"||(#{N}.nodeName===input_t&&#{N}.type==="button")',
        ':submit': TPL_INPUT_T + '#{N}.nodeName===input_t&&#{N}.type==="submit"',
        ':reset': TPL_INPUT_T + '#{N}.nodeName===input_t&&#{N}.type==="reset"',
        ':text': TPL_INPUT_T + '#{N}.nodeName===input_t&&#{N}.type==="text"&&(t=#{N}.getAttribute("type"),t==="text"||t===null)',
        ':radio': TPL_INPUT_T + '#{N}.nodeName===input_t&&#{N}.type==="radio"',
        ':checkbox': TPL_INPUT_T + '#{N}.nodeName===input_t&&#{N}.type==="checkbox"',
        ':file': TPL_INPUT_T + '#{N}.nodeName===input_t&&#{N}.type==="file"',
        ':password': TPL_INPUT_T + '#{N}.nodeName===input_t&&#{N}.type==="password"',
        ':image': TPL_INPUT_T + '#{N}.nodeName===input_t&&#{N}.type==="image"'
    };

    function genAttrCode(attr){
        if (attr == 'for') return '#{N}.htmlFor';
        if (attr == 'class') return '#{N}.className';
        if (attr == 'type') return '#{N}.getAttribute("type")';
        if (attr == 'href') return '#{N}.getAttribute("href",2)';
        return '(#{N}["' + attr + '"]||#{N}.getAttribute("' + attr + '"))';
    }

    function genTestCode(simple){
        if (simple.kind.indexOf('=') !== -1) {
            simple.A = genAttrCode(simple[0]);
        }
        var t;
        switch (simple.kind) {
            case '.':
                var k = simple.length;
                var buff = [];
                while (k --) {
                    buff.push('t.indexOf(" #{'+ k +'} ")!==-1');
                }
                return format('(t=#{N}.className)&&((t=" "+t+" "),(' + buff.join(' && ') + '))', simple);
            case '^=':
            case '$=':
                simple.L = simple[1].length;
                break;
            case '|=':
                simple.L = simple[1].length + 1;
                simple.P = simple[1] + '-';
                break;
            case '~=':
                simple.P = ' ' + simple[1] + ' ';
                break;
            case ':nth-child':
//        case ':nth-last-child':
                if (simple[0] == 1 && simple[1] == 0) return '';
                break;
            case ':not':
                t = genCondCode(simple[0][0][0]);
                return t ? '!(' + t + ')' : 'false';
            case ':not-ex':
            case ':has':
                simple.G = CTX_NGEN ++;
                break;
            case '*':
                return '';
        }
        return format(TPL_TEST[simple.kind], simple);
    }
    function genCondCode(seq){
        var buff = [];
        var k = seq.length;
        var code;
        while (k --) {
            var simple = seq[k];
            if (code = genTestCode(simple)) {
                buff.push(code);
            }
        }
        return buff.join(' && ');
    }
    function genThenCode(seq){
        var code = genCondCode(seq);
        return code ? format('if('+code+'){#{X}}', { N: seq.N }) : '#{X}';
    }
    var NEEDNOT_ELEMENT_CHECK = { '#': 1, 'T': 1, '.': 1, 'N': 1, ':element': 1 };
    function genFindCode(seq, R, comb){
        comb = comb || seq.comb;
        var tpl;
        if (comb == ' ') {
            var finder = seq.$;
            if (finder) {
                tpl = TPL_FIND[finder.kind];
                // 有hack的嫌疑, 让产生test代码时忽略已经用于find的seq.
                finder.kind = '*';
            } else {
                tpl = TPL_FIND['*'];
                if (IE678 && !NEEDNOT_ELEMENT_CHECK[seq[seq.length - 1].kind]) {
                    seq.push(make(':element', []));
                }
            }
        } else if (BY_CHILDREN_TAG && comb == '>' && seq.tag) {
            tpl = TPL_FIND['>T'];
            finder = seq.tag;
            seq.tag.kind = '*';
        } else {
//            if (!BY_ELEMENT && (comb == '+' || comb == '~') && !NEEDNOT_ELEMENT_CHECK[seq[seq.length - 1].kind]) {
//                seq.push(make(':element', []));
//            }
            tpl = TPL_FIND[comb];
        }
        return format(tpl, {
            P: finder && (finder.kind == '.' ? finder.join(' ') : finder[0]),
            N: seq.N,
            R: R,
            X: genThenCode(seq)
        });
    }
    function genNextCode(part, thenCode){
        var code = '#{X}';
        var k = part.fI;
        while (k --) {
            code = format(code, { X: genFindCode(part[k], part[k+1].N) });
        }
        var nextCode;
        if (!thenCode) {
            if (part.fI == 0 && (k = part[0].$.kind) && (k != 'S' && k != '#')) {
                nextCode = format(TPL_HELP, { N: part[0].N });
                code = format(code, { X: nextCode })
            }
        } else {
            nextCode = format(thenCode, { N: part[0].N });
            code = format(code, { X: nextCode });
        }
        return code;
    }
    function genPassCode(seq, C, comb){
        return format(TPL_PASS[comb], {
            N: seq.N,
            C: C,
            X: genThenCode(seq)
        });
    }
    function genLeftCode(part){
        var code = TPL_LEFT;
        for (var i=part.fI+1,l=part.length; i<l; i++) {
            var seq = part[i];
            var lastSeq = part[i-1];
            code = format(code, { X: genPassCode(seq, lastSeq.N, part[i-1].comb) });
        }
        code = format(code, { X: TPL_PASSED });
        code = format(code, { R: part.R });
        return code;
    }
    function genPartCode(part, thenCode){
        var code = genFindCode(part[part.fI], part.R, ' ');
        var nextCode = genNextCode(part, thenCode);
        if (part.fI < part.length - 1) {
            var passCode = genLeftCode(part);
            nextCode = format(passCode, { Y: nextCode });
        }
        return format(code, { X: nextCode });
    }

    function genThatCode(seq){
        var obj = {};
        var k = seq.length;
        while (k --) {
            var simple = seq[k];
            if (simple.kind == ':first') {
                simple = make(':nth', [0]);
            } else if (simple.kind == ':last') {
                obj.last = 1;
            }
            if (simple.kind == ':lt') {
                obj.lt = obj.lt === undefined ? simple[0] : Math.min(obj.lt, simple[0]);
            } else if (simple.kind == ':gt') {
                obj.gt = obj.gt === undefined ? simple[0] : Math.max(obj.gt, simple[0]);
            } else if (simple.kind == ':eq' || simple.kind == ':nth') {
                if (obj.eq && obj.eq !== simple[0]) {
                    obj.no = true;
                } else obj.eq = simple[0];
            } else if (simple.kind == ':even' || simple.kind == ':odd') {
                obj[simple.kind.slice(1)] = 1;
            }
        }
        if ((obj.lt != null && obj.eq != null && obj.eq >= obj.lt) || (obj.lt != null && obj.gt != null && obj.lt <= obj.gt) || (obj.even && obj.odd)) {
            obj.no = 1;
        }

        if (obj.no) {
            return '/*^break BQ;^*/';
        }
        var buff = [];
        if (obj.even) {
            buff.push('pos%2===0');
        } else if (obj.odd) {
            buff.push('pos%2===1');
        }
        var code = obj.eq == null ? TPL_PUSH : 'if(pos===' + obj.eq + '){result=[#{N}];break BQ;}';
        if (obj.gt != null) {
            buff.push('pos>'+obj.gt);
        }
        code = buff.length ? 'if (' + buff.join('&&') + '){' + code + '}' : code;
        code = obj.lt != null ? 'if (pos<' + obj.lt + '){' + code + '}else break BQ;' : code;
        if (obj.last) {
            code += '/*$result=result.slice(-1);$*/';
        }
        return code;
    }
    function genCode(chain){
        var parts = slice(chain);

        var thenCode = chain.allPoses ? TPL_POS + 'pos++;' + genThatCode(chain.allPoses) : TPL_PUSH;
        CTX_NGEN = 0;
        var code = '#{X}';

        var k = parts.length;
        while (k --) {
            var part = parts[k];
            code = format(code, { X: genPartCode(part, k == 0 ? thenCode : false ) });
        }
        return code;
    }

    var documentOrder;
    if (d.documentElement.sourceIndex) {
        documentOrder = function (nodeA, nodeB){ return nodeA === nodeB ? 0 : nodeA.sourceIndex - nodeB.sourceIndex; };
    } else if (d.compareDocumentPosition) {
        documentOrder = function (nodeA, nodeB){ return nodeA === nodeB ? 0 : nodeB.compareDocumentPosition(nodeA) & 0x02 ? -1 : 1; };
    }
    function uniqueSort(nodeSet, notUnique){
        if (!nodeSet.length) return nodeSet;
        nodeSet.sort(documentOrder);
        if (notUnique) return nodeSet;
        var resultSet = [nodeSet[0]];
        var node, j = 0;
        for (var i=1, l=nodeSet.length; i<l; i++) {
            if (resultSet[j] !== (node = nodeSet[i])) {
                resultSet[++ j] = node;
            }
        }
        return resultSet;
    }

    function compile(expr){
        var group = parse(expr);
        var tags = {};
        var k = group.length;
        while (k --) {
            var chain = group[k];
            var code = genCode(chain);
            if (tags && chain.tag && !tags[chain.tag[0]]) {
                tags[chain.tag[0]] = 1;
            } else {
                tags = null;
            }
            var hash = {};
            var pres = [];
            var posts = [];
            code = code.replace(/\/\*\^(.*?)\^\*\//g, function (m, p){
                return (hash[p] || (hash[p] = pres.push(p)), '');
            });
            code = code.replace(/\/\*\$(.*?)\$\*\//g, function (m, p){
                return (hash[p] || (hash[p] = posts.push(p)), '');
            });
            code = format(TPL_MAIN, { X: pres.join('') + code + posts.join('') });
            group[k] = new Function('Q', 'return(' + code + ')')(Q);
        }
        if (group.length == 1) {
            return group[0];
        }
        return function (root){
            var k = group.length;
            var result = [];
            while (k --) {
                result.push.apply(result, group[k](root));
            }
            return uniqueSort(result, tags != null);
        };
    }

    Q._hash = function (result){
        var hash = result._Q_hash;
        if (hash == null) {
            hash = result._Q_hash = {};
            var k = result.length;
            var qid = Q.qid;
            while (k --) {
                var el = result[k];
                hash[el._Q_id||(el._Q_id=++qid)] = 1;
            }
            Q.qid = qid;
        }
        return hash;
    };
    var _slice = Array.prototype.slice;
    Q._toArray1 = function (staticNodeList){
        var k = staticNodeList.length;
        var a = new Array(k);
        while (k --) {
            a[k] = staticNodeList[k];
        }
        return a;
    };
    Q._toArray = function (staticNodeList){
        try {
            return _slice.call(staticNodeList, 0);
        } catch(ex){}
        return (Q._toArray = Q._toArray1)(staticNodeList);
    };

    function queryXML(expr, root){
        throw ['NotImpl'];
    }
    var cache = {};
    var inQuery = false;
    function query(expr, root){
        var doc = root.ownerDocument || root;
        var ret;
        if (!doc.getElementById) {
            return queryXML(expr, root);
        }
        if (root === doc && doc.querySelectorAll && !/#/.test(expr)) {
            try { return Q._toArray(doc.querySelectorAll(expr)); } catch(ex){}
        }
        var fn  = cache[expr] || (cache[expr] = compile(expr));
        if (!inQuery) {
            inQuery = true;
            if (!MUTATION) {
                doc._Q_rev = Q.qid ++;
            }
            ret = fn(root);
            inQuery = false;
        } else {
            ret = fn(root);
        }
        return ret;
    }

    Q.qid = 1;
    Q._byId = function (id, root){
        if (BY_ID1) {
            return root.getElementsByTagName('*')[id];
        }
        var doc = root.ownerDocument || root;
        var node = doc.getElementById(id);
        if (node && ((root === doc) || Q.contains(root, node)) && (!IE678 || (node.id === id || node.getAttributeNode('id').nodeValue === id))) {
            return node;
        }
        return null;
    };
    Q._in = function (nodes, nodeSet){
        var hash = Q._hash(nodeSet);
        var ret = [];
        for (var i=0; i<nodes.length; i++) {
            var node = nodes[i];
            if (hash[node._Q_id||(node._Q_id=++Q.qid)]) {
                ret.push(node);
            }
        }
        return ret;
    };
    Q.matches = function (expr, set){
        return Q(expr, null, null, set);
    };
    Q.contains = d.documentElement.contains ? function (a, b){
        return a !== b && a.contains(b);
    } : function (a, b) {
        return a !== b && a.compareDocumentPosition(b) & 16;
    };
    Q._has = function (node, nodes){
        for (var i=0, tnode; tnode=nodes[i++];) {
            if (!Q.contains(node, tnode)) return false;
        }
        return true;
    };
    Q._index = function (node, a, b, rev){
        var parent = node.parentNode;
        if (parent._Q_magic !== rev) {
            var tnode;
            var count = 1;
            if (BY_ELEMENT) {
                tnode = parent.firstElementChild;
                while (tnode) {
                    tnode._Q_index = count ++;
                    tnode = tnode.nextElementSibling;
                }
            } else {
                var nodes = parent.children || parent.childNodes;
                for (var i=0; tnode=nodes[i]; i++) {
                    if (tnode.nodeType == 1) {
                        tnode._Q_index = count ++;
                    }
                    tnode = tnode.nextSibling;
                }
            }
            parent._Q_count1 = count;
            parent._Q_magic = rev;
        }
        return a ? (node._Q_index - b) % a == 0 : node._Q_index == b;
    };
    Q._isOnlyChild = function (node){
        return Q._isFirstChild(node) && Q._isLastChild(node);
    };
    Q._isFirstChild = function (node){
        while (node = node.previousSibling) {
            if (node.nodeType == 1) return false;
        }
        return true;
    };
    Q._isLastChild = function (node){
        while (node = node.nextSibling) {
            if (node.nodeType == 1) return false;
        }
        return true;
    };
    Q._isXHTML = function (doc){
        return doc.documentElement.nodeName == 'html';
    };
    function Q(expr, root, result, seed){
        root = root || d;
        var ret = query(expr, root);
        if (seed) {
            ret = Q._in(seed, ret);
        }
        if (result) {
            ret.push.apply(result, ret);
        } else {
            result = ret;
        }
        return result;
    }
    return Q;
})();
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */






/**
 * 使函数在页面dom节点加载完毕时调用
 * @author allstar
 * @name baidu.dom.ready
 * @function
 * @grammar baidu.dom.ready(callback)
 * @param {Function} callback 页面加载完毕时调用的函数.
 * @remark
 * 如果有条件将js放在页面最底部, 也能达到同样效果，不必使用该方法。
 * @meta standard
 */
(function() {

    var ready = baidu.dom.ready = function() {
        var readyBound = false,
            readyList = [],
            DOMContentLoaded;

        if (document.addEventListener) {
            DOMContentLoaded = function() {
                document.removeEventListener('DOMContentLoaded', DOMContentLoaded, false);
                ready();
            };

        } else if (document.attachEvent) {
            DOMContentLoaded = function() {
                if (document.readyState === 'complete') {
                    document.detachEvent('onreadystatechange', DOMContentLoaded);
                    ready();
                }
            };
        }

        function ready() {
            if (!ready.isReady) {
                ready.isReady = true;
                for (var i = 0, j = readyList.length; i < j; i++) {
                    readyList[i]();
                }
            }
        }

        function doScrollCheck(){
            try {
                document.documentElement.doScroll("left");
            } catch(e) {
                setTimeout( doScrollCheck, 1 );
                return;
            }
            ready();
        }

        function bindReady() {
            if (readyBound) {
                return;
            }
            readyBound = true;

            if (document.addEventListener) {

                document.addEventListener('DOMContentLoaded', DOMContentLoaded, false);
                window.addEventListener('load', ready, false);

            } else if (document.attachEvent) {

                document.attachEvent('onreadystatechange', DOMContentLoaded);
                window.attachEvent('onload', ready);

                var toplevel = false;

                try {
                    toplevel = window.frameElement == null;
                } catch (e) {}

                if (document.documentElement.doScroll && toplevel) {
                    doScrollCheck();
                }
            }
        }
        bindReady();

        return function(callback) {
            ready.isReady ? callback() : readyList.push(callback);
        };
    }();

    ready.isReady = false;
})();
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/remove.js
 * author: allstar,berg
 * version: 1.1.0
 * date: 2009/11/17
 */




/**
 * 从DOM树上移除目标元素
 * @name baidu.dom.remove
 * @function
 * @grammar baidu.dom.remove(element)
 * @param {HTMLElement|string} element 需要移除的元素或元素的id
 * @remark
 * <b>注意：</b>对于移除的dom元素，IE下会释放该元素的空间，继续使用该元素的引用进行操作将会引发不可预料的问题。
 * @meta standard
 */
baidu.dom.remove = function (element) {
    element = baidu.dom._g(element);
    var tmpEl = element.parentNode;
    //去掉了对ie下的特殊处理：创建一个div，appendChild，然后div.innerHTML = ""
    tmpEl && tmpEl.removeChild(element);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/removeClass.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/02
 */




/**
 * 移除目标元素的className
 * @name baidu.dom.removeClass
 * @function
 * @grammar baidu.dom.removeClass(element, className)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {string} className 要移除的className，允许同时移除多个class，中间使用空白符分隔
 * @remark
 * 使用者应保证提供的className合法性，不应包含不合法字符，className合法字符参考：http://www.w3.org/TR/CSS2/syndata.html。
 * @shortcut removeClass
 * @meta standard
 * @see baidu.dom.addClass
 *
 * @returns {HTMLElement} 目标元素
 */
baidu.dom.removeClass = function (element, className) {
    element = baidu.dom.g(element);

    var oldClasses = element.className.split(/\s+/),
        newClasses = className.split(/\s+/),
        lenOld,
        lenDel = newClasses.length,
        j,
        i = 0;
    //考虑到同时删除多个className的应用场景概率较低,故放弃进一步性能优化 
    // by rocy @1.3.4
    for (; i < lenDel; ++i){
        for(j = 0, lenOld = oldClasses.length; j < lenOld; ++j){
            if(oldClasses[j] == newClasses[i]){
                oldClasses.splice(j, 1);
                break;
            }
        }
    }
    element.className = oldClasses.join(' ');
    return element;
};

// 声明快捷方法
baidu.removeClass = baidu.dom.removeClass;
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All rights reserved.
 *
 * path: baidu/dom/removeStyle.js
 * author: wenyuxiang, berg
 * version: 1.0.1
 * date: 2010/9/10
 */




/**
 * 删除元素的某个样式
 * @name baidu.dom.removeStyle
 * @function
 * @grammar baidu.dom.removeStyle(element, styleName)
 * @param {HTMLElement|String} element 需要删除样式的元素或者元素id
 * @param {string} styleName 需要删除的样式名字
 * @version 1.3
 * @see baidu.dom.setStyle
 *
 * @returns {HTMLElement} 目标元素
 */

// todo: 1. 只支持现代浏览器，有一些老浏览器可能不支持; 2. 有部分属性无法被正常移除
baidu.dom.removeStyle = function (){
    var ele = document.createElement("DIV"),
        fn,
        _g = baidu.dom._g;

    if (ele.style.removeProperty) {// W3C, (gecko, opera, webkit)
        fn = function (el, st){
            el = _g(el);
            el.style.removeProperty(st);
            return el;
        };
    } else if (ele.style.removeAttribute) { // IE
        fn = function (el, st){
            el = _g(el);
            el.style.removeAttribute(baidu.string.toCamelCase(st));
            return el;
        };
    }
    ele = null;
    return fn;
}();
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/object/each.js
 * author: berg
 * version: 1.1.1
 * date: 2010-04-19
 */



/**
 * 遍历Object中所有元素，1.1.1增加
 * @name baidu.object.each
 * @function
 * @grammar baidu.object.each(source, iterator)
 * @param {Object} source 需要遍历的Object
 * @param {Function} iterator 对每个Object元素进行调用的函数，function (item, key)
 * @version 1.1.1
 *
 * @returns {Object} 遍历的Object
 */
baidu.object.each = function (source, iterator) {
    var returnValue, key, item;
    if ('function' == typeof iterator) {
        for (key in source) {
            if (source.hasOwnProperty(key)) {
                item = source[key];
                returnValue = iterator.call(source, item, key);

                if (returnValue === false) {
                    break;
                }
            }
        }
    }
    return source;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 判断目标参数是否number类型或Number对象
 * @name baidu.lang.isNumber
 * @function
 * @grammar baidu.lang.isNumber(source)
 * @param {Any} source 目标参数
 * @meta standard
 * @see baidu.lang.isString,baidu.lang.isObject,baidu.lang.isArray,baidu.lang.isElement,baidu.lang.isBoolean,baidu.lang.isDate
 *
 * @returns {boolean} 类型判断结果
 * @remark 用本函数判断NaN会返回false，尽管在Javascript中是Number类型。
 */
baidu.lang.isNumber = function (source) {
    return '[object Number]' == Object.prototype.toString.call(source) && isFinite(source);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/getTarget.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/17
 */



/**
 * 获取事件的触发元素
 * @name baidu.event.getTarget
 * @function
 * @grammar baidu.event.getTarget(event)
 * @param {Event} event 事件对象
 * @meta standard
 * @returns {HTMLElement} 事件的触发元素
 */

baidu.event.getTarget = function (event) {
    return event.target || event.srcElement;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */









/**
 * 按照border-box模型设置元素的height和width值。只支持元素的padding/border/height/width使用同一种计量单位的情况。<br/> 不支持：<br/> 1. 非数字值(medium)<br/> 2. em/px在不同的属性中混用
 * @name baidu.dom.setBorderBoxSize
 * @author berg
 * @function
 * @grammar baidu.dom.setBorderBoxSize(element, size)
 * @param {HTMLElement|string} element 元素或DOM元素的id
 * @param {object} size 包含height和width键名的对象
 *
 * @see baidu.dom.setBorderBoxWidth, baidu.dom.setBorderBoxHeight
 *
 * @return {HTMLElement}  设置好的元素
 */
baidu.dom.setBorderBoxSize= function (element, size) {
    var result = {};
    size.width && (result.width = parseFloat(size.width));
    size.height && (result.height = parseFloat(size.height));

    function getNumericalStyle(element, name){
        return parseFloat(baidu.getStyle(element, name)) || 0;
    }

    if(baidu.browser.isStrict){
        if(size.width){
            result.width = parseFloat(size.width)  -
                getNumericalStyle(element, 'paddingLeft') -
                getNumericalStyle(element, 'paddingRight') -
                getNumericalStyle(element, 'borderLeftWidth') -
                getNumericalStyle(element, 'borderRightWidth');
            result.width < 0 && (result.width = 0);
        }
        if(size.height){
            result.height = parseFloat(size.height) -
                getNumericalStyle(element, 'paddingTop') -
                getNumericalStyle(element, 'paddingBottom') -
                getNumericalStyle(element, 'borderTopWidth') -
                getNumericalStyle(element, 'borderBottomWidth');
            result.height < 0 && (result.height = 0);
        }
    }
    return baidu.dom.setStyles(element, result);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */




/**
 * 按照border-box模型设置元素的height值
 *
 * @author berg
 * @name baidu.dom.setBorderBoxHeight
 * @function
 * @grammar baidu.dom.setBorderBoxHeight(element, height)
 *
 * @param {HTMLElement|string} element DOM元素或元素的id
 * @param {number|string} height 要设置的height
 *
 * @return {HTMLElement}  设置好的元素
 * @see baidu.dom.setBorderBoxWidth, baidu.dom.setBorderBoxSize
 * @shortcut dom.setOuterHeight
 */
baidu.dom.setOuterHeight =
    baidu.dom.setBorderBoxHeight = function (element, height) {
        return baidu.dom.setBorderBoxSize(element, {height : height});
    };
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */




/**
 * 按照border-box模型设置元素的width值
 *
 * @author berg
 * @name baidu.dom.setBorderBoxWidth
 * @function
 * @grammar baidu.dom.setBorderBoxWidth(element, width)
 *
 * @param {HTMLElement|string} 	element DOM元素或元素的id
 * @param {number|string} 		width 	要设置的width
 *
 * @return {HTMLElement}  设置好的元素
 * @see baidu.dom.setBorderBoxHeight, baidu.dom.setBorderBoxSize
 * @shortcut dom.setOuterWidth
 */
baidu.dom.setOuterWidth =
    baidu.dom.setBorderBoxWidth = function (element, width) {
        return baidu.dom.setBorderBoxSize(element, {width : width});
    };
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All rights reserved.
 */






















/**
 * 绘制可以根据鼠标行为改变HTMLElement大小的resize handle
 * @name baidu.dom.resizable
 * @function
 * @grammar baidu.dom.resizable(element[, options])
 * @param {HTMLElement|string} element 需要改变大小的元素或者元素的id.
 * @param {Object} [options] resizable参数配置
 * @config {Array} [direction] 可以改变的方向[e,se,s,ws,w,wn,n,en]
 * @config {Function} [onresizestart] 开始改变大小时触发
 * @config {Function} [onresizeend] 大小改变结束时触发
 * @config {Function} [onresize] 大小改变后时触发
 * @config {Number|String} [maxWidth] 可改变的最大宽度
 * @config {Number|String} [maxHeight] 可改变的最大高度
 * @config {Number|String} [minWidth] 可改变的最小宽度
 * @config {Number|String} [minHeight] 可改变的最小高度
 * @config {String} [classPrefix] className 前缀
 * @config {Object} [directionHandlePosition] resizHandle的位置参数
 * @return {Object} {cancel:Function} cancel函数
 * @remark  需要将元素的定位设置为absolute
 * @author lixiaopeng
 * @version 1.3
 */
baidu.dom.resizable = function(element,options) {
    var target,
        op,
        resizeHandle = {},
        directionHandlePosition,
        orgStyles = {},
        range, mozUserSelect,
        orgCursor,
        offsetParent,
        currentEle,
        handlePosition,
        timer,
        isCancel = false,
        defaultOptions = {
            direction: ['e', 's', 'se'],
            minWidth: 16,
            minHeight: 16,
            classPrefix: 'tangram',
            directionHandlePosition: {}
        };


    if (!(target = baidu.dom.g(element)) && baidu.getStyle(target, 'position') == 'static') {
        return false;
    }
    offsetParent = target.offsetParent;
    var orgPosition = baidu.getStyle(target,'position');

    /*
     * 必要参数的扩展
     * resize handle以方向命名
     * 顺时针的顺序为
     * north northwest west southwest south southeast east northeast
     */
    op = baidu.extend(defaultOptions, options);

    /*
     * 必要参数转换
     */
    baidu.each(['minHeight', 'minWidth', 'maxHeight', 'maxWidth'], function(style) {
        op[style] && (op[style] = parseFloat(op[style]));
    });

    /*
     * {Array[Number]} rangeObject
     * minWidth,maxWidth,minHeight,maxHeight
     */
    range = [
        op.minWidth || 0,
        op.maxWidth || Number.MAX_VALUE,
        op.minHeight || 0,
        op.maxHeight || Number.MAX_VALUE
    ];

    render();

    /**
     * 绘制resizable handle
     */
    function render(){

        //位置属性
        handlePosition = baidu.extend({
            'e' : {'right': '-5px', 'top': '0px', 'width': '7px', 'height': target.offsetHeight},
            's' : {'left': '0px', 'bottom': '-5px', 'height': '7px', 'width': target.offsetWidth},
            'n' : {'left': '0px', 'top': '-5px', 'height': '7px', 'width': target.offsetWidth},
            'w' : {'left': '-5px', 'top': '0px', 'height':target.offsetHeight , 'width': '7px'},
            'se': {'right': '1px', 'bottom': '1px', 'height': '16px', 'width': '16px'},
            'sw': {'left': '1px', 'bottom': '1px', 'height': '16px', 'width': '16px'},
            'ne': {'right': '1px', 'top': '1px', 'height': '16px', 'width': '16px'},
            'nw': {'left': '1px', 'top': '1px', 'height': '16px', 'width': '16px'}
        },op.directionHandlePosition);

        //创建resizeHandle
        baidu.each(op.direction, function(key) {
            var className = op.classPrefix.split(' ');
            className[0] = className[0] + '-resizable-' + key;

            var ele = baidu.dom.create('div', {
                    className: className.join(' ')
                }),
                styles = handlePosition[key];

            styles['cursor'] = key + '-resize';
            styles['position'] = 'absolute';
            baidu.setStyles(ele, styles);

            ele.key = key;
            ele.style.MozUserSelect = 'none';

            target.appendChild(ele);
            resizeHandle[key] = ele;

            baidu.on(ele, 'mousedown', start);
        });

        isCancel = false;
    }

    /**
     * cancel resizeHandle
     * @public
     * @return  void
     */
    function cancel(){
        currentEle && stop();
        baidu.object.each(resizeHandle,function(item){
            baidu.un(item,"mousedown",start);
            baidu.dom.remove(item);
        });
        isCancel = true;
    }

    /**
     * update resizable
     * @public
     * @param {Object} options
     * @return null
     */
    function update(options){
        if(!isCancel){
            op = baidu.extend(op,options || {});
            cancel();
            render();
        }
    }

    /**
     * resizeHandle相应mousedown事件的函数
     * @param {Event} e
     * @return void
     */
    function start(e){
        var ele = baidu.event.getTarget(e),
            key = ele.key;
        currentEle = ele;

        if (ele.setCapture) {
            ele.setCapture();
        } else if (window.captureEvents) {
            window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP);
        }

        /*
         * 给body设置相应的css属性
         * 添加事件监听
         */
        orgCursor = baidu.getStyle(document.body, 'cursor');
        baidu.setStyle(document.body, 'cursor', key + '-resize');
        baidu.on(ele, 'mouseup',stop);
        baidu.on(document.body, 'selectstart', unselect);
        mozUserSelect = document.body.style.MozUserSelect;
        document.body.style.MozUserSelect = 'none';

        /*
         * 获取鼠标坐标
         * 偏移量计算
         */
        var orgMousePosition = baidu.page.getMousePosition();
        orgStyles = _getOrgStyle();
        timer = setInterval(function(){
            resize(key,orgMousePosition);
        }, 20);

        baidu.lang.isFunction(op.onresizestart) && op.onresizestart();
        baidu.event.preventDefault(e);
    }

    /**
     * 当鼠标按键抬起时终止对鼠标事件的监听
     * @private
     * @return void
     */
    function stop() {
        if (currentEle.releaseCapture) {
            currentEle.releaseCapture();
        } else if (window.releaseEvents) {
            window.releaseEvents(Event.MOUSEMOVE | Event.MOUSEUP);
        }

        /*
         * 删除事件监听
         * 还原css属性设置
         */
        baidu.un(currentEle, 'mouseup',stop);
        baidu.un(document, 'selectstart', unselect);
        document.body.style.MozUserSelect = mozUserSelect;
        baidu.un(document.body, 'selectstart', unselect);

        clearInterval(timer);
        baidu.setStyle(document.body, 'cursor',orgCursor);
        currentEle = null;

        baidu.lang.isFunction(op.onresizeend) && op.onresizeend();
    }

    /**
     * 根据鼠标移动的距离来绘制target
     * @private
     * @param {String} key handle的direction字符串
     * @param {Object} orgMousePosition 鼠标坐标{x,y}
     * @return void
     */
    function resize(key,orgMousePosition) {
        var xy = baidu.page.getMousePosition(),
            width = orgStyles['width'],
            height = orgStyles['height'],
            top = orgStyles['top'],
            left = orgStyles['left'],
            styles;

        if (key.indexOf('e') >= 0) {
            width = Math.max(xy.x - orgMousePosition.x + orgStyles['width'], range[0]);
            width = Math.min(width, range[1]);
        }else if (key.indexOf('w') >= 0) {
            width = Math.max(orgMousePosition.x - xy.x + orgStyles['width'], range[0]);
            width = Math.min(width, range[1]);
            left -= width - orgStyles['width'];
        }

        if (key.indexOf('s') >= 0) {
            height = Math.max(xy.y - orgMousePosition.y + orgStyles['height'], range[2]);
            height = Math.min(height, range[3]);
        }else if (key.indexOf('n') >= 0) {
            height = Math.max(orgMousePosition.y - xy.y + orgStyles['height'], range[2]);
            height = Math.min(height, range[3]);
            top -= height - orgStyles['height'];
        }

        styles = {'width': width, 'height': height, 'top': top, 'left': left};
        baidu.dom.setOuterHeight(target,height);
        baidu.dom.setOuterWidth(target,width);
        baidu.setStyles(target,{"top":top,"left":left});

        resizeHandle['n'] && baidu.setStyle(resizeHandle['n'], 'width', width);
        resizeHandle['s'] && baidu.setStyle(resizeHandle['s'], 'width', width);
        resizeHandle['e'] && baidu.setStyle(resizeHandle['e'], 'height', height);
        resizeHandle['w'] && baidu.setStyle(resizeHandle['w'], 'height', height);

        baidu.lang.isFunction(op.onresize) && op.onresize({current:styles,original:orgStyles});
    }

    /**
     * 阻止文字被选中
     * @private
     * @param {Event} e
     * @return {Boolean}
     */
    function unselect(e) {
        return baidu.event.preventDefault(e, false);
    }

    /**
     * 获取target的原始宽高
     * @private
     * @return {Object} {width,height,top,left}
     */
    function _getOrgStyle() {
        var offset_parent = baidu.dom.getPosition(target.offsetParent),
            offset_target = baidu.dom.getPosition(target),
            top,
            left;

        if(orgPosition == "absolute"){
            top =  offset_target.top - (target.offsetParent == document.body ? 0 : offset_parent.top);
            left = offset_target.left - (target.offsetParent == document.body ? 0 :offset_parent.left);
        }else{
            top = parseFloat(baidu.getStyle(target,"top")) || -parseFloat(baidu.getStyle(target,"bottom")) || 0;
            left = parseFloat(baidu.getStyle(target,"left")) || -parseFloat(baidu.getStyle(target,"right")) || 0;
        }
        baidu.setStyles(target,{top:top,left:left});

        return {
            width:target.offsetWidth,
            height:target.offsetHeight,
            top:top,
            left:left
        };
    }

    return {cancel:cancel,update:update,enable:render};
};

/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/setPosition.js
 * author: berg
 * version: 1.0.0
 * date: 2010/12/14
 */









/**
 * 设置目标元素的top和left值到用户指定的位置
 *
 * @name baidu.dom.setPosition
 * @function
 * @grammar baidu.dom.setPosition(element, position)
 *
 * @param {HTMLElement|string}	element 	目标元素或目标元素的id
 * @param {object} 				position 	位置对象 {top: {number}, left : {number}}
 *
 * @return {HTMLElement}  进行设置的元素
 */
baidu.dom.setPosition = function (element, position) {
    return baidu.dom.setStyles(element, {
        left : position.left - (parseFloat(baidu.dom.getStyle(element, "margin-left")) || 0),
        top : position.top - (parseFloat(baidu.dom.getStyle(element, "margin-top")) || 0)
    });
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 显示目标元素，即将目标元素的display属性还原成默认值。默认值可能在stylesheet中定义，或者是继承了浏览器的默认样式值
 * @author allstar, berg
 * @name baidu.dom.show
 * @function
 * @grammar baidu.dom.show(element)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @remark
 * 注意1：如果在CSS中定义此元素的样式为display:none
 * 在调用本函数以后，会将display属性仍然还原成none，元素仍然无法显示。
 * 注意2：如果这个元素的display属性被设置成inline
 * （由element.style.display或者HTML中的style属性设置）
 * 调用本方法将清除此inline属性，导致元素的display属性变成继承值
 * 因此，针对上面两种情况，建议使用dom.setStyle("display", "something")
 * 来明确指定要设置的display属性值。
 *
 * @shortcut show
 * @meta standard
 * @see baidu.dom.hide,baidu.dom.toggle
 *
 * @returns {HTMLElement} 目标元素
 */
baidu.dom.show = function (element) {
    element = baidu.dom.g(element);
    element.style.display = "";

    return element;
};

// 声明快捷方法
baidu.show = baidu.dom.show;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/toggle.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/17
 */



/**
 * 改变目标元素的显示/隐藏状态
 * @name baidu.dom.toggle
 * @function
 * @grammar baidu.dom.toggle(element)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @meta standard
 * @see baidu.dom.show,baidu.dom.hide
 *
 * @returns {HTMLElement} 目标元素
 */
baidu.dom.toggle = function (element) {
    element = baidu.dom.g(element);
    element.style.display = element.style.display == "none" ? "" : "none";

    return element;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/dom/toggleClass.js
 * author: berg
 * version: 1.0
 * date: 2010-07-06
 */

/**
 * 添加或者删除一个节点中的指定class，如果已经有就删除，否则添加
 * @name baidu.dom.toggleClass
 * @function
 * @grammar baidu.dom.toggleClass(element, className)
 * @param {HTMLElement|string} element 目标元素或目标元素的id
 * @param {String} className 指定的className。允许同时添加多个class，中间使用空白符分隔
 * @version 1.3
 * @remark
 *
 * 传入多个class时，只要其中有一个class不在当前元素中，则添加所有class，否则删除所有class。
 */





baidu.dom.toggleClass = function (element, className) {
    if(baidu.dom.hasClass(element, className)){
        baidu.dom.removeClass(element, className);
    }else{
        baidu.dom.addClass(element, className);
    }
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/isArray.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/30
 */



/**
 * 判断目标参数是否Array对象
 * @name baidu.lang.isArray
 * @function
 * @grammar baidu.lang.isArray(source)
 * @param {Any} source 目标参数
 * @meta standard
 * @see baidu.lang.isString,baidu.lang.isObject,baidu.lang.isNumber,baidu.lang.isElement,baidu.lang.isBoolean,baidu.lang.isDate
 *
 * @returns {boolean} 类型判断结果
 */
baidu.lang.isArray = function (source) {
    return '[object Array]' == Object.prototype.toString.call(source);
};
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/toArray.js
 * author: berg
 * version: 1.0
 * date: 2010-07-05
 */





/**
 * 将一个变量转换成array
 * @name baidu.lang.toArray
 * @function
 * @grammar baidu.lang.toArray(source)
 * @param {mix} source 需要转换成array的变量
 * @version 1.3
 * @meta standard
 * @returns {array} 转换后的array
 */
baidu.lang.toArray = function (source) {
    if (source === null || source === undefined)
        return [];
    if (baidu.lang.isArray(source))
        return source;

    // The strings and functions also have 'length'
    if (typeof source.length !== 'number' || typeof source === 'string' || baidu.lang.isFunction(source)) {
        return [source];
    }

    //nodeList, IE 下调用 [].slice.call(nodeList) 会报错
    if (source.item) {
        var l = source.length, array = new Array(l);
        while (l--)
            array[l] = source[l];
        return array;
    }

    return [].slice.call(source);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/fn/methodize.js
 * author: berg
 * version: 1.0.0
 * date: 2010/11/02 
 */



/**
 * 将一个静态函数变换成一个对象的方法，使其的第一个参数为this，或this[attr]
 * @name baidu.fn.methodize
 * @function
 * @grammar baidu.fn.methodize(func[, attr])
 * @param {Function}	func	要方法化的函数
 * @param {string}		[attr]	属性
 * @version 1.3
 * @returns {Function} 已方法化的函数
 */
baidu.fn.methodize = function (func, attr) {
    return function(){
        return func.apply(this, [(attr ? this[attr] : this)].concat([].slice.call(arguments)));
    };
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 包装函数的返回值，使其在能按照index指定的方式返回。<br/>如果其值为-1，直接返回返回值。 <br/>如果其值为0，返回"返回值"的包装结果。<br/> 如果其值大于0，返回第i个位置的参数的包装结果（从1开始计数）
 * @author berg
 * @name baidu.fn.wrapReturnValue
 * @function
 * @grammar baidu.fn.wrapReturnValue(func, wrapper, mode)
 * @param {function} func    需要包装的函数
 * @param {function} wrapper 包装器
 * @param {number} 包装第几个参数
 * @version 1.3.5
 * @return {function} 包装后的函数
 */
baidu.fn.wrapReturnValue = function (func, wrapper, mode) {
    mode = mode | 0;
    return function(){
        var ret = func.apply(this, arguments);

        if(mode > 0){
            return new wrapper(arguments[mode - 1]);
        }
        if(!mode){
            return new wrapper(ret);
        }
        return ret;
    }
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/fn/multize.js
 * author: berg
 * version: 1.0.0
 * date: 2010/11/02 
 */



/**
 * 对函数进行集化，使其在第一个参数为array时，结果也返回一个数组
 * @name baidu.fn.multize
 * @function
 * @grammar baidu.fn.multize(func[, recursive])
 * @param {Function}	func 		需要包装的函数
 * @param {Boolean}		[recursive] 是否递归包装（如果数组里面一项仍然是数组，递归），可选
 * @param {Boolean}		[joinArray] 将操作的结果展平后返回（如果返回的结果是数组，则将多个数组合成一个），可选
 * @version 1.3
 *
 * @returns {Function} 已集化的函数
 */
baidu.fn.multize = function (func, recursive, joinArray) {
    var newFunc = function(){
        var list = arguments[0],
            fn = recursive ? newFunc : func,
            ret = [],
            moreArgs = [].slice.call(arguments,0),
            i = 0,
            len,
            r;

        if(list instanceof Array){
            for(len = list.length; i < len; i++){
                moreArgs[0]=list[i];
                r = fn.apply(this, moreArgs);
                if (joinArray) {
                    if (r) {
                        //TODO: 需要去重吗？
                        ret = ret.concat(r);
                    }
                } else {
                    ret.push(r);
                }
            }
            return ret;
        }else{
            return func.apply(this, arguments);
        }
    }
    return newFunc;
};
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All right reserved.
 * 
 * path: baidu/dom/element.js
 * author: berg
 * version: 1.0.0
 * date: 2010-07-12
 */














/**
 * @namespace baidu.element 通过该方法封装的对象可使用dom、event方法集合以及each方法进行链式调用。
 */
baidu.element = function(node){
    var gNode = baidu._g(node);
    if(!gNode && baidu.dom.query){
        gNode = baidu.dom.query(node);
    }
    return new baidu.element.Element(gNode);
};
// 声明快捷方法
baidu.e = baidu.element;

/**
 * Element类，所有扩展到链条上的方法都会被放在这里面
 * @name baidu.element.Element
 * @grammar baidu.element.Element(node)
 * @param {DOMElement|NodeList} node   目标元素，可以是数组或者单个node节点
 * @returns {ElementObj} 包装后的DOM对象
 * @version 1.3
 */
baidu.element.Element = function(node){
    if(!baidu.element._init){
        //由于element可能会在其他代码之前加载，因此用这个方法来延迟加载
        baidu.element._makeChain();
        baidu.element._init = true;
    }
    /**
     * @private
     * @type {Array.<Node>}
     */
    this._dom = (node.tagName || '').toLowerCase() == 'select' ?
        [node] : baidu.lang.toArray(node);
};

/**
 * 以每一个匹配的元素作为上下文执行传递进来的函数，方便用户自行遍历dom。
 * @name baidu.element.each
 * @function
 * @grammar baidu.element(node).each(iterator)
 * @param {Function} iterator 遍历Dom时调用的方法
 * @version 1.3
 */
baidu.element.Element.prototype.each = function(iterator) {
    // 每一个iterator接受到的都是封装好的node
    baidu.array.each(this._dom, function(node, i){
        iterator.call(node, node, i);
    });
};

/*
 * 包装静态方法，使其变成一个链条方法。
 * 先把静态方法multize化，让其支持接受数组参数，
 * 然后包装返回值，返回值是一个包装类
 * 最后把静态方法methodize化，让其变成一个对象方法。
 *
 * @param {Function}    func    要包装的静态方法
 * @param {number}      index   包装函数的第几个返回值
 *
 * @return {function}   包装后的方法，能直接挂到Element的prototype上。
 * @private
 */
baidu.element._toChainFunction = function(func, index, joinArray){
    return baidu.fn.methodize(baidu.fn.wrapReturnValue(baidu.fn.multize(func, 0, 1), baidu.element.Element, index), '_dom');
};

/**
 * element对象包装了dom包下的除了drag和ready,create,ddManager之外的大部分方法。这样做的目的是提供更为方便的链式调用操作。其中doms代指dom包下的方法名。
 * @name baidu.element.doms
 * @function
 * @grammar baidu.element(node).doms
 * @param 详见dom包下相应方法的参数。
 * @version 1.3
 * @private
 */
baidu.element._makeChain = function(){ //将dom/event包下的东西挂到prototype里面
    var proto = baidu.element.Element.prototype,
        fnTransformer = baidu.element._toChainFunction;

    //返回值是第一个参数的包装
    baidu.each(("draggable droppable resizable fixable").split(' '),
        function(fn){
            proto[fn] =  fnTransformer(baidu.dom[fn], 1);
        });

    //直接返回返回值
    baidu.each(("remove getText contains getAttr getPosition getStyle hasClass intersect hasAttr getComputedStyle").split(' '),
        function(fn){
            proto[fn] = proto[fn.replace(/^get[A-Z]/g, stripGet)] = fnTransformer(baidu.dom[fn], -1);
        });

    //包装返回值
    //包含
    //1. methodize
    //2. multize，结果如果是数组会被展平
    //3. getXx == xx
    baidu.each(("addClass empty hide show insertAfter insertBefore insertHTML removeClass " +
        "setAttr setAttrs setStyle setStyles show toggleClass toggle next first " +
        "getAncestorByClass getAncestorBy getAncestorByTag getDocument getParent getWindow " +
        "last next prev g removeStyle setBorderBoxSize setOuterWidth setOuterHeight " +
        "setBorderBoxWidth setBorderBoxHeight setPosition children query").split(' '),
        function(fn){
            proto[fn] = proto[fn.replace(/^get[A-Z]/g, stripGet)] = fnTransformer(baidu.dom[fn], 0);
        });

    //对于baidu.dom.q这种特殊情况，将前两个参数调转
    //TODO：需要将这种特殊情况归纳到之前的情况中
    proto['q'] = proto['Q'] = fnTransformer(function(arg1, arg2){
        return baidu.dom.q.apply(this, [arg2, arg1].concat([].slice.call(arguments, 2)));
    }, 0);

    //包装event中的on 和 un
    baidu.each(("on un").split(' '), function(fn){
        proto[fn] = fnTransformer(baidu.event[fn], 0);
    });

    /**
     * 方法提供了事件绑定的快捷方式，事件发生时会触发传递进来的函数。events代指事件方法的总和。
     * @name baidu.element.events
     * @function
     * @grammar baidu.element(node).events(fn)
     * @param {Function} fn 事件触发时要调用的方法
     * @version 1.3
     * @remark 包装event的快捷方式具体包括blur、focus、focusin、focusout、load 、resize 、scroll 、unload 、click、 dblclick、mousedown 、mouseup 、mousemove、 mouseover 、mouseout 、mouseenter、 mouseleave、change 、select 、submit 、keydown、 keypress 、keyup、 error。
     * @returns {baidu.element} Element对象
     */
        //包装event的快捷方式
    baidu.each(("blur focus focusin focusout load resize scroll unload click dblclick " +
        "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
        "change select submit keydown keypress keyup error").split(' '), function(fnName){
        proto[fnName] = function(fn){
            return this.on(fnName, fn);
        };
    });


    /**
     * 把get去掉
     * 链里面的方法可以不以get开头调用
     * 如 baidu.element("myDiv").parent() == baidu.element("myDiv").getParent();
     * TODO: 合并getter和setter. baidu.e('myDiv').style() &  baidu.e('myDiv').style('width', '100');
     */
    function stripGet(match) {
        return match.charAt(3).toLowerCase();
    }
};

/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/element/extend.js
 * author: berg
 * version: 1.0.0
 * date: 2010/12/16
 */







/**
 * 为element对象扩展一个方法。
 * @name baidu.element.extend
 * @function
 * @grammar baidu.element.extend(json)
 * @param {Object} json 要扩展的方法名以及方法
 * @version 1.3
 * @shortcut e
 * @returns {baidu.element.Element} Element对象
 *
 */
baidu.element.extend = function(json){
    var e = baidu.element;
    baidu.object.each(json, function(item, key){
        e.Element.prototype[key] = baidu.element._toChainFunction(item, -1);
    });
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/EventArg.js
 * author: erik
 * version: 1.1.0
 * date: 2010/01/11
 */



/**
 * 事件对象构造器，屏蔽浏览器差异的事件类
 * @name baidu.event.EventArg
 * @class
 * @grammar baidu.event.EventArg(event[, win])
 * @param {Event}   event   事件对象
 * @param {Window}  [win]	窗口对象，默认为window
 * @meta standard
 * @remark 1.1.0开始支持
 * @see baidu.event.get
 */
baidu.event.EventArg = function (event, win) {
    win = win || window;
    event = event || win.event;
    var doc = win.document;

    this.target = /** @type {Node} */ (event.target) || event.srcElement;
    this.keyCode = event.which || event.keyCode;
    for (var k in event) {
        var item = event[k];
        // 避免拷贝preventDefault等事件对象方法
        if ('function' != typeof item) {
            this[k] = item;
        }
    }

    if (!this.pageX && this.pageX !== 0) {
        this.pageX = (event.clientX || 0)
            + (doc.documentElement.scrollLeft
            || doc.body.scrollLeft);
        this.pageY = (event.clientY || 0)
            + (doc.documentElement.scrollTop
            || doc.body.scrollTop);
    }
    this._event = event;
};

/**
 * 阻止事件的默认行为
 * @name preventDefault
 * @grammar eventArgObj.preventDefault()
 * @returns {baidu.event.EventArg} EventArg对象
 */
baidu.event.EventArg.prototype.preventDefault = function () {
    if (this._event.preventDefault) {
        this._event.preventDefault();
    } else {
        this._event.returnValue = false;
    }
    return this;
};

/**
 * 停止事件的传播
 * @name stopPropagation
 * @grammar eventArgObj.stopPropagation()
 * @returns {baidu.event.EventArg} EventArg对象
 */
baidu.event.EventArg.prototype.stopPropagation = function () {
    if (this._event.stopPropagation) {
        this._event.stopPropagation();
    } else {
        this._event.cancelBubble = true;
    }
    return this;
};

/**
 * 停止事件
 * @name stop
 * @grammar eventArgObj.stop()
 * @returns {baidu.event.EventArg} EventArg对象
 */
baidu.event.EventArg.prototype.stop = function () {
    return this.stopPropagation().preventDefault();
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/_eventFilter.js
 * author: rocy
 * version: 1.0.0
 * date: 2010/10/29
 */


baidu.event._eventFilter = baidu.event._eventFilter || {};

/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/_eventFilter/_crossElementBoundary.js
 * author: Rocy, berg
 * version: 1.0.0
 * date: 2010/12/16
 */





/**
 * 事件仅在鼠标进入/离开元素区域触发一次，当鼠标在元素区域内部移动的时候不会触发，用于为非IE浏览器添加mouseleave/mouseenter支持。
 *
 * @name baidu.event._eventFilter._crossElementBoundary
 * @function
 * @grammar baidu.event._eventFilter._crossElementBoundary(listener, e)
 *
 * @param {function} listener	要触发的函数
 * @param {DOMEvent} e 			DOM事件
 */

baidu.event._eventFilter._crossElementBoundary = function(listener, e){
    var related = e.relatedTarget,
        current = e.currentTarget;
    if(
        related === false ||
            // 如果current和related都是body，contains函数会返回false
            current == related ||
            // Firefox有时会把XUL元素作为relatedTarget
            // 这些元素不能访问parentNode属性
            // thanks jquery & mootools
            (related && (related.prefix == 'xul' ||
                //如果current包含related，说明没有经过current的边界
                baidu.dom.contains(current, related)))
        ){
        return ;
    }
    return listener.call(current, e);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/fn/bind.js
 * author: berg
 * version: 1.0.0
 * date: 2010/11/02 
 */





/**
 * 为对象绑定方法和作用域
 * @name baidu.fn.bind
 * @function
 * @grammar baidu.fn.bind(handler[, obj, args])
 * @param {Function|String} handler 要绑定的函数，或者一个在作用域下可用的函数名
 * @param {Object} obj 执行运行时this，如果不传入则运行时this为函数本身
 * @param {args* 0..n} args 函数执行时附加到执行时函数前面的参数
 * @version 1.3
 *
 * @returns {Function} 封装后的函数
 */
baidu.fn.bind = function(func, scope) {
    var xargs = arguments.length > 2 ? [].slice.call(arguments, 2) : null;
    return function () {
        var fn = baidu.lang.isString(func) ? scope[func] : func,
            args = (xargs) ? xargs.concat([].slice.call(arguments, 0)) : arguments;
        return fn.apply(scope || fn, args);
    };
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/_eventFilter/mouseenter.js
 * author: Rocy
 * version: 1.0.0
 * date: 2010/11/09
 */





/**
 * 用于为非IE浏览器添加mouseenter的支持;
 * mouseenter事件仅在鼠标进入元素区域触发一次,
 *    当鼠标在元素内部移动的时候不会多次触发.
 */
baidu.event._eventFilter.mouseenter = window.attachEvent ? null : function(element,type, listener){
    return {
        type: "mouseover",
        listener: baidu.fn.bind(baidu.event._eventFilter._crossElementBoundary, this, listener)
    }
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/_eventFilter/mouseleave.js
 * author: Rocy, berg
 * version: 1.0.0
 * date: 2010/11/09
 */




/**
 * 用于为非IE浏览器添加mouseleave的支持;
 * mouseleave事件仅在鼠标移出元素区域触发一次,
 *    当鼠标在元素区域内部移动的时候不会触发.
 */
baidu.event._eventFilter.mouseleave = window.attachEvent ? null : function(element,type, listener){
    return {
        type: "mouseout",
        listener: baidu.fn.bind(baidu.event._eventFilter._crossElementBoundary, this, listener)
    }
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 *
 * path: baidu/event/_unload.js
 * author: erik, berg
 * version: 1.1.0
 * date: 2009/12/16
 */




/**
 * 卸载所有事件监听器
 * @private
 */
baidu.event._unload = function() {
    var lis = baidu.event._listeners,
        len = lis.length,
        standard = !!window.removeEventListener,
        item, el;

    while (len--) {
        item = lis[len];
        //20100409 berg: 不解除unload的绑定，保证用户的事件一定会被执行
        //否则用户挂载进入的unload事件也可能会在这里被删除
        if (item[1] == 'unload') {
            continue;
        }
        //如果el被移除，不做判断将导致js报错
        if (!(el = item[0])) {
            continue;
        }
        if (el.removeEventListener) {
            el.removeEventListener(item[1], item[3], false);
        } else if (el.detachEvent) {
            el.detachEvent('on' + item[1], item[3]);
        }
    }

    if (standard) {
        window.removeEventListener('unload', baidu.event._unload, false);
    } else {
        window.detachEvent('onunload', baidu.event._unload);
    }
};

// 在页面卸载的时候，将所有事件监听器移除
if (window.attachEvent) {
    window.attachEvent('onunload', baidu.event._unload);
} else {
    window.addEventListener('unload', baidu.event._unload, false);
}
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/object/values.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */



/**
 * 获取目标对象的值列表
 * @name baidu.object.values
 * @function
 * @grammar baidu.object.values(source)
 * @param {Object} source 目标对象
 * @see baidu.object.keys
 *
 * @returns {Array} 值列表
 */
baidu.object.values = function (source) {
    var result = [], resultLen = 0, k;
    for (k in source) {
        if (source.hasOwnProperty(k)) {
            result[resultLen++] = source[k];
        }
    }
    return result;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/fire.js
 * author: linlingyu
 * version: 1.1.0
 * date: 2010/10/28
 */






/**
 * 触发已经注册的事件。注：在ie下不支持load和unload事件
 * @name baidu.event.fire
 * @function
 * @grammar baidu.event.fire(element, type, options)
 * @param {HTMLElement|string|window} element 目标元素或目标元素id
 * @param {string} type 事件类型
 * @param {Object} options 触发的选项

 * @param {Boolean} options.bubbles 是否冒泡
 * @param {Boolean} options.cancelable 是否可以阻止事件的默认操作
 * @param {window|null} options.view 指定 Event 的 AbstractView
 * @param {1|Number} options.detail 指定 Event 的鼠标单击量
 * @param {Number} options.screenX 指定 Event 的屏幕 x 坐标
 * @param {Number} options.screenY number 指定 Event 的屏幕 y 坐标
 * @param {Number} options.clientX 指定 Event 的客户端 x 坐标
 * @param {Number} options.clientY 指定 Event 的客户端 y 坐标
 * @param {Boolean} options.ctrlKey 指定是否在 Event 期间按下 ctrl 键
 * @param {Boolean} options.altKey 指定是否在 Event 期间按下 alt 键
 * @param {Boolean} options.shiftKey 指定是否在 Event 期间按下 shift 键
 * @param {Boolean} options.metaKey 指定是否在 Event 期间按下 meta 键
 * @param {Number} options.button 指定 Event 的鼠标按键
 * @param {Number} options.keyCode 指定 Event 的键盘按键
 * @param {Number} options.charCode 指定 Event 的字符编码
 * @param {HTMLElement} options.relatedTarget 指定 Event 的相关 EventTarget
 * @version 1.3
 *
 * @returns {HTMLElement} 目标元素
 */
(function(){
    var browser = baidu.browser,
        keys = {
            keydown : 1,
            keyup : 1,
            keypress : 1
        },
        mouses = {
            click : 1,
            dblclick : 1,
            mousedown : 1,
            mousemove : 1,
            mouseup : 1,
            mouseover : 1,
            mouseout : 1
        },
        htmls = {
            abort : 1,
            blur : 1,
            change : 1,
            error : 1,
            focus : 1,
            load : browser.ie ? 0 : 1,
            reset : 1,
            resize : 1,
            scroll : 1,
            select : 1,
            submit : 1,
            unload : browser.ie ? 0 : 1
        },
        bubblesEvents = {
            scroll : 1,
            resize : 1,
            reset : 1,
            submit : 1,
            change : 1,
            select : 1,
            error : 1,
            abort : 1
        },
        parameters = {
            "KeyEvents" : ["bubbles", "cancelable", "view", "ctrlKey", "altKey", "shiftKey", "metaKey", "keyCode", "charCode"],
            "MouseEvents" : ["bubbles", "cancelable", "view", "detail", "screenX", "screenY", "clientX", "clientY", "ctrlKey", "altKey", "shiftKey", "metaKey", "button", "relatedTarget"],
            "HTMLEvents" : ["bubbles", "cancelable"],
            "UIEvents" : ["bubbles", "cancelable", "view", "detail"],
            "Events" : ["bubbles", "cancelable"]
        };
    baidu.object.extend(bubblesEvents, keys);
    baidu.object.extend(bubblesEvents, mouses);
    function parse(array, source){//按照array的项在source中找到值生成新的obj并把source中对应的array的项删除
        var i = 0, size = array.length, obj = {};
        for(; i < size; i++){
            obj[array[i]] = source[array[i]];
            delete source[array[i]];
        }
        return obj;
    };
    function eventsHelper(type, eventType, options){//非IE内核的事件辅助
        options = baidu.object.extend({}, options);
        var param = baidu.object.values(parse(parameters[eventType], options)),
            evnt = document.createEvent(eventType);
        param.unshift(type);
        if("KeyEvents" == eventType){
            evnt.initKeyEvent.apply(evnt, param);
        }else if("MouseEvents" == eventType){
            evnt.initMouseEvent.apply(evnt, param);
        }else if("UIEvents" == eventType){
            evnt.initUIEvent.apply(evnt, param);
        }else{//HTMMLEvents, Events
            evnt.initEvent.apply(evnt, param);
        }
        baidu.object.extend(evnt, options);//把多出来的options再附加上去,这是为解决当创建一个其它event时，当用Events代替后需要把参数附加到对象上
        return evnt;
    };
    function eventObject(options){//ie内核的构建方式
        var evnt;
        if(document.createEventObject){
            evnt = document.createEventObject();
            baidu.object.extend(evnt, options);
        }
        return evnt;
    };
    function keyEvents(type, options){//keyEvents
        options = parse(parameters["KeyEvents"], options);
        var evnt;
        if(document.createEvent){
            try{//opera对keyEvents的支持极差
                evnt = eventsHelper(type, "KeyEvents", options);
            }catch(keyError){
                try{
                    evnt = eventsHelper(type, "Events", options);
                }catch(evtError){
                    evnt = eventsHelper(type, "UIEvents", options);
                }
            }
        }else{
            options.keyCode = options.charCode > 0 ? options.charCode : options.keyCode;
            evnt = eventObject(options);
        }
        return evnt;
    };
    function mouseEvents(type, options){//mouseEvents
        options = parse(parameters["MouseEvents"], options);
        var evnt;
        if(document.createEvent){
            evnt = eventsHelper(type, "MouseEvents", options);//mouseEvents基本浏览器都支持
            if(options.relatedTarget && !evnt.relatedTarget){
                if("mouseout" == type.toLowerCase()){
                    evnt.toElement = options.relatedTarget;
                }else if("mouseover" == type.toLowerCase()){
                    evnt.fromElement = options.relatedTarget;
                }
            }
        }else{
            options.button = options.button == 0 ? 1
                : options.button == 1 ? 4
                : baidu.lang.isNumber(options.button) ? options.button : 0;
            evnt = eventObject(options);
        }
        return evnt;
    };
    function htmlEvents(type, options){//htmlEvents
        options.bubbles = bubblesEvents.hasOwnProperty(type);
        options = parse(parameters["HTMLEvents"], options);
        var evnt;
        if(document.createEvent){
            try{
                evnt = eventsHelper(type, "HTMLEvents", options);
            }catch(htmlError){
                try{
                    evnt = eventsHelper(type, "UIEvents", options);
                }catch(uiError){
                    evnt = eventsHelper(type, "Events", options);
                }
            }
        }else{
            evnt = eventObject(options);
        }
        return evnt;
    };
    baidu.event.fire = function(element, type, options){
        var evnt;
        type = type.replace(/^on/i, "");
        element = baidu.dom._g(element);
        options = baidu.object.extend({
            bubbles : true,
            cancelable : true,
            view : window,
            detail : 1,
            screenX : 0,
            screenY : 0,
            clientX : 0,
            clientY : 0,
            ctrlKey : false,
            altKey  : false,
            shiftKey: false,
            metaKey : false,
            keyCode : 0,
            charCode: 0,
            button  : 0,
            relatedTarget : null
        }, options);
        if(keys[type]){
            evnt = keyEvents(type, options);
        }else if(mouses[type]){
            evnt = mouseEvents(type, options);
        }else if(htmls[type]){
            evnt = htmlEvents(type, options);
        }else{
            throw(new Error(type + " is not support!"));
        }
        if(evnt){//tigger event
            if(element.dispatchEvent){
                element.dispatchEvent(evnt);
            }else if(element.fireEvent){
                element.fireEvent("on" + type, evnt);
            }
        }
    }
})();
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/get.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/23
 */



/**
 * 获取扩展的EventArg对象
 * @name baidu.event.get
 * @function
 * @grammar baidu.event.get(event[, win])
 * @param {Event} event 事件对象
 * @param {window} [win] 触发事件元素所在的window
 * @meta standard
 * @see baidu.event.EventArg
 *
 * @returns {EventArg} 扩展的事件对象
 */
baidu.event.get = function (event, win) {
    return new baidu.event.EventArg(event, win);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/getKeyCode.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/23
 */


/**
 * 获取键盘事件的键值
 * @name baidu.event.getKeyCode
 * @function
 * @grammar baidu.event.getKeyCode(event)
 * @param {Event} event 事件对象
 *
 * @returns {number} 键盘事件的键值
 */
baidu.event.getKeyCode = function (event) {
    return event.which || event.keyCode;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/getPageX.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/16
 */



/**
 * 获取鼠标事件的鼠标x坐标
 * @name baidu.event.getPageX
 * @function
 * @grammar baidu.event.getPageX(event)
 * @param {Event} event 事件对象
 * @see baidu.event.getPageY
 *
 * @returns {number} 鼠标事件的鼠标x坐标
 */
baidu.event.getPageX = function (event) {
    var result = event.pageX,
        doc = document;
    if (!result && result !== 0) {
        result = (event.clientX || 0)
            + (doc.documentElement.scrollLeft
            || doc.body.scrollLeft);
    }
    return result;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/getPageY.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/16
 */



/**
 * 获取鼠标事件的鼠标y坐标
 * @name baidu.event.getPageY
 * @function
 * @grammar baidu.event.getPageY(event)
 * @param {Event} event 事件对象
 * @see baidu.event.getPageX
 *
 * @returns {number} 鼠标事件的鼠标y坐标
 */
baidu.event.getPageY = function (event) {
    var result = event.pageY,
        doc = document;
    if (!result && result !== 0) {
        result = (event.clientY || 0)
            + (doc.documentElement.scrollTop
            || doc.body.scrollTop);
    }
    return result;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/once.js
 * author: wangcheng
 * version: 1.1.0
 * date: 2010/10/29
 */





/**
 * 为目标元素添加一次事件绑定
 * @name baidu.event.once
 * @function
 * @grammar baidu.event.once(element, type, listener)
 * @param {HTMLElement|string} element 目标元素或目标元素id
 * @param {string} type 事件类型
 * @param {Function} listener 需要添加的监听器
 * @version 1.3
 * @see baidu.event.un,baidu.event.on
 *
 * @returns {HTMLElement} 目标元素
 */
baidu.event.once = function(element, type, listener){
    element = baidu.dom._g(element);
    function onceListener(event){
        listener.call(element,event);
        baidu.event.un(element, type, onceListener);
    }

    baidu.event.on(element, type, onceListener);
    return element;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/stopPropagation.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/23
 */



/**
 * 阻止事件传播
 * @name baidu.event.stopPropagation
 * @function
 * @grammar baidu.event.stopPropagation(event)
 * @param {Event} event 事件对象
 * @see baidu.event.stop,baidu.event.preventDefault
 */
baidu.event.stopPropagation = function (event) {
    if (event.stopPropagation) {
        event.stopPropagation();
    } else {
        event.cancelBubble = true;
    }
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/event/stop.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/23
 */




/**
 * 停止事件
 * @name baidu.event.stop
 * @function
 * @grammar baidu.event.stop(event)
 * @param {Event} event 事件对象
 * @see baidu.event.stopPropagation,baidu.event.preventDefault
 */
baidu.event.stop = function (event) {
    var e = baidu.event;
    e.stopPropagation(event);
    e.preventDefault(event);
};
/*
 * Tangram
 * Copyright 2011 Baidu Inc. All rights reserved.
 *
 * path: baidu/fn/abstractMethod.js
 * author: leeight
 * version: 1.0.0
 * date: 2011/04/29
 */



/**
 * 定义一个抽象方法
 * @type {!Function}
 * @throws {Error} when invoked to indicate the method should be
 *   overridden.
 * @see goog.abstractMethod
 */
baidu.fn.abstractMethod = function() {
    throw Error('unimplemented abstract method');
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/json.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/02
 */


/**
 * @namespace baidu.json 操作json对象的方法。
 */
baidu.json = baidu.json || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/json/parse.js
 * author: erik, berg
 * version: 1.2
 * date: 2009/11/23
 */



/**
 * 将字符串解析成json对象。注：不会自动祛除空格
 * @name baidu.json.parse
 * @function
 * @grammar baidu.json.parse(data)
 * @param {string} source 需要解析的字符串
 * @remark
 * 该方法的实现与ecma-262第五版中规定的JSON.parse不同，暂时只支持传入一个参数。后续会进行功能丰富。
 * @meta standard
 * @see baidu.json.stringify,baidu.json.decode
 *
 * @returns {JSON} 解析结果json对象
 */
baidu.json.parse = function (data) {
    //2010/12/09：更新至不使用原生parse，不检测用户输入是否正确
    return (new Function("return (" + data + ")"))();
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/json/decode.js
 * author: erik, cat
 * version: 1.3.4
 * date: 2010/12/23
 */



/**
 * 将字符串解析成json对象，为过时接口，今后会被baidu.json.parse代替
 * @name baidu.json.decode
 * @function
 * @grammar baidu.json.decode(source)
 * @param {string} source 需要解析的字符串
 * @meta out
 * @see baidu.json.encode,baidu.json.parse
 *
 * @returns {JSON} 解析结果json对象
 */
baidu.json.decode = baidu.json.parse;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/json/stringify.js
 * author: erik
 * version: 1.1.0
 * date: 2010/01/11
 */



/**
 * 将json对象序列化
 * @name baidu.json.stringify
 * @function
 * @grammar baidu.json.stringify(value)
 * @param {JSON} value 需要序列化的json对象
 * @remark
 * 该方法的实现与ecma-262第五版中规定的JSON.stringify不同，暂时只支持传入一个参数。后续会进行功能丰富。
 * @meta standard
 * @see baidu.json.parse,baidu.json.encode
 *
 * @returns {string} 序列化后的字符串
 */
baidu.json.stringify = (function () {
    /**
     * 字符串处理时需要转义的字符表
     * @private
     */
    var escapeMap = {
        "\b": '\\b',
        "\t": '\\t',
        "\n": '\\n',
        "\f": '\\f',
        "\r": '\\r',
        '"' : '\\"',
        "\\": '\\\\'
    };

    /**
     * 字符串序列化
     * @private
     */
    function encodeString(source) {
        if (/["\\\x00-\x1f]/.test(source)) {
            source = source.replace(
                /["\\\x00-\x1f]/g,
                function (match) {
                    var c = escapeMap[match];
                    if (c) {
                        return c;
                    }
                    c = match.charCodeAt();
                    return "\\u00"
                        + Math.floor(c / 16).toString(16)
                        + (c % 16).toString(16);
                });
        }
        return '"' + source + '"';
    }

    /**
     * 数组序列化
     * @private
     */
    function encodeArray(source) {
        var result = ["["],
            l = source.length,
            preComma, i, item;

        for (i = 0; i < l; i++) {
            item = source[i];

            switch (typeof item) {
                case "undefined":
                case "function":
                case "unknown":
                    break;
                default:
                    if(preComma) {
                        result.push(',');
                    }
                    result.push(baidu.json.stringify(item));
                    preComma = 1;
            }
        }
        result.push("]");
        return result.join("");
    }

    /**
     * 处理日期序列化时的补零
     * @private
     */
    function pad(source) {
        return source < 10 ? '0' + source : source;
    }

    /**
     * 日期序列化
     * @private
     */
    function encodeDate(source){
        return '"' + source.getFullYear() + "-"
            + pad(source.getMonth() + 1) + "-"
            + pad(source.getDate()) + "T"
            + pad(source.getHours()) + ":"
            + pad(source.getMinutes()) + ":"
            + pad(source.getSeconds()) + '"';
    }

    return function (value) {
        switch (typeof value) {
            case 'undefined':
                return 'undefined';

            case 'number':
                return isFinite(value) ? String(value) : "null";

            case 'string':
                return encodeString(value);

            case 'boolean':
                return String(value);

            default:
                if (value === null) {
                    return 'null';
                } else if (value instanceof Array) {
                    return encodeArray(value);
                } else if (value instanceof Date) {
                    return encodeDate(value);
                } else {
                    var result = ['{'],
                        encode = baidu.json.stringify,
                        preComma,
                        item;

                    for (var key in value) {
                        if (Object.prototype.hasOwnProperty.call(value, key)) {
                            item = value[key];
                            switch (typeof item) {
                                case 'undefined':
                                case 'unknown':
                                case 'function':
                                    break;
                                default:
                                    if (preComma) {
                                        result.push(',');
                                    }
                                    preComma = 1;
                                    result.push(encode(key) + ':' + encode(item));
                            }
                        }
                    }
                    result.push('}');
                    return result.join('');
                }
        }
    };
})();
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/json/encode.js
 * author: erik, cat
 * version: 1.3.4
 * date: 2010/12/23
 */



/**
 * 将json对象序列化，为过时接口，今后会被baidu.json.stringify代替
 * @name baidu.json.encode
 * @function
 * @grammar baidu.json.encode(value)
 * @param {JSON} value 需要序列化的json对象
 * @meta out
 * @see baidu.json.decode,baidu.json.stringify
 *
 * @returns {string} 序列化后的字符串
 */
baidu.json.encode = baidu.json.stringify;
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/Class/addEventListeners.js
 * author: berg
 * version: 1.0
 * date: 2010-07-05
 */




/**
 * 添加多个自定义事件。
 * @grammar obj.addEventListeners(events, fn)
 * @param 	{object}   events       json对象，key为事件名称，value为事件被触发时应该调用的回调函数
 * @param 	{Function} fn	        要挂载的函数
 * @version 1.3
 */
/* addEventListeners("onmyevent,onmyotherevent", fn);
 * addEventListeners({
 *      "onmyevent"         : fn,
 *      "onmyotherevent"    : fn1
 * });
 */
baidu.lang.Class.prototype.addEventListeners = function (events, fn) {
    if(typeof fn == 'undefined'){
        for(var i in events){
            this.addEventListener(i, events[i]);
        }
    }else{
        events = events.split(',');
        var i = 0, len = events.length, event;
        for(; i < len; i++){
            this.addEventListener(baidu.trim(events[i]), fn);
        }
    }
};
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * @author: meizz
 * @namespace: baidu.lang.createClass
 * @version: 2010-05-13
 */





/**
 * 创建一个类，包括创造类的构造器、继承基类Class
 * @name baidu.lang.createClass
 * @function
 * @grammar baidu.lang.createClass(constructor[, options])
 * @param {Function} constructor 类的构造器函数
 * @param {Object} [options]

 * @config {string} [className] 类名
 * @config {Function} [superClass] 父类，默认为baidu.lang.Class
 * @version 1.2
 * @remark
 *
 使用createClass能方便的创建一个带有继承关系的类。同时会为返回的类对象添加extend方法，使用obj.extend({});可以方便的扩展原型链上的方法和属性

 * @see baidu.lang.Class,baidu.lang.inherits
 *
 * @returns {Object} 一个类对象
 */

baidu.lang.createClass = function(constructor, options) {
    options = options || {};
    var superClass = options.superClass || baidu.lang.Class;

    // 创建新类的真构造器函数
    var fn = function(){
        // 继承父类的构造器
        if(superClass != baidu.lang.Class){
            superClass.apply(this, arguments);
        }else{
            superClass.call(this);
        }
        constructor.apply(this, arguments);
    };

    fn.options = options.options || {};

    var C = function(){},
        cp = constructor.prototype;
    C.prototype = superClass.prototype;

    // 继承父类的原型（prototype)链
    var fp = fn.prototype = new C();

    // 继承传参进来的构造器的 prototype 不会丢
    for (var i in cp) fp[i] = cp[i];

    typeof options.className == "string" && (fp._className = options.className);

    // 修正这种继承方式带来的 constructor 混乱的问题
    fp.constructor = cp.constructor;

    // 给类扩展出一个静态方法，以代替 baidu.object.extend()
    fn.extend = function(json){
        for (var i in json) {
            fn.prototype[i] = json[i];
        }
        return fn;  // 这个静态方法也返回类对象本身
    };

    return fn;
};
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/decontrol.js
 * author: meizz
 * version: 1.1.0
 * $date$
 */



/**
 * 解除instance中对指定类实例的引用关系。
 * @name baidu.lang.decontrol
 * @function
 * @grammar baidu.lang.decontrol(guid)
 * @param {string} guid 类的唯一标识
 * @version 1.1.1
 * @see baidu.lang.instance
 */
baidu.lang.decontrol = function(guid) {
    var m = window[baidu.guid];
    m._instances && (delete m._instances[guid]);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 事件中心
 * @class
 * @name baidu.lang.eventCenter
 * @author rocy
 */
baidu.lang.eventCenter = baidu.lang.eventCenter || baidu.lang.createSingle();

/**
 * 注册全局事件监听器。
 * @name baidu.lang.eventCenter.addEventListener
 * @function
 * @grammar baidu.lang.eventCenter.addEventListener(type, handler[, key])
 * @param 	{string}   type         自定义事件的名称
 * @param 	{Function} handler      自定义事件被触发时应该调用的回调函数
 * @param 	{string}   [key]		为事件监听函数指定的名称，可在移除时使用。如果不提供，方法会默认为它生成一个全局唯一的key。
 * @remark 	事件类型区分大小写。如果自定义事件名称不是以小写"on"开头，该方法会给它加上"on"再进行判断，即"click"和"onclick"会被认为是同一种事件。
 */

/**
 * 移除全局事件监听器。
 * @name baidu.lang.eventCenter.removeEventListener
 * @grammar baidu.lang.eventCenter.removeEventListener(type, handler)
 * @function
 * @param {string}   type     事件类型
 * @param {Function|string} handler  要移除的事件监听函数或者监听函数的key
 * @remark 	如果第二个参数handler没有被绑定到对应的自定义事件中，什么也不做。
 */

/**
 * 派发全局自定义事件，使得绑定到全局自定义事件上面的函数都会被执行。
 * @name baidu.lang.eventCenter.dispatchEvent
 * @grammar baidu.lang.eventCenter.dispatchEvent(event, options)
 * @function
 * @param {baidu.lang.Event|String} event 	Event对象，或事件名称(1.1.1起支持)
 * @param {Object} 					options 扩展参数,所含属性键值会扩展到Event对象上(1.2起支持)
 */
/*
 * tangram
 * copyright 2011 baidu inc. all rights reserved.
 *
 * path: baidu/lang/getModule.js
 * author: leeight
 * version: 1.1.0
 * date: 2011/04/29
 */



/**
 * 根据变量名或者命名空间来查找对象
 * @function
 * @grammar baidu.lang.getModule(name, opt_obj)
 * @param {string} name 变量或者命名空间的名字.
 * @param {Object=} opt_obj 从这个对象开始查找，默认是window;
 * @return {?Object} 返回找到的对象，如果没有找到返回null.
 * @see goog.getObjectByName
 */
baidu.lang.getModule = function(name, opt_obj) {
    var parts = name.split('.'),
        cur = opt_obj || window,
        part;
    for (; part = parts.shift(); ) {
        if (cur[part] != null) {
            cur = cur[part];
        } else {
            return null;
        }
    }

    return cur;
};



















/* vim: set ts=4 sw=4 sts=4 tw=100 noet: */
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/inherits.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/24
 */



/**
 * 为类型构造器建立继承关系
 * @name baidu.lang.inherits
 * @function
 * @grammar baidu.lang.inherits(subClass, superClass[, className])
 * @param {Function} subClass 子类构造器
 * @param {Function} superClass 父类构造器
 * @param {string} className 类名标识
 * @remark
 *
 使subClass继承superClass的prototype，因此subClass的实例能够使用superClass的prototype中定义的所有属性和方法。<br>
 这个函数实际上是建立了subClass和superClass的原型链集成，并对subClass进行了constructor修正。<br>
 <strong>注意：如果要继承构造函数，需要在subClass里面call一下，具体见下面的demo例子</strong>

 * @shortcut inherits
 * @meta standard
 * @see baidu.lang.Class
 */
baidu.lang.inherits = function (subClass, superClass, className) {
    var key, proto,
        selfProps = subClass.prototype,
        clazz = new Function();

    clazz.prototype = superClass.prototype;
    proto = subClass.prototype = new clazz();
    for (key in selfProps) {
        proto[key] = selfProps[key];
    }
    subClass.prototype.constructor = subClass;
    subClass.superClass = superClass.prototype;

    // 类名标识，兼容Class的toString，基本没用
    if ("string" == typeof className) {
        proto._className = className;
    }
};

// 声明快捷方法
baidu.inherits = baidu.lang.inherits;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/instance.js
 * author: meizz, erik
 * version: 1.1.0
 * date: 2009/12/1
 */



/**
 * 根据参数(guid)的指定，返回对应的实例对象引用
 * @name baidu.lang.instance
 * @function
 * @grammar baidu.lang.instance(guid)
 * @param {string} guid 需要获取实例的guid
 * @meta standard
 *
 * @returns {Object|null} 如果存在的话，返回;否则返回null。
 */
baidu.lang.instance = function (guid) {
    return window[baidu.guid]._instances[guid] || null;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/isBoolean.js
 * author: berg
 * version: 1.0.0
 * date: 2010/10/12
 */



/**
 * 判断目标参数是否Boolean对象
 * @name baidu.lang.isBoolean
 * @function
 * @grammar baidu.lang.isBoolean(source)
 * @param {Any} source 目标参数
 * @version 1.3
 * @see baidu.lang.isString,baidu.lang.isObject,baidu.lang.isNumber,baidu.lang.isElement,baidu.lang.isArray,baidu.lang.isDate
 *
 * @returns {boolean} 类型判断结果
 */
baidu.lang.isBoolean = function(o) {
    return typeof o === 'boolean';
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/isDate.js
 * author: berg
 * version: 1.0.0
 * date: 2010/10/12 
 */



/**
 * 判断目标参数是否为Date对象
 * @name baidu.lang.isDate
 * @function
 * @grammar baidu.lang.isDate(source)
 * @param {Any} source 目标参数
 * @version 1.3
 * @see baidu.lang.isString,baidu.lang.isObject,baidu.lang.isNumber,baidu.lang.isArray,baidu.lang.isBoolean,baidu.lang.isElement
 *
 * @returns {boolean} 类型判断结果
 */
baidu.lang.isDate = function(o) {
    // return o instanceof Date;
    return {}.toString.call(o) === "[object Date]" && o.toString() !== 'Invalid Date' && !isNaN(o);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/isElement.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/30
 */



/**
 * 判断目标参数是否为Element对象
 * @name baidu.lang.isElement
 * @function
 * @grammar baidu.lang.isElement(source)
 * @param {Any} source 目标参数
 * @meta standard
 * @see baidu.lang.isString,baidu.lang.isObject,baidu.lang.isNumber,baidu.lang.isArray,baidu.lang.isBoolean,baidu.lang.isDate
 *
 * @returns {boolean} 类型判断结果
 */
baidu.lang.isElement = function (source) {
    return !!(source && source.nodeName && source.nodeType == 1);
};

/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/lang/isObject.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/30
 */



/**
 * 判断目标参数是否为Object对象
 * @name baidu.lang.isObject
 * @function
 * @grammar baidu.lang.isObject(source)
 * @param {Any} source 目标参数
 * @shortcut isObject
 * @meta standard
 * @see baidu.lang.isString,baidu.lang.isNumber,baidu.lang.isArray,baidu.lang.isElement,baidu.lang.isBoolean,baidu.lang.isDate
 *
 * @returns {boolean} 类型判断结果
 */
baidu.lang.isObject = function (source) {
    return 'function' == typeof source || !!(source && 'object' == typeof source);
};

// 声明快捷方法
baidu.isObject = baidu.lang.isObject;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 增加自定义模块扩展,默认创建在当前作用域
 * @author erik, berg
 * @name baidu.lang.module
 * @function
 * @grammar baidu.lang.module(name, module[, owner])
 * @param {string} name 需要创建的模块名.
 * @param {Any} module 需要创建的模块对象.
 * @param {Object} [owner] 模块创建的目标环境，默认为window.
 * @remark
 *
 从1.1.1开始，module方法会优先在当前作用域下寻找模块，如果无法找到，则寻找window下的模块

 * @meta standard
 */
baidu.lang.module = function(name, module, owner) {
    var packages = name.split('.'),
        len = packages.length - 1,
        packageName,
        i = 0;

    // 如果没有owner，找当前作用域，如果当前作用域没有此变量，在window创建
    if (!owner) {
        try {
            if (!(new RegExp('^[a-zA-Z_\x24][a-zA-Z0-9_\x24]*\x24')).test(packages[0])) {
                throw '';
            }
            owner = eval(packages[0]);
            i = 1;
        }catch (e) {
            owner = window;
        }
    }

    for (; i < len; i++) {
        packageName = packages[i];
        if (!owner[packageName]) {
            owner[packageName] = {};
        }
        owner = owner[packageName];
    }

    if (!owner[packages[len]]) {
        owner[packages[len]] = module;
    }
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/number/comma.js
 * author: dron, erik, berg
 * version: 1.2.0
 * date: 2010/09/07 
 */



/**
 * 为目标数字添加逗号分隔
 * @name baidu.number.comma
 * @function
 * @grammar baidu.number.comma(source[, length])
 * @param {number} source 需要处理的数字
 * @param {number} [length] 两次逗号之间的数字位数，默认为3位
 *
 * @returns {string} 添加逗号分隔后的字符串
 */
baidu.number.comma = function (source, length) {
    if (!length || length < 1) {
        length = 3;
    }

    source = String(source).split(".");
    source[0] = source[0].replace(new RegExp('(\\d)(?=(\\d{'+length+'})+$)','ig'),"$1,");
    return source.join(".");
};

/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/number/randomInt.js
 * author: berg
 * version: 1.0.0
 * date: 2010/12/14
 */



/**
 * 生成随机整数，范围是[min, max]
 * @name baidu.number.randomInt
 * @function
 * @grammar baidu.number.randomInt(min, max)
 *
 * @param 	{number} min 	随机整数的最小值
 * @param 	{number} max 	随机整数的最大值
 * @return 	{number} 		生成的随机整数
 */
baidu.number.randomInt = function(min, max){
    return Math.floor(Math.random() * (max - min + 1) + min);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */





/**
 * 判断一个对象是不是字面量对象，即判断这个对象是不是由{}或者new Object类似方式创建
 *
 * @name baidu.object.isPlain
 * @function
 * @grammar baidu.object.isPlain(source)
 * @param {Object} source 需要检查的对象
 * @remark
 * 事实上来说，在Javascript语言中，任何判断都一定会有漏洞，因此本方法只针对一些最常用的情况进行了判断
 *
 * @returns {Boolean} 检查结果
 */
baidu.object.isPlain  = function(obj){
    var hasOwnProperty = Object.prototype.hasOwnProperty,
        key;
    if ( !obj ||
        //一般的情况，直接用toString判断
        Object.prototype.toString.call(obj) !== "[object Object]" ||
        //IE下，window/document/document.body/HTMLElement/HTMLCollection/NodeList等DOM对象上一个语句为true
        //isPrototypeOf挂在Object.prototype上的，因此所有的字面量都应该会有这个属性
        //对于在window上挂了isPrototypeOf属性的情况，直接忽略不考虑
        !('isPrototypeOf' in obj)
        ) {
        return false;
    }

    //判断new fun()自定义对象的情况
    //constructor不是继承自原型链的
    //并且原型中有isPrototypeOf方法才是Object
    if ( obj.constructor &&
        !hasOwnProperty.call(obj, "constructor") &&
        !hasOwnProperty.call(obj.constructor.prototype, "isPrototypeOf") ) {
        return false;
    }
    //判断有继承的情况
    //如果有一项是继承过来的，那么一定不是字面量Object
    //OwnProperty会首先被遍历，为了加速遍历过程，直接看最后一项
    for ( key in obj ) {}
    return key === undefined || hasOwnProperty.call( obj, key );
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */





/**
 * 对一个object进行深度拷贝
 *
 * @author berg
 * @name baidu.object.clone
 * @function
 * @grammar baidu.object.clone(source)
 * @param {Object} source 需要进行拷贝的对象
 * @remark
 * 对于Object来说，只拷贝自身成员，不拷贝prototype成员
 * @meta standard
 *
 * @returns {Object} 拷贝后的新对象
 */
baidu.object.clone  = function (source) {
    var result = source, i, len;
    if (!source
        || source instanceof Number
        || source instanceof String
        || source instanceof Boolean) {
        return result;
    } else if (baidu.lang.isArray(source)) {
        result = [];
        var resultLen = 0;
        for (i = 0, len = source.length; i < len; i++) {
            result[resultLen++] = baidu.object.clone(source[i]);
        }
    } else if (baidu.object.isPlain(source)) {
        result = {};
        for (i in source) {
            if (source.hasOwnProperty(i)) {
                result[i] = baidu.object.clone(source[i]);
            }
        }
    }
    return result;
};
/*
 * tangram
 * copyright 2011 baidu inc. all rights reserved.
 *
 * path: baidu/object/isEmpty.js
 * author: leeight
 * version: 1.1.0
 * date: 2011/04/30
 */



/**
 * 检测一个对象是否是空的，需要注意的是：如果污染了Object.prototype或者Array.prototype，那么baidu.object.isEmpty({})或者baidu.object.isEmpty([])可能返回的就是false.
 * @function
 * @grammar baidu.object.isEmpty(obj)
 * @param {Object} obj 需要检测的对象.
 * @return {boolean} 如果是空的对象就返回true.
 */
baidu.object.isEmpty = function(obj) {
    for (var key in obj) {
        return false;
    }

    return true;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/object/keys.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */



/**
 * 获取目标对象的键名列表
 * @name baidu.object.keys
 * @function
 * @grammar baidu.object.keys(source)
 * @param {Object} source 目标对象
 * @see baidu.object.values
 *
 * @returns {Array} 键名列表
 */
baidu.object.keys = function (source) {
    var result = [], resultLen = 0, k;
    for (k in source) {
        if (source.hasOwnProperty(k)) {
            result[resultLen++] = k;
        }
    }
    return result;
};

/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/object/map.js
 * author: berg
 * version: 1.1.0
 * date: 2010/12/14
 */



/**
 * 遍历object中所有元素，将每一个元素应用方法进行转换，返回转换后的新object。
 * @name baidu.object.map
 * @function
 * @grammar baidu.object.map(source, iterator)
 *
 * @param 	{Array}    source   需要遍历的object
 * @param 	{Function} iterator 对每个object元素进行处理的函数
 * @return 	{Array} 			map后的object
 */
baidu.object.map = function (source, iterator) {
    var results = {};
    for (var key in source) {
        if (source.hasOwnProperty(key)) {
            results[key] = iterator(source[key], key);
        }
    }
    return results;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */





/*
 * 默认情况下，所有在源对象上的属性都会被非递归地合并到目标对象上
 * 并且如果目标对象上已有此属性，不会被覆盖
 */
/**
 * 合并源对象的属性到目标对象。
 *
 * @name baidu.object.merge
 * @function
 * @grammar baidu.object.merge(target, source[, opt_options])
 *
 * @param {Function} target 目标对象.
 * @param {Function} source 源对象.
 * @param {Object} opt_options optional merge选项.
 * @config {boolean} overwrite optional 如果为真，源对象属性会覆盖掉目标对象上的已有属性，默认为假.
 * @config {string[]} whiteList optional 白名单，默认为空，如果存在，只有在这里的属性才会被处理.
 * @config {boolean} recursive optional 是否递归合并对象里面的object，默认为否.
 * @return {object} merge后的object.
 * @see baidu.object.extend
 * @author berg
 */
(function() {
    var isPlainObject = function(source) {
        return baidu.lang.isObject(source) && !baidu.lang.isFunction(source);
    };

    function mergeItem(target, source, index, overwrite, recursive) {
        if (source.hasOwnProperty(index)) {
            if (recursive && isPlainObject(target[index])) {
                // 如果需要递归覆盖，就递归调用merge
                baidu.object.merge(
                    target[index],
                    source[index],
                    {
                        'overwrite': overwrite,
                        'recursive': recursive
                    }
                );
            } else if (overwrite || !(index in target)) {
                // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
                target[index] = source[index];
            }
        }
    }

    baidu.object.merge = function(target, source, opt_options) {
        var i = 0,
            options = opt_options || {},
            overwrite = options['overwrite'],
            whiteList = options['whiteList'],
            recursive = options['recursive'],
            len;

        // 只处理在白名单中的属性
        if (whiteList && whiteList.length) {
            len = whiteList.length;
            for (; i < len; ++i) {
                mergeItem(target, source, whiteList[i], overwrite, recursive);
            }
        } else {
            for (i in source) {
                mergeItem(target, source, i, overwrite, recursive);
            }
        }

        return target;
    };
})();
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * @author: meizz
 * @namespace: baidu.page.createStyleSheet
 * @version: 2010-06-12
 */





/**
 * 在页面中创建样式表对象
 * @name baidu.page.createStyleSheet
 * @function
 * @grammar baidu.page.createStyleSheet(options)
 * @param {Object} options 配置信息

 * @param {Document} options.document 指定在哪个document下创建，默认是当前文档
 * @param {String} options.url css文件的URL
 * @param {Number} options.index 在文档里的排序索引（注意，仅IE下有效）
 * @version 1.2
 * @remark
 *  ie 下返回值styleSheet的addRule方法不支持添加逗号分隔的css rule.
 *
 * @see baidu.page.createStyleSheet.StyleSheet
 *
 * @returns {baidu.page.createStyleSheet.StyleSheet} styleSheet对象(注意: 仅IE下,其他浏览器均返回null)
 */
baidu.page.createStyleSheet = function(options){
    var op = options || {},
        doc = op.document || document,
        s;

    if (baidu.browser.ie) {
        //修复ie下会请求一个undefined的bug  berg 2010/08/27 
        if(!op.url)
            op.url = "";
        return doc.createStyleSheet(op.url, op.index);
    } else {
        s = "<style type='text/css'></style>";
        op.url && (s="<link type='text/css' rel='stylesheet' href='"+op.url+"'/>");
        baidu.dom.insertHTML(doc.getElementsByTagName("HEAD")[0],"beforeEnd",s);
        //如果用户传入了url参数，下面访问sheet.rules的时候会报错
        if(op.url){
            return null;
        }

        var sheet = doc.styleSheets[doc.styleSheets.length - 1],
            rules = sheet.rules || sheet.cssRules;
        return {
            self : sheet
            ,rules : sheet.rules || sheet.cssRules
            ,addRule : function(selector, style, i) {
                if (sheet.addRule) {
                    return sheet.addRule(selector, style, i);
                } else if (sheet.insertRule) {
                    isNaN(i) && (i = rules.length);
                    return sheet.insertRule(selector +"{"+ style +"}", i);
                }
            }
            ,removeRule : function(i) {
                if (sheet.removeRule) {
                    sheet.removeRule(i);
                } else if (sheet.deleteRule) {
                    isNaN(i) && (i = 0);
                    sheet.deleteRule(i);
                }
            }
        }
    }
};
/*
 * styleSheet对象 有两个方法 
 *  addRule(selector, style, i)
 *  removeRule(i)
 *  这两个方法已经做了浏览器兼容处理
 * 一个集合
 *  rules
 */
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/page/getHeight.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/03
 */



/**
 * 获取页面高度
 * @name baidu.page.getHeight
 * @function
 * @grammar baidu.page.getHeight()
 * @see baidu.page.getWidth
 *
 * @returns {number} 页面高度
 */
baidu.page.getHeight = function () {
    var doc = document,
        body = doc.body,
        html = doc.documentElement,
        client = doc.compatMode == 'BackCompat' ? body : doc.documentElement;

    return Math.max(html.scrollHeight, body.scrollHeight, client.clientHeight);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/page/getWidth.js
 * author: allstar, erik
 * version: 1.1.0
 * date: 2009/12/03
 */



/**
 * 获取页面宽度
 * @name baidu.page.getWidth
 * @function
 * @grammar baidu.page.getWidth()
 * @see baidu.page.getHeight
 * @meta standard
 * @returns {number} 页面宽度
 */
baidu.page.getWidth = function () {
    var doc = document,
        body = doc.body,
        html = doc.documentElement,
        client = doc.compatMode == 'BackCompat' ? body : doc.documentElement;

    return Math.max(html.scrollWidth, body.scrollWidth, client.clientWidth);
};
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All rights reserved.
 */











/**
 * 延迟加载图片. 默认只加载可见高度以上的图片, 随着窗口滚动加载剩余图片.注意: 仅支持垂直方向.
 * @name baidu.page.lazyLoadImage
 * @function
 * @grammar baidu.page.lazyLoadImage([options])
 * @param {Object} options
 * @param {String} [options.className] 延迟加载的IMG的className,如果不传入该值将延迟加载所有IMG.
 * @param {Number} [options.preloadHeight] 预加载的高度, 可见窗口下该高度内的图片将被加载.
 * @param {String} [options.placeHolder] 占位图url.
 * @param {Function} [options.onlazyload] 延迟加载回调函数,在实际加载时触发.
 * @author rocy
 */
baidu.page.lazyLoadImage = function(options) {
    options = options || {};
    options.preloadHeight = options.preloadHeight || 0;

    baidu.dom.ready(function() {
        var imgs = document.getElementsByTagName('IMG'),
            targets = imgs,
            len = imgs.length,
            i = 0,
            viewOffset = getLoadOffset(),
            srcAttr = 'data-tangram-ori-src',
            target;
        //避免循环中每次都判断className
        if (options.className) {
            targets = [];
            for (; i < len; ++i) {
                if (baidu.dom.hasClass(imgs[i], options.className)) {
                    targets.push(imgs[i]);
                }
            }
        }
        //计算需要加载图片的页面高度
        function getLoadOffset() {
            return baidu.page.getScrollTop() + baidu.page.getViewHeight() + options.preloadHeight;
        }
        //加载可视图片
        for (i = 0, len = targets.length; i < len; ++i) {
            target = targets[i];
            if (baidu.dom.getPosition(target).top > viewOffset) {
                target.setAttribute(srcAttr, target.src);
                options.placeHolder ? target.src = options.placeHolder : target.removeAttribute('src');
            }
        }
        //处理延迟加载
        var loadNeeded = function() {
            var viewOffset = getLoadOffset(),
                imgSrc,
                finished = true,
                i = 0,
                len = targets.length;
            for (; i < len; ++i) {
                target = targets[i];
                imgSrc = target.getAttribute(srcAttr);
                imgSrc && (finished = false);
                if (baidu.dom.getPosition(target).top < viewOffset && imgSrc) {
                    target.src = imgSrc;
                    target.removeAttribute(srcAttr);
                    baidu.lang.isFunction(options.onlazyload) && options.onlazyload(target);
                }
            }
            //当全部图片都已经加载, 去掉事件监听
            finished && baidu.un(window, 'scroll', loadNeeded);
        };

        baidu.on(window, 'scroll', loadNeeded);
    });
};

/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 *
 * path: baidu/page/load.js
 * author: rocy
 * version: 1.0.0
 * date: 2010/11/29
 */









/**
 *
 * 加载一组资源，支持多种格式资源的串/并行加载，支持每个文件有单独回调函数。
 *
 * @name baidu.page.load
 * @function
 * @grammar baidu.page.load(resources[, options])
 *
 * @param {Array} resources               资源描述数组，单个resource含如下属性.
 * @param {String} resources.url           链接地址.
 * @param {String} [resources.type]        取值["css","js","html"]，默认参考文件后缀.
 * @param {String} [resources.requestType] 取值["dom","ajax"]，默认js和css用dom标签，html用ajax.
 * @param {Function} resources.onload        当前resource加载完成的回调函数，若requestType为ajax，参数为xhr(可能失效)，responseText；若requestType为dom，无参数，执行时this为相应dom标签。.
 *
 * @param {Object} [options]               可选参数.
 * @param {Function} [options.onload]        资源全部加载完成的回调函数，无参数。.
 * @param {Boolean} [options.parallel]      是否并行加载，默认为false，串行。.
 * @param {Boolean} [ignoreAllLoaded]       全部加载之后不触发回调事件.主要用于内部实现.
 *
 *
 * @remark
 *  //串行实例
 *  baidu.page.load([
 *      { url : "http://img.baidu.com/js/tangram-1.3.2.js" },
 *      {url : "http://xxx.baidu.com/xpath/logicRequire.js",
 *          onload : fnOnRequireLoaded
 *      },
 *      { url : "http://xxx.baidu.com/xpath/target.js" }
 *  ],{
 *      onload : fnWhenTargetOK
 *  });
 *  //并行实例
 *  baidu.page.load([
 *      {
 *          url : "http://xxx.baidu.com/xpath/template.html",
 *          onload : fnExtractTemplate
 *      },
 *      { url : "http://xxx.baidu.com/xpath/style.css"},
 *      {
 *          url : "http://xxx.baidu.com/xpath/import.php?f=baidu.*",
 *          type : "js"
 *      },
 *      {
 *          url : "http://xxx.baidu.com/xpath/target.js",
 *      },
 *      {
 *          url : "http://xxx.baidu.com/xpath/jsonData.js",
 *          requestType : "ajax",
 *          onload : fnExtractData
 *      }
 *  ],{
 *      parallel : true,
 *      onload : fnWhenEverythingIsOK
 * });
 */
baidu.page.load = function(resources, options, ignoreAllLoaded) {
    //TODO failure, 整体onload能不能每个都调用; resources.charset
    options = options || {};
    var self = baidu.page.load,
        cache = self._cache = self._cache || {},
        loadingCache = self._loadingCache = self._loadingCache || {},
        parallel = options.parallel;

    function allLoadedChecker() {
        for (var i = 0, len = resources.length; i < len; ++i) {
            if (! cache[resources[i].url]) {
                setTimeout(arguments.callee, 10);
                return;
            }
        }
        options.onload();
    };

    function loadByDom(res, callback) {
        var node, loaded, onready;
        switch (res.type.toLowerCase()) {
            case 'css' :
                node = document.createElement('link');
                node.setAttribute('rel', 'stylesheet');
                node.setAttribute('type', 'text/css');
                break;
            case 'js' :
                node = document.createElement('script');
                node.setAttribute('type', 'text/javascript');
                node.setAttribute('charset', res.charset || self.charset);
                break;
            case 'html' :
                node = document.createElement('iframe');
                node.frameBorder = 'none';
                break;
            default :
                return;
        }

        // HTML,JS works on all browsers, CSS works only on IE.
        onready = function() {
            if (!loaded && (!this.readyState ||
                this.readyState === 'loaded' ||
                this.readyState === 'complete')) {
                loaded = true;
                // 防止内存泄露
                baidu.un(node, 'load', onready);
                baidu.un(node, 'readystatechange', onready);
                //node.onload = node.onreadystatechange = null;
                callback.call(window, node);
            }
        };
        baidu.on(node, 'load', onready);
        baidu.on(node, 'readystatechange', onready);
        //CSS has no onload event on firefox and webkit platform, so hack it.
        if (res.type == 'css') {
            (function() {
                //避免重复加载
                if (loaded) return;
                try {
                    node.sheet.cssRule;
                } catch (e) {
                    setTimeout(arguments.callee, 20);
                    return;
                }
                loaded = true;
                callback.call(window, node);
            })();
        }

        node.href = node.src = res.url;
        document.getElementsByTagName('head')[0].appendChild(node);
    }

    //兼容第一个参数直接是资源地址.
    baidu.lang.isString(resources) && (resources = [{url: resources}]);

    //避免递归出错,添加容错.
    if (! (resources && resources.length)) return;

    function loadResources(res) {
        var url = res.url,
            shouldContinue = !!parallel,
            cacheData,
            callback = function(textOrNode) {
                //ajax存入responseText,dom存入节点,用于保证onload的正确执行.
                cache[res.url] = textOrNode;
                delete loadingCache[res.url];

                if (baidu.lang.isFunction(res.onload)) {
                    //若返回false, 则停止接下来的加载.
                    if (false === res.onload.call(window, textOrNode)) {
                        return;
                    }
                }
                //串行时递归执行
                !parallel && self(resources.slice(1), options, true);
                if ((! ignoreAllLoaded) && baidu.lang.isFunction(options.onload)) {
                    allLoadedChecker();
                }
            };
        //默认用后缀名, 并防止后缀名大写
        res.type = res.type || url.substr(url.lastIndexOf('.') + 1);
        //默认html格式用ajax请求,其他都使用dom标签方式请求.
        res.requestType = res.requestType || (res.type == 'html' ? 'ajax' : 'dom');

        if (cacheData = cache[res.url]) {
            callback(cacheData);
            return shouldContinue;
        }
        if (!options.refresh && loadingCache[res.url]) {
            setTimeout(function() {loadResources(res);}, 10);
            return shouldContinue;
        }
        loadingCache[res.url] = true;
        if (res.requestType.toLowerCase() == 'dom') {
            loadByDom(res, callback);
        }else {//ajax
            baidu.ajax.get(res.url, function(xhr, responseText) {callback(responseText);});
        }
        //串行模式,通过callback方法执行后续
        return shouldContinue;
    };

    baidu.each(resources, loadResources);
};
//默认编码设置为UTF8
baidu.page.load.charset = 'UTF8';
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/page/loadCssFile.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/20
 */



/**
 * 动态在页面上加载一个外部css文件
 * @name baidu.page.loadCssFile
 * @function
 * @grammar baidu.page.loadCssFile(path)
 * @param {string} path css文件路径
 * @see baidu.page.loadJsFile
 */

baidu.page.loadCssFile = function (path) {
    var element = document.createElement("link");

    element.setAttribute("rel", "stylesheet");
    element.setAttribute("type", "text/css");
    element.setAttribute("href", path);

    document.getElementsByTagName("head")[0].appendChild(element);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/page/loadJsFile.js
 * author: allstar
 * version: 1.1.0
 * date: 2009/11/20
 */



/**
 * 动态在页面上加载一个外部js文件
 * @name baidu.page.loadJsFile
 * @function
 * @grammar baidu.page.loadJsFile(path)
 * @param {string} path js文件路径
 * @see baidu.page.loadCssFile
 */
baidu.page.loadJsFile = function (path) {
    var element = document.createElement('script');

    element.setAttribute('type', 'text/javascript');
    element.setAttribute('src', path);
    element.setAttribute('defer', 'defer');

    document.getElementsByTagName("head")[0].appendChild(element);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * @namespace baidu.platform 判断平台类型和特性的属性。
 * @author jz
 */
baidu.platform = baidu.platform || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 判断是否为android平台
 * @property android 是否为android平台
 * @grammar baidu.platform.android
 * @meta standard
 * @see baidu.platform.x11,baidu.platform.windows,baidu.platform.macintosh,baidu.platform.iphone,baidu.platform.ipad
 * @return {Boolean} 布尔值
 * @author jz
 */
baidu.platform.isAndroid = /android/i.test(navigator.userAgent);
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 判断是否为ipad平台
 * @property ipad 是否为ipad平台
 * @grammar baidu.platform.ipad
 * @meta standard
 * @see baidu.platform.x11,baidu.platform.windows,baidu.platform.macintosh,baidu.platform.iphone,baidu.platform.android
 * @return {Boolean} 布尔值
 * @author jz
 */
baidu.platform.isIpad = /ipad/i.test(navigator.userAgent);
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 判断是否为iphone平台
 * @property iphone 是否为iphone平台
 * @grammar baidu.platform.iphone
 * @meta standard
 * @see baidu.platform.x11,baidu.platform.windows,baidu.platform.macintosh,baidu.platform.ipad,baidu.platform.android
 * @return {Boolean} 布尔值
 * @author jz
 */
baidu.platform.isIphone = /iphone/i.test(navigator.userAgent);
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 判断是否为macintosh平台
 * @property macintosh 是否为macintosh平台
 * @grammar baidu.platform.macintosh
 * @meta standard
 * @see baidu.platform.x11,baidu.platform.windows,baidu.platform.iphone,baidu.platform.ipad,baidu.platform.android
 * @return {Boolean} 布尔值
 * @author jz
 */
baidu.platform.isMacintosh = /macintosh/i.test(navigator.userAgent);
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 判断是否为windows平台
 * @property windows 是否为windows平台
 * @grammar baidu.platform.windows
 * @meta standard
 * @see baidu.platform.x11,baidu.platform.macintosh,baidu.platform.iphone,baidu.platform.ipad,baidu.platform.android
 * @return {Boolean} 布尔值
 * @author jz
 */
baidu.platform.isWindows = /windows/i.test(navigator.userAgent);
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 判断是否为x11平台
 * @property x11 是否为x11平台
 * @grammar baidu.platform.x11
 * @meta standard
 * @see baidu.platform.windows,baidu.platform.macintosh,baidu.platform.iphone,baidu.platform.ipad,baidu.platform.android
 * @return {Boolean} 布尔值
 * @author jz
 */
baidu.platform.isX11 = /x11/i.test(navigator.userAgent);
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/sio.js
 * author: erik
 * version: 1.1.0
 * date: 2009/12/16
 */


/**
 * @namespace baidu.sio 使用动态script标签请求服务器资源，包括由服务器端的回调和浏览器端的回调。
 */
baidu.sio = baidu.sio || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 *
 * @param {HTMLElement} src script节点
 * @param {String} url script节点的地址
 * @param {String} [charset] 编码
 */
baidu.sio._createScriptTag = function(scr, url, charset){
    scr.setAttribute('type', 'text/javascript');
    charset && scr.setAttribute('charset', charset);
    scr.setAttribute('src', url);
    document.getElementsByTagName('head')[0].appendChild(scr);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 删除script的属性，再删除script标签，以解决修复内存泄漏的问题
 *
 * @param {HTMLElement} src script节点
 */
baidu.sio._removeScriptTag = function(scr){
    if (scr.clearAttributes) {
        scr.clearAttributes();
    } else {
        for (var attr in scr) {
            if (scr.hasOwnProperty(attr)) {
                delete scr[attr];
            }
        }
    }
    if(scr && scr.parentNode){
        scr.parentNode.removeChild(scr);
    }
    scr = null;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */





/**
 * 通过script标签加载数据，加载完成由浏览器端触发回调
 * @name baidu.sio.callByBrowser
 * @function
 * @grammar baidu.sio.callByBrowser(url, opt_callback, opt_options)
 * @param {string} url 加载数据的url
 * @param {Function|string} opt_callback 数据加载结束时调用的函数或函数名
 * @param {Object} opt_options 其他可选项
 * @config {String} [charset] script的字符集
 * @config {Integer} [timeOut] 超时时间，超过这个时间将不再响应本请求，并触发onfailure函数
 * @config {Function} [onfailure] timeOut设定后才生效，到达超时时间时触发本函数
 * @remark
 * 1、与callByServer不同，callback参数只支持Function类型，不支持string。
 * 2、如果请求了一个不存在的页面，callback函数在IE/opera下也会被调用，因此使用者需要在onsuccess函数中判断数据是否正确加载。
 * @meta standard
 * @see baidu.sio.callByServer
 */
baidu.sio.callByBrowser = function (url, opt_callback, opt_options) {
    var scr = document.createElement("SCRIPT"),
        scriptLoaded = 0,
        options = opt_options || {},
        charset = options['charset'],
        callback = opt_callback || function(){},
        timeOut = options['timeOut'] || 0,
        timer;

    // IE和opera支持onreadystatechange
    // safari、chrome、opera支持onload
    scr.onload = scr.onreadystatechange = function () {
        // 避免opera下的多次调用
        if (scriptLoaded) {
            return;
        }

        var readyState = scr.readyState;
        if ('undefined' == typeof readyState
            || readyState == "loaded"
            || readyState == "complete") {
            scriptLoaded = 1;
            try {
                callback();
                clearTimeout(timer);
            } finally {
                scr.onload = scr.onreadystatechange = null;
                baidu.sio._removeScriptTag(scr);
            }
        }
    };

    if( timeOut ){
        timer = setTimeout(function(){
            scr.onload = scr.onreadystatechange = null;
            baidu.sio._removeScriptTag(scr);
            options.onfailure && options.onfailure();
        }, timeOut);
    }

    baidu.sio._createScriptTag(scr, url, charset);
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */







/**
 * 通过script标签加载数据，加载完成由服务器端触发回调
 * @name baidu.sio.callByServer
 * @function
 * @grammar baidu.sio.callByServer(url, callback[, opt_options])
 * @param {string} url 加载数据的url.
 * @param {Function|string} callback 服务器端调用的函数或函数名。如果没有指定本参数，将在URL中寻找options['queryField']做为callback的方法名.
 * @param {Object} opt_options 加载数据时的选项.
 * @config {string} [charset] script的字符集
 * @config {string} [queryField] 服务器端callback请求字段名，默认为callback
 * @config {Integer} [timeOut] 超时时间(单位：ms)，超过这个时间将不再响应本请求，并触发onfailure函数
 * @config {Function} [onfailure] timeOut设定后才生效，到达超时时间时触发本函数
 * @remark
 * 如果url中已经包含key为“options['queryField']”的query项，将会被替换成callback中参数传递或自动生成的函数名。
 * @meta standard
 * @see baidu.sio.callByBrowser
 */
baidu.sio.callByServer = function(url, callback, opt_options) {
    var scr = document.createElement('SCRIPT'),
        prefix = 'bd__cbs__',
        callbackName,
        callbackImpl,
        options = opt_options || {},
        charset = options['charset'],
        queryField = options['queryField'] || 'callback',
        timeOut = options['timeOut'] || 0,
        timer,
        reg = new RegExp('(\\?|&)' + queryField + '=([^&]*)'),
        matches;

    if (baidu.lang.isFunction(callback)) {
        callbackName = prefix + Math.floor(Math.random() * 2147483648).toString(36);
        window[callbackName] = getCallBack(0);
    } else if(baidu.lang.isString(callback)){
        // 如果callback是一个字符串的话，就需要保证url是唯一的，不要去改变它
        // TODO 当调用了callback之后，无法删除动态创建的script标签
        callbackName = callback;
    } else {
        if (matches = reg.exec(url)) {
            callbackName = matches[2];
        }
    }

    if( timeOut ){
        timer = setTimeout(getCallBack(1), timeOut);
    }

    //如果用户在URL中已有callback，用参数传入的callback替换之
    url = url.replace(reg, '\x241' + queryField + '=' + callbackName);

    if (url.search(reg) < 0) {
        url += (url.indexOf('?') < 0 ? '?' : '&') + queryField + '=' + callbackName;
    }
    baidu.sio._createScriptTag(scr, url, charset);

    /*
     * 返回一个函数，用于立即（挂在window上）或者超时（挂在setTimeout中）时执行
     */
    function getCallBack(onTimeOut){
        /*global callbackName, callback, scr, options;*/
        return function(){
            try {
                if( onTimeOut ){
                    options.onfailure && options.onfailure();
                }else{
                    callback.apply(window, arguments);
                    clearTimeout(timer);
                }
                window[callbackName] = null;
                delete window[callbackName];
            } catch (exception) {
                // ignore the exception
            } finally {
                baidu.sio._removeScriptTag(scr);
            }
        }
    }
};
/*
 * Tangram
 * Copyright 2011 Baidu Inc. All rights reserved.
 */



/**
 * 通过请求一个图片的方式令服务器存储一条日志
 * @function
 * @grammar baidu.sio.log(url)
 * @param {string} url 要发送的地址.
 * @author: int08h,leeight
 */
baidu.sio.log = function(url) {
    var img = new Image(),
        key = 'tangram_sio_log_' + Math.floor(Math.random() *
            2147483648).toString(36);

    // 这里一定要挂在window下
    // 在IE中，如果没挂在window下，这个img变量又正好被GC的话，img的请求会abort
    // 导致服务器收不到日志
    window[key] = img;

    img.onload = img.onerror = img.onabort = function() {
        // 下面这句非常重要
        // 如果这个img很不幸正好加载了一个存在的资源，又是个gif动画
        // 则在gif动画播放过程中，img会多次触发onload
        // 因此一定要清空
        img.onload = img.onerror = img.onabort = null;

        window[key] = null;

        // 下面这句非常重要
        // new Image创建的是DOM，DOM的事件中形成闭包环引用DOM是典型的内存泄露
        // 因此这里一定要置为null
        img = null;
    };

    // 一定要在注册了事件之后再设置src
    // 不然如果图片是读缓存的话，会错过事件处理
    // 最后，对于url最好是添加客户端时间来防止缓存
    // 同时服务器也配合一下传递Cache-Control: no-cache;
    img.src = url;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string/decodeHTML.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */



/**
 * 对目标字符串进行html解码
 * @name baidu.string.decodeHTML
 * @function
 * @grammar baidu.string.decodeHTML(source)
 * @param {string} source 目标字符串
 * @shortcut decodeHTML
 * @meta standard
 * @see baidu.string.encodeHTML
 *
 * @returns {string} html解码后的字符串
 */
baidu.string.decodeHTML = function (source) {
    var str = String(source)
        .replace(/&quot;/g,'"')
        .replace(/&lt;/g,'<')
        .replace(/&gt;/g,'>')
        .replace(/&amp;/g, "&");
    //处理转义的中文和实体字符
    return str.replace(/&#([\d]+);/g, function(_0, _1){
        return String.fromCharCode(parseInt(_1, 10));
    });
};

baidu.decodeHTML = baidu.string.decodeHTML;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string/encodeHTML.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */



/**
 * 对目标字符串进行html编码
 * @name baidu.string.encodeHTML
 * @function
 * @grammar baidu.string.encodeHTML(source)
 * @param {string} source 目标字符串
 * @remark
 * 编码字符有5个：&<>"'
 * @shortcut encodeHTML
 * @meta standard
 * @see baidu.string.decodeHTML
 *
 * @returns {string} html编码后的字符串
 */
baidu.string.encodeHTML = function (source) {
    return String(source)
        .replace(/&/g,'&amp;')
        .replace(/</g,'&lt;')
        .replace(/>/g,'&gt;')
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#39;");
};

baidu.encodeHTML = baidu.string.encodeHTML;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string/filterFormat.js
 * author: rocy
 * version: 1.1.2
 * date: 2010/06/10
 */



/**
 * 对目标字符串进行格式化,支持过滤
 * @name baidu.string.filterFormat
 * @function
 * @grammar baidu.string.filterFormat(source, opts)
 * @param {string} source 目标字符串
 * @param {Object|string...} opts 提供相应数据的对象
 * @version 1.2
 * @remark
 *
 在 baidu.string.format的基础上,增加了过滤功能. 目标字符串中的#{url|escapeUrl},<br/>
 会替换成baidu.string.filterFormat["escapeUrl"](opts.url);<br/>
 过滤函数需要之前挂载在baidu.string.filterFormat属性中.

 * @see baidu.string.format,baidu.string.filterFormat.escapeJs,baidu.string.filterFormat.escapeString,baidu.string.filterFormat.toInt
 * @returns {string} 格式化后的字符串
 */
baidu.string.filterFormat = function (source, opts) {
    var data = Array.prototype.slice.call(arguments,1), toString = Object.prototype.toString;
    if(data.length){
        data = data.length == 1 ?
            /* ie 下 Object.prototype.toString.call(null) == '[object Object]' */
            (opts !== null && (/\[object Array\]|\[object Object\]/.test(toString.call(opts))) ? opts : data)
            : data;
        return source.replace(/#\{(.+?)\}/g, function (match, key){
            var filters, replacer, i, len, func;
            if(!data) return '';
            filters = key.split("|");
            replacer = data[filters[0]];
            // chrome 下 typeof /a/ == 'function'
            if('[object Function]' == toString.call(replacer)){
                replacer = replacer(filters[0]/*key*/);
            }
            for(i=1,len = filters.length; i< len; ++i){
                func = baidu.string.filterFormat[filters[i]];
                if('[object Function]' == toString.call(func)){
                    replacer = func(replacer);
                }
            }
            return ( ('undefined' == typeof replacer || replacer === null)? '' : replacer);
        });
    }
    return source;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string/filterFormat/escapeJs.js
 * author: rocy
 * version: 1.1.2
 * date: 2010/06/12
 */


/**
 * 对js片段的字符做安全转义,编码低于255的都将转换成\x加16进制数
 * @name baidu.string.filterFormat.escapeJs
 * @function
 * @grammar baidu.string.filterFormat.escapeJs(source)
 * @param {String} source 待转义字符串
 *
 * @see baidu.string.filterFormat,baidu.string.filterFormat.escapeString,baidu.string.filterFormat.toInt
 * @version 1.2
 * @return {String} 转义之后的字符串
 */
baidu.string.filterFormat.escapeJs = function(str){
    if(!str || 'string' != typeof str) return str;
    var i,len,charCode,ret = [];
    for(i=0, len=str.length; i < len; ++i){
        charCode = str.charCodeAt(i);
        if(charCode > 255){
            ret.push(str.charAt(i));
        } else{
            ret.push('\\x' + charCode.toString(16));
        }
    }
    return ret.join('');
};
baidu.string.filterFormat.js = baidu.string.filterFormat.escapeJs;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string/filterFormat/escapeString.js
 * author: rocy
 * version: 1.1.2
 * date: 2010/06/12
 */


/**
 * 对字符串做安全转义,转义字符包括: 单引号,双引号,左右小括号,斜杠,反斜杠,上引号.
 * @name baidu.string.filterFormat.escapeString
 * @function
 * @grammar baidu.string.filterFormat.escapeString(source)
 * @param {String} source 待转义字符串
 *
 * @see baidu.string.filterFormat,baidu.string.filterFormat.escapeJs,baidu.string.filterFormat.toInt
 * @version 1.2
 * @return {String} 转义之后的字符串
 */
baidu.string.filterFormat.escapeString = function(str){
    if(!str || 'string' != typeof str) return str;
    return str.replace(/["'<>\\\/`]/g, function($0){
        return '&#'+ $0.charCodeAt(0) +';';
    });
};

baidu.string.filterFormat.e = baidu.string.filterFormat.escapeString;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string/filterFormat/toInt.js
 * author: rocy
 * version: 1.1.2
 * date: 2010/06/12
 */


/**
 * 对数字做安全转义,确保是十进制数字;否则返回0.
 * @name baidu.string.filterFormat.toInt
 * @function
 * @grammar baidu.string.filterFormat.toInt(source)
 * @param {String} source 待转义字符串
 *
 * @see baidu.string.filterFormat,baidu.string.filterFormat.escapeJs,baidu.string.filterFormat.escapeString
 * @version 1.2
 * @return {Number} 转义之后的数字
 */
baidu.string.filterFormat.toInt = function(str){
    return parseInt(str, 10) || 0;
};
baidu.string.filterFormat.i = baidu.string.filterFormat.toInt;
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string/format.js
 * author: dron, erik
 * version: 1.1.0
 * date: 2009/11/30
 */



/**
 * 对目标字符串进行格式化
 * @name baidu.string.format
 * @function
 * @grammar baidu.string.format(source, opts)
 * @param {string} source 目标字符串
 * @param {Object|string...} opts 提供相应数据的对象或多个字符串
 * @remark
 *
 opts参数为“Object”时，替换目标字符串中的#{property name}部分。<br>
 opts为“string...”时，替换目标字符串中的#{0}、#{1}...部分。

 * @shortcut format
 * @meta standard
 *
 * @returns {string} 格式化后的字符串
 */
baidu.string.format = function (source, opts) {
    source = String(source);
    var data = Array.prototype.slice.call(arguments,1), toString = Object.prototype.toString;
    if(data.length){
        data = data.length == 1 ?
            /* ie 下 Object.prototype.toString.call(null) == '[object Object]' */
            (opts !== null && (/\[object Array\]|\[object Object\]/.test(toString.call(opts))) ? opts : data)
            : data;
        return source.replace(/#\{(.+?)\}/g, function (match, key){
            var replacer = data[key];
            // chrome 下 typeof /a/ == 'function'
            if('[object Function]' == toString.call(replacer)){
                replacer = replacer(key);
            }
            return ('undefined' == typeof replacer ? '' : replacer);
        });
    }
    return source;
};

// 声明快捷方法
baidu.format = baidu.string.format;
/*
 * Tangram
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * @author: meizz
 * @namespace: baidu.string.formatColor
 * @version: 2010-01-23
 */



/**
 * 将各种浏览器里的颜色值转换成 #RRGGBB 的格式
 * @name baidu.string.formatColor
 * @function
 * @grammar baidu.string.formatColor(color)
 * @param {string} color 颜色值字符串
 * @version 1.3
 *
 * @returns {string} #RRGGBB格式的字符串或空
 */
(function(){
    // 将正则表达式预创建，可提高效率
    var reg1 = /^\#[\da-f]{6}$/i,
        reg2 = /^rgb\((\d+), (\d+), (\d+)\)$/,
        keyword = {
            black: '#000000',
            silver: '#c0c0c0',
            gray: '#808080',
            white: '#ffffff',
            maroon: '#800000',
            red: '#ff0000',
            purple: '#800080',
            fuchsia: '#ff00ff',
            green: '#008000',
            lime: '#00ff00',
            olive: '#808000',
            yellow: '#ffff0',
            navy: '#000080',
            blue: '#0000ff',
            teal: '#008080',
            aqua: '#00ffff'
        };

    baidu.string.formatColor = function(color) {
        if(reg1.test(color)) {
            // #RRGGBB 直接返回
            return color;
        } else if(reg2.test(color)) {
            // 非IE中的 rgb(0, 0, 0)
            for (var s, i=1, color="#"; i<4; i++) {
                s = parseInt(RegExp["\x24"+ i]).toString(16);
                color += ("00"+ s).substr(s.length);
            }
            return color;
        } else if(/^\#[\da-f]{3}$/.test(color)) {
            // 简写的颜色值: #F00
            var s1 = color.charAt(1),
                s2 = color.charAt(2),
                s3 = color.charAt(3);
            return "#"+ s1 + s1 + s2 + s2 + s3 + s3;
        }else if(keyword[color])
            return keyword[color];

        return "";
    };
})();

/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string/getByteLength.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */



/**
 * 获取目标字符串在gbk编码下的字节长度
 * @name baidu.string.getByteLength
 * @function
 * @grammar baidu.string.getByteLength(source)
 * @param {string} source 目标字符串
 * @remark
 * 获取字符在gbk编码下的字节长度, 实现原理是认为大于127的就一定是双字节。如果字符超出gbk编码范围, 则这个计算不准确
 * @meta standard
 * @see baidu.string.subByte
 *
 * @returns {number} 字节长度
 */
baidu.string.getByteLength = function (source) {
    return String(source).replace(/[^\x00-\xff]/g, "ci").length;
};
/*
 * tangram
 * copyright 2011 baidu inc. all rights reserved.
 *
 * path: baidu/string/stripTags.js
 * author: leeight
 * version: 1.1.0
 * date: 2011/04/30
 */



/**
 * 去掉字符串中的html标签
 * @function
 * @grammar baidu.string.stripTags(source)
 * @param {string} source 要处理的字符串.
 * @return {String}
 */
baidu.string.stripTags = function(source) {
    return String(source || '').replace(/<[^>]+>/g, '');
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string/subByte.js
 * author: dron, erik, berg
 * version: 1.2
 * date: 2010-06-30
 */



/**
 * 对目标字符串按gbk编码截取字节长度
 * @name baidu.string.subByte
 * @function
 * @grammar baidu.string.subByte(source, length)
 * @param {string} source 目标字符串
 * @param {number} length 需要截取的字节长度
 * @param {string} [tail] 追加字符串,可选.
 * @remark
 * 截取过程中，遇到半个汉字时，向下取整。
 * @see baidu.string.getByteLength
 *
 * @returns {string} 字符串截取结果
 */
baidu.string.subByte = function (source, length, tail) {
    source = String(source);
    tail = tail || '';
    if (length < 0 || baidu.string.getByteLength(source) <= length) {
        return source + tail;
    }

    //thanks 加宽提供优化方法
    source = source.substr(0,length).replace(/([^\x00-\xff])/g,"\x241 ")//双字节字符替换成两个
        .substr(0,length)//截取长度
        .replace(/[^\x00-\xff]$/,"")//去掉临界双字节字符
        .replace(/([^\x00-\xff]) /g,"\x241");//还原
    return source + tail;

};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string/toHalfWidth.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/15
 */


/**
 * 将目标字符串中常见全角字符转换成半角字符
 * @name baidu.string.toHalfWidth
 * @function
 * @grammar baidu.string.toHalfWidth(source)
 * @param {string} source 目标字符串
 * @remark
 *
 将全角的字符转成半角, 将“&amp;#xFF01;”至“&amp;#xFF5E;”范围的全角转成“&amp;#33;”至“&amp;#126;”, 还包括全角空格包括常见的全角数字/空格/字母, 用于需要同时支持全半角的转换, 具体转换列表如下("空格"未列出)：<br><br>

 ！ => !<br>
 ＂ => "<br>
 ＃ => #<br>
 ＄ => $<br>
 ％ => %<br>
 ＆ => &<br>
 ＇ => '<br>
 （ => (<br>
 ） => )<br>
 ＊ => *<br>
 ＋ => +<br>
 ， => ,<br>
 － => -<br>
 ． => .<br>
 ／ => /<br>
 ０ => 0<br>
 １ => 1<br>
 ２ => 2<br>
 ３ => 3<br>
 ４ => 4<br>
 ５ => 5<br>
 ６ => 6<br>
 ７ => 7<br>
 ８ => 8<br>
 ９ => 9<br>
 ： => :<br>
 ； => ;<br>
 ＜ => <<br>
 ＝ => =<br>
 ＞ => ><br>
 ？ => ?<br>
 ＠ => @<br>
 Ａ => A<br>
 Ｂ => B<br>
 Ｃ => C<br>
 Ｄ => D<br>
 Ｅ => E<br>
 Ｆ => F<br>
 Ｇ => G<br>
 Ｈ => H<br>
 Ｉ => I<br>
 Ｊ => J<br>
 Ｋ => K<br>
 Ｌ => L<br>
 Ｍ => M<br>
 Ｎ => N<br>
 Ｏ => O<br>
 Ｐ => P<br>
 Ｑ => Q<br>
 Ｒ => R<br>
 Ｓ => S<br>
 Ｔ => T<br>
 Ｕ => U<br>
 Ｖ => V<br>
 Ｗ => W<br>
 Ｘ => X<br>
 Ｙ => Y<br>
 Ｚ => Z<br>
 ［ => [<br>
 ＼ => \<br>
 ］ => ]<br>
 ＾ => ^<br>
 ＿ => _<br>
 ｀ => `<br>
 ａ => a<br>
 ｂ => b<br>
 ｃ => c<br>
 ｄ => d<br>
 ｅ => e<br>
 ｆ => f<br>
 ｇ => g<br>
 ｈ => h<br>
 ｉ => i<br>
 ｊ => j<br>
 ｋ => k<br>
 ｌ => l<br>
 ｍ => m<br>
 ｎ => n<br>
 ｏ => o<br>
 ｐ => p<br>
 ｑ => q<br>
 ｒ => r<br>
 ｓ => s<br>
 ｔ => t<br>
 ｕ => u<br>
 ｖ => v<br>
 ｗ => w<br>
 ｘ => x<br>
 ｙ => y<br>
 ｚ => z<br>
 ｛ => {<br>
｜ => |<br>
｝ => }<br>
 ～ => ~<br>

 *
 * @returns {string} 转换后的字符串
 */

baidu.string.toHalfWidth = function (source) {
    return String(source).replace(/[\uFF01-\uFF5E]/g,
        function(c){
            return String.fromCharCode(c.charCodeAt(0) - 65248);
        }).replace(/\u3000/g," ");
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/string/wbr.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/30
 */



/**
 * 为目标字符串添加wbr软换行
 * @name baidu.string.wbr
 * @function
 * @grammar baidu.string.wbr(source)
 * @param {string} source 目标字符串
 * @remark
 *
 1.支持html标签、属性以及字符实体。<br>
 2.任意字符中间都会插入wbr标签，对于过长的文本，会造成dom节点元素增多，占用浏览器资源。
 3.在opera下，浏览器默认css不会为wbr加上样式，导致没有换行效果，可以在css中加上 wbr:after { content: "\00200B" } 解决此问题

 *
 * @returns {string} 添加软换行后的字符串
 */
baidu.string.wbr = function (source) {
    return String(source)
        .replace(/(?:<[^>]+>)|(?:&#?[0-9a-z]{2,6};)|(.{1})/gi, '$&<wbr>')
        .replace(/><wbr>/g, '>');
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/swf.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/16
 */


/**
 * @namespace baidu.swf 操作flash对象的方法，包括创建flash对象、获取flash对象以及判断flash插件的版本号。
 */
baidu.swf = baidu.swf || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/swf/getMovie.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/16
 */





/**
 * 获得flash对象的实例
 * @name baidu.swf.getMovie
 * @function
 * @grammar baidu.swf.getMovie(name)
 * @param {string} name flash对象的名称
 * @see baidu.swf.create
 * @meta standard
 * @returns {HTMLElement} flash对象的实例
 */
baidu.swf.getMovie = function (name) {
    //ie9下, Object标签和embed标签嵌套的方式生成flash时,
    //会导致document[name]多返回一个Object元素,而起作用的只有embed标签
    var movie = document[name], ret;
    return baidu.browser.ie == 9 ?
        movie && movie.length ?
            (ret = baidu.array.remove(baidu.lang.toArray(movie),function(item){
                return item.tagName.toLowerCase() != "embed";
            })).length == 1 ? ret[0] : ret
            : movie
        : movie || window[name];
};
/*
 * Tangram
 * Copyright 2011 Baidu Inc. All rights reserved.
 */






/**
 * Js 调用 Flash方法的代理类.
 * @function
 * @name baidu.swf.Proxy
 * @grammar new baidu.swf.Proxy(id, property, [, loadedHandler])
 * @param {string} id Flash的元素id.object标签id, embed标签name.
 * @param {string} property Flash的方法或者属性名称，用来检测Flash是否初始化好了.
 * @param {Function} loadedHandler 初始化之后的回调函数.
 * @remark Flash对应的DOM元素必须已经存在, 否则抛错. 可以使用baidu.swf.create预先创建Flash对应的DOM元素.
 * @author liyubei@baidu.com (leeight)
 */
baidu.swf.Proxy = function(id, property, loadedHandler) {
    /**
     * 页面上的Flash对象
     * @type {HTMLElement}
     */
    var me = this,
        flash = this._flash = baidu.swf.getMovie(id),
        timer;
    if (! property) {
        return this;
    }
    timer = setInterval(function() {
        try {
            /** @preserveTry */
            if (flash[property]) {
                me._initialized = true;
                clearInterval(timer);
                if (loadedHandler) {
                    loadedHandler();
                }
            }
        } catch (e) {
        }
    }, 100);
};
/**
 * 获取flash对象.
 * @return {HTMLElement} Flash对象.
 */
baidu.swf.Proxy.prototype.getFlash = function() {
    return this._flash;
};
/**
 * 判断Flash是否初始化完成,可以与js进行交互.
 */
baidu.swf.Proxy.prototype.isReady = function() {
    return !! this._initialized;
};
/**
 * 调用Flash中的某个方法
 * @param {string} methodName 方法名.
 * @param {...*} var_args 方法的参数.
 */
baidu.swf.Proxy.prototype.call = function(methodName, var_args) {
    try {
        var flash = this.getFlash(),
            args = Array.prototype.slice.call(arguments);

        args.shift();
        if (flash[methodName]) {
            flash[methodName].apply(flash, args);
        }
    } catch (e) {
    }
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/swf/version.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/17
 */



/**
 * 浏览器支持的flash插件版本
 * @property version 浏览器支持的flash插件版本
 * @grammar baidu.swf.version
 * @return {String} 版本号
 * @meta standard
 */
baidu.swf.version = (function () {
    var n = navigator;
    if (n.plugins && n.mimeTypes.length) {
        var plugin = n.plugins["Shockwave Flash"];
        if (plugin && plugin.description) {
            return plugin.description
                .replace(/([a-zA-Z]|\s)+/, "")
                .replace(/(\s)+r/, ".") + ".0";
        }
    } else if (window.ActiveXObject && !window.opera) {
        for (var i = 12; i >= 2; i--) {
            try {
                var c = new ActiveXObject('ShockwaveFlash.ShockwaveFlash.' + i);
                if (c) {
                    var version = c.GetVariable("$version");
                    return version.replace(/WIN/g,'').replace(/,/g,'.');
                }
            } catch(e) {}
        }
    }
})();
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/swf/createHTML.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/17
 */




/**
 * 创建flash对象的html字符串
 * @name baidu.swf.createHTML
 * @function
 * @grammar baidu.swf.createHTML(options)
 *
 * @param {Object} 	options 					创建flash的选项参数
 * @param {string} 	options.id 					要创建的flash的标识
 * @param {string} 	options.url 				flash文件的url
 * @param {String} 	options.errorMessage 		未安装flash player或flash player版本号过低时的提示
 * @param {string} 	options.ver 				最低需要的flash player版本号
 * @param {string} 	options.width 				flash的宽度
 * @param {string} 	options.height 				flash的高度
 * @param {string} 	options.align 				flash的对齐方式，允许值：middle/left/right/top/bottom
 * @param {string} 	options.base 				设置用于解析swf文件中的所有相对路径语句的基本目录或URL
 * @param {string} 	options.bgcolor 			swf文件的背景色
 * @param {string} 	options.salign 				设置缩放的swf文件在由width和height设置定义的区域内的位置。允许值：l/r/t/b/tl/tr/bl/br
 * @param {boolean} options.menu 				是否显示右键菜单，允许值：true/false
 * @param {boolean} options.loop 				播放到最后一帧时是否重新播放，允许值： true/false
 * @param {boolean} options.play 				flash是否在浏览器加载时就开始播放。允许值：true/false
 * @param {string} 	options.quality 			设置flash播放的画质，允许值：low/medium/high/autolow/autohigh/best
 * @param {string} 	options.scale 				设置flash内容如何缩放来适应设置的宽高。允许值：showall/noborder/exactfit
 * @param {string} 	options.wmode 				设置flash的显示模式。允许值：window/opaque/transparent
 * @param {string} 	options.allowscriptaccess 	设置flash与页面的通信权限。允许值：always/never/sameDomain
 * @param {string} 	options.allownetworking 	设置swf文件中允许使用的网络API。允许值：all/internal/none
 * @param {boolean} options.allowfullscreen 	是否允许flash全屏。允许值：true/false
 * @param {boolean} options.seamlesstabbing 	允许设置执行无缝跳格，从而使用户能跳出flash应用程序。该参数只能在安装Flash7及更高版本的Windows中使用。允许值：true/false
 * @param {boolean} options.devicefont 			设置静态文本对象是否以设备字体呈现。允许值：true/false
 * @param {boolean} options.swliveconnect 		第一次加载flash时浏览器是否应启动Java。允许值：true/false
 * @param {Object} 	options.vars 				要传递给flash的参数，支持JSON或string类型。
 *
 * @see baidu.swf.create
 * @meta standard
 * @returns {string} flash对象的html字符串
 */
baidu.swf.createHTML = function (options) {
    options = options || {};
    var version = baidu.swf.version,
        needVersion = options['ver'] || '6.0.0',
        vUnit1, vUnit2, i, k, len, item, tmpOpt = {},
        encodeHTML = baidu.string.encodeHTML;

    // 复制options，避免修改原对象
    for (k in options) {
        tmpOpt[k] = options[k];
    }
    options = tmpOpt;

    // 浏览器支持的flash插件版本判断
    if (version) {
        version = version.split('.');
        needVersion = needVersion.split('.');
        for (i = 0; i < 3; i++) {
            vUnit1 = parseInt(version[i], 10);
            vUnit2 = parseInt(needVersion[i], 10);
            if (vUnit2 < vUnit1) {
                break;
            } else if (vUnit2 > vUnit1) {
                return ''; // 需要更高的版本号
            }
        }
    } else {
        return ''; // 未安装flash插件
    }

    var vars = options['vars'],
        objProperties = ['classid', 'codebase', 'id', 'width', 'height', 'align'];

    // 初始化object标签需要的classid、codebase属性值
    options['align'] = options['align'] || 'middle';
    options['classid'] = 'clsid:d27cdb6e-ae6d-11cf-96b8-444553540000';
    options['codebase'] = 'http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0';
    options['movie'] = options['url'] || '';
    delete options['vars'];
    delete options['url'];

    // 初始化flashvars参数的值
    if ('string' == typeof vars) {
        options['flashvars'] = vars;
    } else {
        var fvars = [];
        for (k in vars) {
            item = vars[k];
            fvars.push(k + "=" + encodeURIComponent(item));
        }
        options['flashvars'] = fvars.join('&');
    }

    // 构建IE下支持的object字符串，包括属性和参数列表
    var str = ['<object '];
    for (i = 0, len = objProperties.length; i < len; i++) {
        item = objProperties[i];
        str.push(' ', item, '="', encodeHTML(options[item]), '"');
    }
    str.push('>');
    var params = {
        'wmode'             : 1,
        'scale'             : 1,
        'quality'           : 1,
        'play'              : 1,
        'loop'              : 1,
        'menu'              : 1,
        'salign'            : 1,
        'bgcolor'           : 1,
        'base'              : 1,
        'allowscriptaccess' : 1,
        'allownetworking'   : 1,
        'allowfullscreen'   : 1,
        'seamlesstabbing'   : 1,
        'devicefont'        : 1,
        'swliveconnect'     : 1,
        'flashvars'         : 1,
        'movie'             : 1
    };

    for (k in options) {
        item = options[k];
        k = k.toLowerCase();
        if (params[k] && (item || item === false || item === 0)) {
            str.push('<param name="' + k + '" value="' + encodeHTML(item) + '" />');
        }
    }

    // 使用embed时，flash地址的属性名是src，并且要指定embed的type和pluginspage属性
    options['src']  = options['movie'];
    options['name'] = options['id'];
    delete options['id'];
    delete options['movie'];
    delete options['classid'];
    delete options['codebase'];
    options['type'] = 'application/x-shockwave-flash';
    options['pluginspage'] = 'http://www.macromedia.com/go/getflashplayer';


    // 构建embed标签的字符串
    str.push('<embed');
    // 在firefox、opera、safari下，salign属性必须在scale属性之后，否则会失效
    // 经过讨论，决定采用BT方法，把scale属性的值先保存下来，最后输出
    var salign;
    for (k in options) {
        item = options[k];
        if (item || item === false || item === 0) {
            if ((new RegExp("^salign\x24", "i")).test(k)) {
                salign = item;
                continue;
            }

            str.push(' ', k, '="', encodeHTML(item), '"');
        }
    }

    if (salign) {
        str.push(' salign="', encodeHTML(salign), '"');
    }
    str.push('></embed></object>');

    return str.join('');
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/swf/create.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/17
 */



/**
 * 在页面中创建一个flash对象
 * @name baidu.swf.create
 * @function
 * @grammar baidu.swf.create(options[, container])
 *
 * @param {Object} 	options 					创建flash的选项参数
 * @param {string} 	options.id 					要创建的flash的标识
 * @param {string} 	options.url 				flash文件的url
 * @param {String} 	options.errorMessage 		未安装flash player或flash player版本号过低时的提示
 * @param {string} 	options.ver 				最低需要的flash player版本号
 * @param {string} 	options.width 				flash的宽度
 * @param {string} 	options.height 				flash的高度
 * @param {string} 	options.align 				flash的对齐方式，允许值：middle/left/right/top/bottom
 * @param {string} 	options.base 				设置用于解析swf文件中的所有相对路径语句的基本目录或URL
 * @param {string} 	options.bgcolor 			swf文件的背景色
 * @param {string} 	options.salign 				设置缩放的swf文件在由width和height设置定义的区域内的位置。允许值：l/r/t/b/tl/tr/bl/br
 * @param {boolean} options.menu 				是否显示右键菜单，允许值：true/false
 * @param {boolean} options.loop 				播放到最后一帧时是否重新播放，允许值： true/false
 * @param {boolean} options.play 				flash是否在浏览器加载时就开始播放。允许值：true/false
 * @param {string} 	options.quality 			设置flash播放的画质，允许值：low/medium/high/autolow/autohigh/best
 * @param {string} 	options.scale 				设置flash内容如何缩放来适应设置的宽高。允许值：showall/noborder/exactfit
 * @param {string} 	options.wmode 				设置flash的显示模式。允许值：window/opaque/transparent
 * @param {string} 	options.allowscriptaccess 	设置flash与页面的通信权限。允许值：always/never/sameDomain
 * @param {string} 	options.allownetworking 	设置swf文件中允许使用的网络API。允许值：all/internal/none
 * @param {boolean} options.allowfullscreen 	是否允许flash全屏。允许值：true/false
 * @param {boolean} options.seamlesstabbing 	允许设置执行无缝跳格，从而使用户能跳出flash应用程序。该参数只能在安装Flash7及更高版本的Windows中使用。允许值：true/false
 * @param {boolean} options.devicefont 			设置静态文本对象是否以设备字体呈现。允许值：true/false
 * @param {boolean} options.swliveconnect 		第一次加载flash时浏览器是否应启动Java。允许值：true/false
 * @param {Object} 	options.vars 				要传递给flash的参数，支持JSON或string类型。
 *
 * @param {HTMLElement|string} [container] 		flash对象的父容器元素，不传递该参数时在当前代码位置创建flash对象。
 * @meta standard
 * @see baidu.swf.createHTML,baidu.swf.getMovie
 */
baidu.swf.create = function (options, target) {
    options = options || {};
    var html = baidu.swf.createHTML(options)
        || options['errorMessage']
        || '';

    if (target && 'string' == typeof target) {
        target = document.getElementById(target);
    }

    if (target) {
        target.innerHTML = html;
    } else {
        document.write(html);
    }
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/url.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/16
 */


/**
 * @namespace baidu.url 操作url的方法。
 */
baidu.url = baidu.url || {};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 */



/**
 * 对字符串进行%#&+=以及和\s匹配的所有字符进行url转义
 * @name baidu.url.escapeSymbol
 * @function
 * @grammar baidu.url.escapeSymbol(source)
 * @param {string} source 需要转义的字符串.
 * @return {string} 转义之后的字符串.
 * @remark
 * 用于get请求转义。在服务器只接受gbk，并且页面是gbk编码时，可以经过本转义后直接发get请求。
 *
 * @return {string} 转义后的字符串
 */
baidu.url.escapeSymbol = function(source) {

    //TODO: 之前使用\s来匹配任意空白符
    //发现在ie下无法匹配中文全角空格和纵向指标符\v，所以改\s为\f\r\n\t\v以及中文全角空格和英文空格
    //但是由于ie本身不支持纵向指标符\v,故去掉对其的匹配，保证各浏览器下效果一致
    return String(source).replace(/[#%&+=\/\\\ \　\f\r\n\t]/g, function(all) {
        return '%' + (0x100 + all.charCodeAt()).toString(16).substring(1).toUpperCase();
    });
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/url/getQueryValue.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/16
 */




/**
 * 根据参数名从目标URL中获取参数值
 * @name baidu.url.getQueryValue
 * @function
 * @grammar baidu.url.getQueryValue(url, key)
 * @param {string} url 目标URL
 * @param {string} key 要获取的参数名
 * @meta standard
 * @see baidu.url.jsonToQuery
 *
 * @returns {string|null} - 获取的参数值，其中URI编码后的字符不会被解码，获取不到时返回null
 */
baidu.url.getQueryValue = function (url, key) {
    var reg = new RegExp(
        "(^|&|\\?|#)"
            + baidu.string.escapeReg(key)
            + "=([^&#]*)(&|\x24|#)",
        "");
    var match = url.match(reg);
    if (match) {
        return match[2];
    }

    return null;
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/url/jsonToQuery.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/16
 */





/**
 * 将json对象解析成query字符串
 * @name baidu.url.jsonToQuery
 * @function
 * @grammar baidu.url.jsonToQuery(json[, replacer])
 * @param {Object} json 需要解析的json对象
 * @param {Function=} replacer_opt 对值进行特殊处理的函数，function (value, key)
 * @see baidu.url.queryToJson,baidu.url.getQueryValue
 *
 * @return {string} - 解析结果字符串，其中值将被URI编码，{a:'&1 '} ==> "a=%261%20"。
 */
baidu.url.jsonToQuery = function (json, replacer_opt) {
    var result = [],
        itemLen,
        replacer = replacer_opt || function (value) {
            return baidu.url.escapeSymbol(value);
        };

    baidu.object.each(json, function(item, key){
        // 这里只考虑item为数组、字符串、数字类型，不考虑嵌套的object
        if (baidu.lang.isArray(item)) {
            itemLen = item.length;
            // value的值需要encodeURIComponent转义吗？
            // FIXED 优化了escapeSymbol函数
            while (itemLen--) {
                result.push(key + '=' + replacer(item[itemLen], key));
            }
        } else {
            result.push(key + '=' + replacer(item, key));
        }
    });

    return result.join('&');
};
/*
 * Tangram
 * Copyright 2009 Baidu Inc. All rights reserved.
 * 
 * path: baidu/url/queryToJson.js
 * author: erik
 * version: 1.1.0
 * date: 2009/11/16
 */




/**
 * 解析目标URL中的参数成json对象
 * @name baidu.url.queryToJson
 * @function
 * @grammar baidu.url.queryToJson(url)
 * @param {string} url 目标URL
 * @see baidu.url.jsonToQuery
 *
 * @returns {Object} - 解析为结果对象，其中URI编码后的字符不会被解码，'a=%20' ==> {a:'%20'}。
 */
baidu.url.queryToJson = function (url) {
    var query   = url.substr(url.lastIndexOf('?') + 1),
        params  = query.split('&'),
        len     = params.length,
        result  = {},
        i       = 0,
        key, value, item, param;

    for (; i < len; i++) {
        if(!params[i]){
            continue;
        }
        param   = params[i].split('=');
        key     = param[0];
        value   = param[1];

        item = result[key];
        if ('undefined' == typeof item) {
            result[key] = value;
        } else if (baidu.lang.isArray(item)) {
            item.push(value);
        } else { // 这里只可能是string了
            result[key] = [item, value];
        }
    }

    return result;
};
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er.js
 * desc:    er(ecom ria)是一个用于支撑富ajax应用的框架
 * author:  erik
 */


var er = {};
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/config.js
 * desc:    er框架的默认配置
 * author:  erik
 */

///import er;

er.config = {
    CONTROL_IFRAME_ID   : 'ERHistroyRecordIframe',
    DEFAULT_INDEX       : '/',
    MAIN_ELEMENT_ID     : 'Main',
    ACTION_ROOT         : '/asset/js',
    ACTION_PATH         : {},
    ACTION_AUTOLOAD     : 0
};
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/_util.js
 * desc:    er框架内部的使用的功能函数集
 * author:  erik
 */

///import er.config;

er._util = function () { 
    /**
     * 获取配置信息
     * 
     * @inner
     * @param {string} name 配置项名称
     * @return {string}
     */
    function getConfig( name ) {
        var cfg = er.config,
            // 配置默认值
            defaultCfg = {         
                CONTROL_IFRAME_ID   : 'ERHistroyRecordIframe',
                DEFAULT_INDEX       : '/',
                MAIN_ELEMENT_ID     : 'Main',
                ACTION_ROOT         : '/asset/js',
                ACTION_PATH         : {},
                ACTION_AUTOLOAD     : 0
            },
            value = cfg[ name ];
        
        if ( !hasValue( value ) ) {
            value = defaultCfg[ name ] || null;
        }    
        
        return value;
    }

    /**
     * 判断变量是否有值。null或undefined时返回false
     * 
     * @param {Any} variable
     * @return {boolean}
     */
    function hasValue( variable ) {
        return !(variable === null || typeof variable == 'undefined');
    }
    
    var uIdMap_ = {};
    
    /**
     * 获取不重复的随机串
     * 
     * @param {number} opt_len 随机串长度，默认为10
     * @return {string}
     */
    function getUID( opt_len ) {
        opt_len = opt_len || 10;
        
        var chars    = "qwertyuiopasdfghjklzxcvbnm1234567890",
            charsLen = chars.length,
            len2     = opt_len,
            rand     = "";
            
        while ( len2-- ) {
            rand += chars.charAt( Math.floor( Math.random() * charsLen ) );
        }
        
        if ( uIdMap_[ rand ] ) {
            return getUID( opt_len );
        }
        
        uIdMap_[ rand ] = 1;
        return rand;
    }
    
    // 暴露相应的方法
    return {
        getUID      : getUID,
        hasValue    : hasValue,
        getConfig   : getConfig
    };
}();
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/config.js
 * desc:    ER框架初始化方法
 * author:  erik
 */

///import er;
///import er._util;
///import baidu.ajax.request;

/**
 * 初始化ER框架
 */
er.init = function () {
    /**
     * 初始化函数
     *
     * @inner
     */
    function init() {
        _continue();
    }

    var initers = [];
    var phase = 'ready';
    var currIndex = 0;

    function _continue() {
        var initer;
        
        switch ( phase ) {
        case 'ready':
        case 'run':
            if ( currIndex < initers.length ) { 
                phase = 'run';
                initer = initers[ currIndex++ ];
                (typeof initer == 'function') && initer();
                _continue();
            } else {
                phase = 'inited';
                typeof er.oninit == 'function' && er.oninit();
            }
            break;
        }
    }

    /**
     * 添加初始化函数
     *
     * @public 
     * @param {Function} initer 初始化函数
     * @param {number} opt_index 初始化次序
     */
    init.addIniter = function ( initer, opt_index ) {
        if ( typeof opt_index == 'number' ) {
            if ( initers[ opt_index ] ) {
                initers.splice( opt_index, 0, initer );
            } else {
                initers[ opt_index ] = initer;
            }
        } else {
            initers.push( initer );
        }
    };

    /**
     * 停止初始化
     *
     * @public
     */
    init.stop = function () {
        if ( phase == 'run' ) {
            phase = 'stop';
        }
    };

    /**
     * 启动初始化
     *
     * @public
     */
    init.start = function () {
        if ( phase == 'stop' ) {
            phase = 'run';
            _continue();
        }
    };

    return init;
}();
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/template.js
 * desc:    简易的、基于html注释的模板支持
 * author:  erik, mytharcher
 * example:
 * <!-- target: targetName -->
 * <div>html fragment</div>
 * 
 * <!-- target: targetName2( master = masterName ) -->
 * <!-- content: header -->
 * title
 * <!-- content: content -->
 * <ul>
 *     <!-- for: ${list} as ${item} -->
 *         <li>${item}         
 *     <!-- /for -->
 * </ul>
 *
 * <!-- master: masterName -->
 * <div class="header">
 *     <!-- contentplaceholder: header -->
 * </div>
 * <div class="content">
 *     <!-- contentplaceholder: content -->
 * </div>
 * 
 */

///import er.config;
///import er.init;
///import baidu.string.encodeHTML;
///import baidu.string.trim;

/**
 * 简易的模板解析器
 */
er.template = function () {
    /**
     * 随手写了个栈
     *
     * @inner
     */
    function Stack() {
        this.container = [];
        this.index = -1;
    }

    Stack.prototype = {
        /**
         * 获取栈顶元素
         *
         * @return {Any}
         */
        current: function () {
            return this.container[ this.index ];
        },

        /**
         * 入栈
         *
         * @param {Any} elem
         */
        push: function ( elem ) {
            this.container[ ++this.index ] = elem;
        },

        /**
         * 出栈
         *
         * @return {Any}
         */
        pop: function () {
            if ( this.index < 0 ) {
                return null;
            }

            var elem = this.container[ this.index ];
            this.container.length = this.index--;

            return elem;
        },

        /**
         * 获取栈底元素
         *
         * @return {Any}
         */
        bottom: function () {
            return this.container[ 0 ];
        }
    };

    /**
     * 随手写了个数组作为buffer
     *
     * @inner
     */
    function ArrayBuffer() {
        this.raw = [];
        this.idx = 0;
    }

    ArrayBuffer.prototype = {
        /**
         * 添加元素到数组末端
         *
         * @param {Any} elem 添加项
         */
        push: function ( elem ) {
            this.raw[ this.idx++ ] = elem;
        },

        /**
         * 添加多个元素到数组末端
         */
        pushMore: function () {
            for ( var i = 0, l = arguments.length; i < l; i++ ) {
                this.push( arguments[ i ] );
            }
        },

        /**
         * 连接数组项
         *
         * @param {string} split 分隔串
         * @return {string}
         */
        join: function ( split ) {
            return this.raw.join( split );
        },

        /**
         * 获取源数组
         *
         * @return {Array}
         */
        getRaw: function () {
            return this.raw;
        }
    };

    /**
     * 随手写了个节点迭代器
     *
     * @inner
     * @param {Array} stream 节点流
     */
    function NodeIterator( stream ) {
        this.stream = stream;
        this.index  = 0;
    }

    NodeIterator.prototype = {
        /**
         * 下一节点
         *
         * @return {Object}
         */
        next: function () {
            return this.stream[ ++this.index ];
        },

        /**
         * 上一节点
         *
         * @return {Object}
         */
        prev: function () {
            return this.stream[ --this.index ];
        },

        /**
         * 当前节点
         *
         * @return {Object}
         */
        current: function () {
            return this.stream[ this.index ];
        }
    };

    function Scope( parent ) {
        this.context = {};
        this.parent  = parent;
    }

    Scope.prototype = {
        get: function ( name ) {
            var value = this.context[ name ];
            if ( !er._util.hasValue( value ) && this.parent ) {
                return this.parent.get( name );
            }

            if ( er._util.hasValue( value ) ) {
                return value;
            }

            return null;
        },

        set: function ( name, value ) {
            this.context[ name ] = value;
        }
    };

    // 节点类型声明
    var TYPE = {
        TEXT               : 1,
        TARGET             : 2,
        MASTER             : 3,
        IMPORT             : 4,
        CONTENT            : 5,
        CONTENTPLACEHOLDER : 6,
        FOR                : 7,
        IF                 : 8,
        ELIF               : 9,
        ELSE               : 10
    };

    // 命令注释规则
    var COMMENT_RULE = /^\s*(\/)?([a-z]+)(.*)$/i;
    
    // 属性规则
    var PROP_RULE = /^\s*([0-9a-z_]+)\s*=\s*([0-9a-z_]+)\s*$/i;
    
    // FOR标签规则
    var FOR_RULE = /^\s*:\s*\$\{([0-9a-z_.\[\]]+)\}\s+as\s+\$\{([0-9a-z_]+)\}\s*(,\s*\$\{([0-9a-z_]+)\})?\s*$/i;
    
    // IF和ELIF标签规则
    var IF_RULE = /^\s*:([>=<!0-9a-z$\{\}\[\]\(\):\s'"\.\|&_]+)\s*$/i;

    // 普通命令标签规则
    var TAG_RULE = /^\s*:\s*([a-z0-9_]+)\s*(?:\(([^)]+)\))?\s*$/i;

    // 条件表达式规则
    var CONDEXPR_RULE = /\s*(\!=?=?|\|\||&&|>=?|<=?|===?|['"\(\)]|\$\{[^\}]+\}|\-?[0-9]+(\.[0-9]+)?)/;

    // target和master存储容器
    var masterContainer = {};
    var targetContainer = {};

    // 过滤器
    var filterContainer = {
        'html': function ( source ) {
            return baidu.string.encodeHTML( source );
        },
        
        'url': function ( source ) {
            return encodeURIComponent( source );
        }
    };

    // 自动加载状态位
    var isLoaded;

    /**
     * 节点分析，返回节点流
     *
     * @inner
     * @return {Array}
     */
    function nodeAnalyse( source ) {
        var COMMENT_BEGIN = '<!--';
        var COMMENT_END   = '-->';
        
        var i;
        var len;
        var str;
        var strLen;
        var commentText;
        var nodeType;
        var nodeContent;
        var node;
        var propList;
        var propLen;

        // text节点内容缓冲区，用于合并多text
        var textBuf = new ArrayBuffer;

        // node结果流
        var nodeStream = new ArrayBuffer;    
        
        // 对source以 <!-- 进行split
        var texts = source.split( COMMENT_BEGIN );
        if ( texts[ 0 ] === '' ) {
            texts.shift();
        }

        /**
         * 将缓冲区中的text节点内容写入
         *
         * @inner
         */
        function flushTextBuf() {
            nodeStream.push( {
                type: TYPE.TEXT,
                text: textBuf.join( '' )
            } );
            textBuf = new ArrayBuffer;
        }

        /**
         * 抛出标签不合法错误
         *
         * @inner
         */
        function throwInvalid( type, text ) {
            throw type + ' is invalid: ' + text;
        }

        /**
         * 注释作为普通注释文本写入流，不具有特殊含义
         *
         * @inner
         */
        function beCommentText( text ) {
            textBuf.pushMore( COMMENT_BEGIN, text, COMMENT_END );
        }

        // 开始第一阶段解析，生成strStream
        for ( i = 0, len = texts.length; i < len; i++ ) {
            // 对 <!-- 进行split的结果
            // 进行 --> split
            // 如果split数组长度为2
            // 则0项为注释内容，1项为正常html内容
            str    = texts[ i ].split( COMMENT_END );
            strLen = str.length;

            if ( strLen == 2 || i > 0 ) {
                if ( strLen == 2 ) {
                    commentText = str[ 0 ];
                    if ( COMMENT_RULE.test( commentText ) ) {
                        // 将缓冲区中的text节点内容写入
                        flushTextBuf();
                        
                        // 节点类型分析
                        nodeType = RegExp.$2.toLowerCase();
                        nodeContent = RegExp.$3;
                        node = { type: TYPE[ nodeType.toUpperCase() ] };

                        if ( RegExp.$1 ) {
                            // 闭合节点解析
                            node.endTag = 1;
                            nodeStream.push( node );
                        } else {
                            switch ( nodeType ) {
                            case 'content':
                            case 'contentplaceholder':
                            case 'master':
                            case 'import':
                            case 'target':
                                if ( TAG_RULE.test( nodeContent ) ) {
                                    // 初始化id
                                    node.id = RegExp.$1;
                                
                                    // 初始化属性
                                    propList = RegExp.$2.split( /\s*,\s*/ );
                                    propLen = propList.length;
                                    while ( propLen-- ) {
                                        if ( PROP_RULE.test( propList[ propLen ] ) ) {
                                            node[ RegExp.$1 ] = RegExp.$2;
                                        }
                                    }
                                } else {
                                    throwInvalid( nodeType, commentText );
                                }

                                break;

                            case 'for':
                                if ( FOR_RULE.test( nodeContent ) ) {
                                    node.list  = RegExp.$1;
                                    node.item  = RegExp.$2;
                                    node.index = RegExp.$4;
                                } else {
                                    throwInvalid( nodeType, commentText );
                                }

                                break;

                            case 'if':
                            case 'elif':
                                if ( IF_RULE.test( RegExp.$3 ) ) {
                                    node.expr = condExpr.parse( RegExp.$1 );
                                } else {
                                    throwInvalid( nodeType, commentText );
                                }

                                break;

                            case 'else':
                                break;

                            default:
                                node = null;
                                beCommentText( commentText );
                            }

                            node && nodeStream.push( node );
                        }
                    } else {
                        // 不合规则的注释视为普通文本
                        beCommentText( commentText );
                    }

                    textBuf.push( str[ 1 ] );
                } else {
                    textBuf.push( str[ 0 ] );
                }
            }
        }
        
        
        flushTextBuf(); // 将缓冲区中的text节点内容写入
        return nodeStream.getRaw();
    }

    /**
     * 语法分析
     *
     * @inner
     * @param {Array} stream 构造单元流
     */
    var syntaxAnalyse = function () {
        var astParser = {};
        var targetCache;
        var masterCache;
        var analyseStack;
        var nodeIterator;

        /**
         * 弹出node
         *
         * @inner
         * @param {number} stopType 遇见则终止弹出的类型
         */
        function popNode( stopType ) {
            var current;

            while ( ( current = analyseStack.current() )
                    && current.type != stopType
            ) {
                analyseStack.pop();
            }

            return analyseStack.pop();
        }

        /**
         * 压入node
         *
         * @inner
         * @param {Object} node 节点
         */
        function pushNode( node ) {
            analyseStack.push( node );
        }

        /**
         * 获取错误提示信息
         *
         * @inner
         * @return {string}
         */
        function getError() {
            var node = analyseStack.bottom;
            return '[er template]' + node.type + ' ' + node.id 
                + ': unexpect ' + nodeIterator.current().type 
                + ' on ' + analyseStack.current().type;
        }

        /**
         * 根据类型解析抽象树
         *
         * @inner
         * @param {number} type 节点类型
         */
        function astParseByType( type ) {
            var parser = astParser[ type ];
            parser && parser();
        }

        /**
         * target解析
         *
         * @inner
         */
        astParser[ TYPE.TARGET ] = function () {
            var node = nodeIterator.current();
            node.block   = [];
            node.content = {};
            
            pushNode( node );
            targetCache[ node.id ] = node;

            while ( ( node = nodeIterator.next() ) )  {
                switch ( node.type ) {
                case TYPE.TARGET:
                case TYPE.MASTER:
                    popNode();
                    if ( !node.endTag ) {
                        nodeIterator.prev();
                    }
                    return;
                case TYPE.CONTENTPLACEHOLDER:
                case TYPE.ELSE:
                case TYPE.ELIF:
                    throw getError();
                default:
                    astParseByType( node.type );
                    break;
                }
            }
        };

        /**
         * master解析
         *
         * @inner
         */
        astParser[ TYPE.MASTER ] = function () {
            var node = nodeIterator.current();
            node.block = [];

            pushNode( node );
            masterCache[ node.id ] = node;

            while ( ( node = nodeIterator.next() ) )  {
                switch ( node.type ) {
                case TYPE.TARGET:
                case TYPE.MASTER:
                    popNode();
                    if ( !node.endTag ) {
                        nodeIterator.prev();
                    }
                    return;
                case TYPE.CONTENT:
                case TYPE.ELSE:
                case TYPE.ELIF:
                    throw getError();
                default:
                    astParseByType( node.type );
                    break;
                }
            }
        };

        /**
         * text解析
         *
         * @inner
         */
        astParser[ TYPE.TEXT ] = 

        /**
         * import解析
         *
         * @inner
         */
        astParser[ TYPE.IMPORT ] = 

        /**
         * contentplaceholder解析
         *
         * @inner
         */
        astParser[ TYPE.CONTENTPLACEHOLDER ] = function () {
            analyseStack.current().block.push( nodeIterator.current() );
        };

        /**
         * content解析
         *
         * @inner
         */
        astParser[ TYPE.CONTENT ] = function () {
            var node = nodeIterator.current();
            node.block = [];

            analyseStack.bottom().content[ node.id ] = node;
            pushNode( node );

            while ( ( node = nodeIterator.next() ) )  {
                if ( node.endTag ) {
                    if ( node.type == TYPE.CONTENT ) {
                        popNode( TYPE.CONTENT );
                    } else {
                        nodeIterator.prev();
                    }
                    return;
                }

                switch ( node.type ) {
                case TYPE.TARGET:
                case TYPE.MASTER:
                    popNode();
                    nodeIterator.prev();
                    return;
                case TYPE.CONTENTPLACEHOLDER:
                case TYPE.ELSE:
                case TYPE.ELIF:
                    throw getError();
                case TYPE.CONTENT:
                    popNode( TYPE.CONTENT );
                    nodeIterator.prev();
                    return;
                default:
                    astParseByType( node.type );
                    break;
                }
            }
        };

        /**
         * for解析
         *
         * @inner
         */
        astParser[ TYPE.FOR ] = function () {
            var node = nodeIterator.current();
            node.block = [];

            analyseStack.current().block.push( node );
            pushNode( node );

            while ( ( node = nodeIterator.next() ) )  {
                if ( node.endTag ) {
                    if ( node.type == TYPE.FOR ) {
                        popNode( TYPE.FOR );
                    } else {
                        nodeIterator.prev();
                    }
                    return;
                }

                switch ( node.type ) {
                case TYPE.TARGET:
                case TYPE.MASTER:
                    popNode();
                    nodeIterator.prev();
                    return;
                case TYPE.CONTENTPLACEHOLDER:
                case TYPE.CONTENT:
                case TYPE.ELSE:
                case TYPE.ELIF:
                    throw getError();
                default:
                    astParseByType( node.type );
                    break;
                }
            }
        };

        /**
         * if解析
         *
         * @inner
         */
        astParser[ TYPE.IF ] = function () {
            var node = nodeIterator.current();
            node.block = [];

            analyseStack.current().block.push( node );
            pushNode( node );

            while ( ( node = nodeIterator.next() ) ) {
                if ( node.endTag ) {
                    if ( node.type == TYPE.IF ) {
                        popNode( TYPE.IF );
                    } else {
                        nodeIterator.prev();
                    }
                    return;
                }

                switch ( node.type ) {
                case TYPE.TARGET:
                case TYPE.MASTER:
                    popNode();
                    nodeIterator.prev();
                    return;
                case TYPE.CONTENTPLACEHOLDER:
                case TYPE.CONTENT:
                    throw getError();
                default:
                    astParseByType( node.type );
                    break;
                }
            }
        };

        /**
         * elif解析
         *
         * @inner
         */
        astParser[ TYPE.ELIF ] = function () {
            var node = nodeIterator.current();
            node.type  = TYPE.IF;
            node.block = [];

            popNode( TYPE.IF )[ 'else' ] = node;
            pushNode( node );


            while ( ( node = nodeIterator.next() ) ) {
                if ( node.endTag ) {
                    nodeIterator.prev();
                    return;
                }

                switch ( node.type ) {
                case TYPE.TARGET:
                case TYPE.MASTER:
                    popNode();
                    nodeIterator.prev();
                    return;
                case TYPE.CONTENTPLACEHOLDER:
                case TYPE.CONTENT:
                    throw getError();
                case TYPE.ELIF:
                    nodeIterator.prev();
                    return;
                default:
                    astParseByType( node.type );
                    break;
                }
            }
        };

        /**
         * else解析
         *
         * @inner
         */
        astParser[ TYPE.ELSE ] = function () {
            var unit = nodeIterator.current();
            var node = analyseStack.current();
            var nodeType;

            while ( 1 ) {
                nodeType = node.type;
                if ( nodeType == TYPE.IF || nodeType == TYPE.ELIF ) {
                    node = {
                        type  : TYPE.ELSE,
                        block : []
                    };
                    analyseStack.current()[ 'else' ] = node;
                    break;
                }

                node = analyseStack.pop();
            }
            pushNode( node );

            while ( ( unit = nodeIterator.next() ) ) {
                if ( unit.endTag ) {
                    nodeIterator.prev();
                    return;
                }

                switch ( unit.type ) {
                case TYPE.TARGET:
                case TYPE.MASTER:
                    popNode();
                    nodeIterator.prev();
                    return;
                case TYPE.CONTENTPLACEHOLDER:
                case TYPE.CONTENT:
                case TYPE.ELSE:
                case TYPE.ELIF:
                    throw getError();
                default:
                    astParseByType( unit.type );
                    break;
                }
            }
        };

        return function ( stream ) {
            var unit;
            var key;
            var target;
            var master;
            var content;
            var block;
            var masterBlock;
            var i, len, item;

            // 初始化解析用到的环境
            nodeIterator = new NodeIterator( stream );
            targetCache  = {};
            masterCache  = {};
            analyseStack = new Stack;

            // 解析node流成抽象树结构
            while ( ( unit = nodeIterator.current() ) ) {
                switch ( unit.type ) {
                case TYPE.TARGET:
                case TYPE.MASTER:
                    astParser[ unit.type ]();
                    break;
                default:
                    nodeIterator.next();
                }
            }

            // 将master从临时结果转移到container
            for ( key in masterCache ) {
                if ( masterContainer[ key ] ) {
                    throw 'master "' + key + '" is exist!'
                }

                masterContainer[ key ] = masterCache[ key ];
            }

            // 链接 target 和 master
            // 将target从临时结果转移到container
            for ( key in targetCache ) {
                if ( targetContainer[ key ] ) {
                    throw 'target "' + key + '" is exist!'
                }

                target = targetCache[ key ];
                master = target.master;
                targetContainer[ key ] = target;
                
                if ( master ) {
                    block = [];
                    target.block = block;

                    master = masterContainer[ master ];
                    if ( !master ) {
                        continue;
                    }
                    masterBlock = master.block;
                    
                    for ( i = 0, len = masterBlock.length; i < len; i++ ) {
                        item = masterBlock[ i ];

                        switch ( item.type ) {
                        case TYPE.CONTENTPLACEHOLDER:
                            content = target.content[ item.id ];
                            if ( content ) {
                                Array.prototype.push.apply( block, content.block );
                            }
                            break;
                        default:
                            block.push( item );
                        }
                    }
                }
            }

            // 释放解析所需的公共环境
            targetCache = null;
            masterCache = null;
            nodeIterator = null;
            analyseStack = null;  
        };
    }();
    
    /**
     * 条件表达式解析和执行
     *
     * @inner
     */
    var condExpr = function () {
        // 表达式类型
        var EXPR_T = {
            or       : 1,
            and      : 2,
            relation : 3,
            unary    : 4,
            string   : 5,
            number   : 6,
            variable : 7,
            punc     : 8
        };

        return {
            /**
             * 解析条件表达式
             *
             * @inner
             * @param {string} source 表达式源
             */
            parse: function ( source ) {
                source = baidu.string.trim( source );
                var arr;
                var str;
                var expr;
                var src = source;
                var stream = [];

                // 分析表达式token流
                while ( source ) {
                    // 匹配一个含义块
                    arr = CONDEXPR_RULE.exec( source );
                    if ( !arr ) {
                        throw "conditional expression invalid: " + src;
                    }

                    // 更新未解析的源
                    source = source.slice( arr[ 0 ].length );
                    str    = arr[ 1 ];

                    if ( str.indexOf( '$' ) == 0 ) {
                        stream.push( {
                            type : EXPR_T.variable,
                            text : str.slice( 2, str.length - 1 )
                        } );
                    } else if ( /^[0-9-]/.test( str ) ) {
                        stream.push( {
                            type : EXPR_T.number,
                            text : str
                        } );
                    } else {

                        switch ( str ) {
                        case "'":
                        case '"':
                            var strBuf = [str];
                            var cha;
                            var index = 0;

                            while ( 1 ) {
                                cha = source.charAt( index++ );
                                if ( cha == str ) {
                                    strBuf.push( str );
                                    source = source.slice( index );
                                    break;
                                }

                                strBuf.push( cha );
                            }
                            stream.push( { 
                                type : EXPR_T.string, 
                                text : strBuf.join( '' ) 
                            } );
                            break;
                        default:
                            stream.push( {
                                type : EXPR_T.punc,
                                text : str
                            } );
                            break;
                        }
                    }
                }

                // 分析表达式结构
                expr = orExpr( new NodeIterator( stream ) );
                return expr;
            },

            /**
             * 运行条件表达式
             *
             * @inner
             * @param {Object} expr 条件表达式
             * @param {Scope} scope scope
             * @return {boolean}
             */
            exec: execCondExpr
        };

        /**
         * 解析or表达式
         *
         * @inner
         * @param {NodeIterator} iterator token迭代器
         * @description
         * orExpression:
         *     andExpression
         *     andExpression || orExpression
         */
        function orExpr( iterator ) {
            var expr = andExpr( iterator );
            var oper;
            if ( ( oper = iterator.current() ) && oper.text == '||' ) {
                iterator.next();
                expr = {
                    type  : EXPR_T.or, 
                    expr1 : expr, 
                    expr2 : orExpr( iterator ) 
                };
            }

            return expr;
        }

        /**
         * 解析and表达式
         *
         * @inner
         * @param {NodeIterator} iterator token迭代器
         * @description
         * andExpression:
         *     relationalExpression
         *     relationalExpression || andExpression
         */
        function andExpr( iterator ) {
            var expr = relationExpr( iterator );
            var oper;
            if ( ( oper = iterator.current() ) && oper.text == '&&' ) {
                iterator.next();
                expr = {
                    type  : EXPR_T.and, 
                    expr1 : expr, 
                    expr2 : andExpr( iterator )
                };
            }

            return expr;
        }

        /**
         * 解析relational表达式
         *
         * @inner
         * @param {NodeIterator} iterator token迭代器
         * @description
         * relationalExpression:
         *     unaryExpression
         *     unaryExpression > unaryExpression
         *     unaryExpression >= unaryExpression
         *     unaryExpression < unaryExpression
         *     unaryExpression <= unaryExpression
         *     unaryExpression == unaryExpression
         *     unaryExpression != unaryExpression
         *     unaryExpression === unaryExpression
         *     unaryExpression !== unaryExpression
         */
        function relationExpr( iterator ) {
            var expr = unaryExpr( iterator );
            var oper;
            if ( ( oper = iterator.current() ) && /^[><=]+$/.test( oper.text ) ) {
                iterator.next();
                expr = {
                    type  : EXPR_T.relation, 
                    expr1 : expr, 
                    expr2 : unaryExpr( iterator ), 
                    oper  : oper.text
                };
            }

            return expr;
        }

        /**
         * 解析unary表达式
         *
         * @inner
         * @param {NodeIterator} iterator token迭代器
         * @description
         * unaryExpression:
         *     primaryExpr
         *     !primaryExpr
         */
        function unaryExpr( iterator ) {
            if ( iterator.current().text == '!' ) {
                iterator.next();
                return {
                    type : EXPR_T.unary,
                    oper : '!',
                    expr : primaryExpr( iterator )
                };
            }
            
            return primaryExpr( iterator );
        }

        /**
         * 解析primary表达式
         *
         * @inner
         * @param {NodeIterator} iterator token迭代器
         * @description
         * primaryExpression:
         *     string
         *     number
         *     ( orExpression )
         */
        function primaryExpr( iterator ) {
            var expr = iterator.current();
            if ( expr.text == '(' ) {
                iterator.next();
                expr = orExpr( iterator );
            }
            
            iterator.next();
            return expr;
        }

        /**
         * 运行relational表达式
         *
         * @inner
         * @param {Object} expr relational表达式
         * @param {Scope} scope scope
         * @return {boolean}
         */
        function execRelationExpr( expr, scope ) {
            var result1 = execCondExpr( expr.expr1, scope );
            var result2 = execCondExpr( expr.expr2, scope );

            switch( expr.oper ) {
            case '=='  : return result1 == result2;
            case '===' : return result1 === result2;
            case '>'   : return result1 > result2;
            case '<'   : return result1 < result2;
            case '>='  : return result1 >= result2;
            case '<='  : return result1 <= result2;
            case '!='  : return result1 != result2;
            case '!==' : return result1 !== result2;
            }
        }

        /**
         * 运行条件表达式
         *
         * @inner
         * @param {Object} expr 条件表达式
         * @param {Scope} scope scope
         * @return {Any}
         */
        function execCondExpr( expr, scope ) {
            switch ( expr.type ) {
            case EXPR_T.or:
                return execCondExpr( expr.expr1, scope ) 
                       || execCondExpr( expr.expr2, scope );
            case EXPR_T.and:
                return execCondExpr( expr.expr1, scope ) 
                       && execCondExpr( expr.expr2, scope );
            case EXPR_T.unary:
                return !execCondExpr( expr.expr, scope );
            case EXPR_T.relation:
                return execRelationExpr( expr, scope );
            case EXPR_T.string:
            case EXPR_T.number:
                return eval( expr.text );
            case EXPR_T.variable:
                return getVariableValue( scope, expr.text );
            }
        }
    }();

 
    /**
     * 解析模板变量的值
     * 
     * @inner
     * @param {string} scope 
     * @param {string} varName 变量名
     * @param {string} opt_filterName 过滤器名
     * @return {string}
     */
    function getVariableValue( scope, varName, opt_filterName ) {
        var typeRule = /:([a-z]+)$/i;
        var match    = varName.match( typeRule );
        var value    = '';
        var i, len;
        var variable, propName, propLen;

        varName = varName.replace( typeRule, '' );
        if ( match && match.length > 1 ) {
            value = getVariableValueByType( varName, match[1] );
        } else {
            varName  = varName.split( /[\.\[]/ );
            variable = scope.get( varName[ 0 ] );
            varName.shift();

            for ( i = 0, len = varName.length; i < len; i++ ) {
                if ( !er._util.hasValue( variable ) ) {
                    break;
                }

                propName = varName[ i ].replace( /\]$/, '' );
                propLen  = propName.length;
                if ( /^(['"])/.test( propName ) 
                     && propName.lastIndexOf( RegExp.$1 ) == --propLen
                ) {
                    propName = propName.slice( 1, propLen );
                }

                variable = variable[ propName ];
            }

            if ( er._util.hasValue( variable ) ) {
                value = variable;
            }
        }
        
        // 过滤处理
        if ( opt_filterName ) {
            opt_filterName = filterContainer[ opt_filterName.substr( 1 ) ];
            opt_filterName && ( value = opt_filterName( value ) );
        }

        return value;
    }
    
    /**
     * 解析带有类型的模板变量的值
     * 
     * @inner
     * @param {string} varName 变量名
     * @param {string} type 变量类型，暂时为lang|config
     * @return {string}
     */
    function getVariableValueByType( varName, type ) {
        var packs           = varName.split( '.' ),
            len             = packs.length - 1,
            topPackageName  = packs.shift(),
            win             = window,
            objOnDef        = er._util.getConfig( 'DEFAULT_PACKAGE' ),
            variable,
            objOnSelf,
            objOnBase;
        
        type = type.toLowerCase();

        // 多层示例假设: ${package.sub.test:lang}
        // 如果getConfig('DEFAULT_PACKAGE')的值为 "project"   
        // 查找对象:
        // project.package.sub.lang.test
        // package.sub.lang.test
        // lang.package.sub.test
        objOnDef && ( objOnDef = win[ objOnDef ] );               // object:project
        objOnSelf = win[ topPackageName ];                        // object:package
        objOnBase = win[ type ] && win[ type ][ topPackageName ]; // object:lang.package
        
        // 对于单层的值，如: ${test:lang}
        // 查找对象 project.lang.test 和 lang.test
        if ( len == 0 ) {
            objOnDef = objOnDef && objOnDef[ type ];
            return ( ( objOnDef && objOnDef[ topPackageName ] ) || objOnBase || '' );
        }
        
        objOnDef = objOnDef && objOnDef[ topPackageName ]; // object: project.package
        varName = packs.pop();
        len--;
        
        while ( len-- ) {
            variable = packs.shift();
            objOnDef = objOnDef && objOnDef[ variable ];
            objOnSelf = objOnSelf && objOnSelf[ variable ];
            objOnBase = objOnBase && objOnBase[ variable ];
        }
        
        objOnDef = objOnDef && objOnDef[ type ];    // object: project.package.sub.lang
        objOnSelf = objOnSelf && objOnSelf[ type ]; // object: package.sub.lang

        objOnDef = objOnDef && objOnDef[ varName ];    // object: project.package.sub.lang.test
        objOnSelf = objOnSelf && objOnSelf[ varName ]; // object: package.sub.lang.test
        objOnBase = objOnBase && objOnBase[ varName ]; // object: lang.package.sub.test

        if ( er._util.hasValue( objOnDef ) ) {
            return objOnDef;
        } else if ( er._util.hasValue( objOnSelf ) ) {
            return objOnSelf;
        } else if ( er._util.hasValue( objOnBase ) ) {
            return objOnBase;
        }
        
        return '';
    }
    
    
    /**
     * 获取target的内容
     *
     * @inner
     * @param {string} name target的名称
     * @return {string}
     */
    function getTargetContent( name ) {
        try {
            var target = getTarget( name );
            return getContent( target ) || '';
        } catch ( ex ) {
            return '';
        }
    }

    /**
     * 获取target
     *
     * @inner
     * @param {string} name target的名称
     * @return {Object}
     */
    function getTarget( name ) {
        var target = targetContainer[ name ];
        if ( !target ) {
            throw 'target "' + name + '" is not exist!';
        }

        if ( target.type != TYPE.TARGET ) {
            throw 'target "' + name + '" is invalid!';
        }

        return target;
    }

    /**
     * 获取节点的内容
     *
     * @inner
     * @param {Object} node 节点
     * @return {string}
     */
    function getContent( node ) {
        var block   = node.block;
        var content = [];
        var item, i, len;

        for ( i = 0, len = block.length; i < len; i++ ) {
            item = block[ i ];

            if ( item.block ) {
                content.push( getContent( item ) );
            } else if ( item.type == TYPE.IMPORT ) {
                content.push( getTargetContent( item.id ) );
            } else {
                content.push( item.text || '' );
            }
        }

        return content.join( '' );
    }

    /**
     * 替换模板变量的值
     * 
     * @inner
     * @param {string} text 替换文本源
     * @param {Scope} scope 
     * @return {string}
     */
    function replaceVariable( text, scope ) {
        return text.replace(
                /\$\{([.:a-z0-9\[\]'"_]+)\s*(\|[a-z]+)?\s*\}/ig,
                function ( $0, $1, $2 ) {
                    return getVariableValue( scope, $1, $2  );
                });
    }

    /**
     * 执行target
     * 
     * @inner
     * @param {Object} target 要执行的target
     * @param {Scope} scope
     */
    function exec( target, scope ) {
        var result = [];
        var block = target.block;
        
        var stat, i, len;
        var forScope, forList, forI, forLen, forItem, forIndex;
        var ifValid;

        
        for ( i = 0, len = block.length; i < len; i++ ) {
            stat = block[ i ];

            switch ( stat.type ) {
            case TYPE.TEXT:
                result.push( replaceVariable( stat.text, scope ) ) ;
                break;

            case TYPE.IMPORT:
                result.push( execImport( stat, scope ) );
                break;

            case TYPE.FOR:
                forScope = new Scope( scope );
                forList  = scope.get( stat.list );
                forItem  = stat.item;
                forIndex = stat.index;
                for ( forI = 0, forLen = forList.length; forI < forLen; forI++ ) {
                    forScope.set( forItem, forList[ forI ] );
                    forIndex && forScope.set( forIndex, forI );
                    result.push( exec( stat, forScope ) );
                }
                break;

            case TYPE.IF:
                ifValid = condExpr.exec( stat.expr, scope );
                while ( !ifValid ) {
                    stat = stat[ 'else' ];
                    if ( !stat ) {
                        break;
                    }
                    ifValid = !stat.expr || condExpr.exec( stat.expr, scope );
                }

                stat && result.push( exec( stat, scope ) );
                break;
            }
        }

        return result.join( '' );
    }

    /**
     * 执行import
     * 
     * @inner
     * @param {Object} importStat import对象
     * @param {Scope} scope
     */
    function execImport( importStat, scope ) {
        var target = getTarget( importStat.id );
        return exec( target, scope );
    }

    /**
     * 解析模板
     *
     * @inner
     * @param {string} source 模板源
     */
    function parse( source ) {
        var stream = nodeAnalyse( source );
        syntaxAnalyse( stream );
    }
    
    /**
     * 合并模板与数据
     * 
     * @inner
     * @param {HTMLElement} output  要输出到的容器元素
     * @param {string}      tplName 模板名
     * @param {string}      opt_privateContextId 私用context环境的id
     */
    function merge( output, tplName, opt_privateContextId ) {
        var html = '';
        var target;
        var scope = {
            get: function ( name ) {
                return er.context.get( name, { 
                    contextId: opt_privateContextId 
                } );
            }
        };

        if ( output ) {
            try {
                target = getTarget( tplName );
                html = exec( target, scope );
            } catch ( ex ) { }

            output.innerHTML = html;
        }
    }

    /**
     * 加载模板
     *
     * @inner
     */
    function load() {
        er.init.stop();

        var list    = er._util.getConfig( 'TEMPLATE_LIST' ),
            len     = list instanceof Array && list.length,
            tplBuf  = [],
            i       = 0;
            
        if ( len && !isLoaded ) {
            isLoaded = 1;
            loadTemplate();
        } else {
            er.init.start();
        }
        
        /**
         * 加载模板成功的回调函数
         * 
         * @inner
         * @param {Object} xhr
         */
        function successCallback( xhr ) {
            tplBuf.push( xhr.responseText );
            loadedCallback();
        }
        
        /**
         * 每条模板加载完毕的处理函数
         * 
         * @inner
         */
        function loadedCallback() {
            i++;
            
            if ( i >= len ) {
                er.template.parse( tplBuf.join( '\n' ) );
                er.init.start();
            } else {
                loadTemplate();
            }
        }
        
        /**
         * 加载模板
         * 
         * @inner
         */
        function loadTemplate() {
            baidu.ajax.request( list[ i ], {
                'method'   : 'get',
                'onsuccess': successCallback,
                'onfailure': loadedCallback
            });
        }
    }

    er.init.addIniter( load, 0 );

    // 返回暴露的方法
    return {
        /**
         * 添加过滤器
         * 
         * @public
         * @param {string} type 过滤器类型
         * @param {Function} filter 过滤器
         */
        addFilter: function ( type, filter ) {
            filterContainer[ type ] = filter;
        },

        /**
         * 获取指定模板target的HTML片段
         * 
         * @public
         * @param {string} name
         * @return {string}
         */
        get: getTargetContent,
        
        /**
         * 解析模板
         * 
         * @public
         * @param {string} source 模板源
         */
        parse: parse,
        
        /**
         * 合并模板与数据
         * 
         * @public
         * @param {HTMLElement} output  要输出到的容器元素
         * @param {string}      tplName 视图模板
         * @param {string}      opt_privateContextId 私用context环境的id
         */
        merge: merge
    };
}();
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/router.js
 * desc:    路由器
 * author:  erik
 */

///import er;

er.router = function () {
    var routes = [];

    function router( loc ) {
        var i, len, item, rule, func, matches;

        for ( i = 0, len = routes.length; i < len; i++ ) {
            item = routes[ i ];
            rule = item.loc;
            func = item.func;

            if ( rule instanceof RegExp
                 && ( matches = rule.exec( loc ) ) !== null
            ) {
                func.apply( this, matches );
                break;

            } else if ( typeof rule == 'string' 
                        && rule == loc
            ) {
                func.call( this, loc );
                break;

            }
        }
    }

    router.add = function ( rule, func ) {
        routes.push( {
            loc  : rule,
            func : func
        } );
    };

    return router;
}();
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/Module.js
 * desc:    er(ecom ria)是一个用于支撑富ajax应用的框架
 */

///import er;

(function () {
    
    var moduleContainer = [];
    
    /**
     * 模块构造器
     * 
     * @public
     * @param {Object} mod 模块对象
     */
    er.Module = function ( mod ) {
        moduleContainer.push( mod );
        return mod;
    };
    
    /**
     * 获取模块列表
     * 
     * @public
     * @return {Array}
     */
    er.Module.getModuleList = function () {
        return moduleContainer;
    };
    
})();
    /*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/locator.js
 * desc:    Hash定位器
 * author:  erik
 */

///import baidu.browser.ie;
///import baidu.browser.firefox;
///import er._util;
///import er.router;
///import er.init;

/**
 * Hash定位器
 * 
 * @desc
 *      Locator = [ path ] [ ~ query ]
 *      path    = "/" [ *char *( "/" *char) ]
 *      query   = *qchar
 *      char    = ALPHA | DIGIT
 *      qchar   = char | "&" | "="
 */
er.locator = function () {
    var currentLocation,
        IFRAME_CONTENT  = "<html><head></head><body><input type=\"text\" id=\"save\">"
            + "<script type=\"text/javascript\">"
            + "var loc = \"#{0}\";"
            + "document.getElementById('save').value = loc;"
            + "parent.er.locator._updateHash(loc);"
            + "parent.er.router(loc);"
            + "</script></body></html>";
    
    /**
     * 获取location信息
     * 
     * @public
     * @return {string}
     */
    function getLocation() {
        var hash;

        // firefox下location.hash会自动decode
        // 体现在：
        //   视觉上相当于decodeURI，
        //   但是读取location.hash的值相当于decodeURIComponent
        // 所以需要从location.href里取出hash值
        if ( baidu.browser.firefox ) {
            hash = location.href.match(/#(.*)$/);
            hash && (hash = hash[ 1 ]);
        } else {
            hash = location.hash;
        }

        if ( hash ) {
            return hash.replace( /^#/, '' );
        }
        
        return '';
    }
    
    /**
     * 更新hash信息
     *
     * @private
     * @param {string} loc
     */
    function updateLocation( loc ) {
        var isChange = currentLocation != loc;

        // 存储当前信息
        // opera下，相同的hash重复写入会在历史堆栈中重复记录
        // 所以需要getLocation来判断
        if ( currentLocation != loc && getLocation() != loc ) {
            location.hash = loc;
        }

        currentLocation = loc;

        isChange && er.locator.onredirect();
        return isChange;
    }

    /**
     * 控制定位器转向
     * 
     * @public
     * @param {string} loc location位置
     * @param {Object} opt_option 转向参数
     */
    function redirect( loc, opt_option ) {
        var opt = opt_option || {};

        // 非string不做处理
        if ( typeof loc != 'string' ) {
            return;
        }
       
        // 增加location带起始#号的容错性
        // 可能有人直接读取location.hash，经过string处理后直接传入
        loc = loc.replace( /^#/, '' );

        // 空string当成DEFAULT_INDEX处理
        if ( loc.length == 0 ) {
            loc = er._util.getConfig( 'DEFAULT_INDEX' ); 
        }

        // 与当前location相同时不进行route
        var isLocChanged = updateLocation( loc );
        if ( isLocChanged || opt.enforce ) {
            loc = currentLocation;

            // 当location未变化，强制刷新时，直接route
            if ( !isLocChanged ) {
                er.router( loc );
            } else {
                doRoute( loc );
            }
        }
    }
    
    /**
     * hash变化的事件监听器
     *
     * @private
     */
    function changeListener() {
        var loc = getLocation();

        if ( !loc ) {
            redirect( '' );
        } else if ( loc !== currentLocation ) {
            updateLocation( loc );
            doRoute( loc );
        }
    }

    function doRoute( loc ) {
        // 权限判断以及转向
        var loc302 = authorize( loc );
        if ( loc302 ) {
            redirect( loc302 );
            return;
        }

        // ie下使用中间iframe作为中转控制
        // 其他浏览器直接调用控制器方法
        if ( baidu.ie && baidu.ie < 8 ) {
            ieRoute( loc );
        } else {
            er.router( loc );
        }
    }

    /**
     * 刷新当前地址
     * 
     * @public
     */
    function reload() {
        if ( currentLocation ) {
            redirect( currentLocation, { enforce: true } );
        }
    }
    
    /**
     * IE下调用router
     * 
     * @private
     * @param {string} loc 地址
     */
    function ieRoute( loc ) {
        var iframe = baidu.g( er._util.getConfig( 'CONTROL_IFRAME_ID' ) ),
            iframeDoc = iframe.contentWindow.document;

        iframeDoc.open( 'text/html' );
        iframeDoc.write(
            baidu.format(
                IFRAME_CONTENT, 
                escapeIframeContent( loc )
            ));
        iframeDoc.close();
    }

    /**
     * iframe内容字符串的转义
     *
     * @private
     * @param {string} 源字符串
     * @return {string}
     */
    function escapeIframeContent( source ) {
        return source.replace( /\\/g, "\\\\" ).replace( /\"/g, "\\\"" );
    }

    /**
     * 初始化locator
     *
     * @private
     */
    function init() {
        if ( baidu.ie && baidu.ie < 8 ) {
            ieCreateIframeRecorder();
            setInterval( changeListener, 100 );
        } 
        else if ( 'onhashchange' in window ) {
            window.onhashchange = changeListener;
            changeListener();
        } else {
            setInterval( changeListener, 100 );
        }
    }
    
    /**
     * ie下创建记录与控制跳转的iframe
     *
     * @private
     */
    function ieCreateIframeRecorder() {
        var iframe = document.createElement('iframe'),
            size   = 200,
            pos    = '-1000px';

        iframe.id       = er._util.getConfig( 'CONTROL_IFRAME_ID' );
        iframe.width    = size;
        iframe.height   = size;
        iframe.src      = "about:blank";

        iframe.style.position   = "absolute";
        iframe.style.top        = pos;
        iframe.style.left       = pos;

        document.body.appendChild(iframe);
    }
    
    var authorizers = [];

    /**
     * 增加权限验证器
     *
     * @public
     * @param {Function} authorizer 验证器，验证失败时验证器返回转向地址
     */
    function addAuthorizer( authorizer ) {
        if ( 'function' == typeof authorizer ) {
            authorizers.push( authorizer );
        }
    }
    
    /**
     * 权限验证
     *
     * @inner
     * @return {string} 验证失败时验证器返回转向地址
     */
    function authorize( currLoc ) {
        var i = 0;
        var len = authorizers.length;
        var loc;

        for ( ; i < len; i++ ) {
            loc = authorizers[ i ]( currLoc );
            if ( loc ) {
                return loc;
            }
        }
    }
    
    // 注册初始化函数
    er.init.addIniter( init, 2 );

    // 返回暴露的方法
    return {
        'redirect'          : redirect,
        'reload'            : reload,
        'getLocation'       : getLocation,
        '_updateHash'       : updateLocation,
        'onredirect'        : new Function(),
        'addAuthorizer'     : addAuthorizer
    };
}();

/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/permission.js
 * desc:    权限管理器
 * author:  erik
 */

///import er;
    
/**
 * 权限管理器
 * 
 * @desc
 *      权限管理器为页面提供了是否允许访问的权限控制，也能通过isAllow方法判断是否拥有权限。
 */
er.permission = function () {
    var permissible = {};
    
    return {
        /**
         * 初始化权限数据
         * 
         * @public
         * @param {Object} data 权限数据
         */
        init: function ( data ) {
            var key, item;

            for ( key in data ) {
                item = data[ key ];

                if ( 'object' == typeof item ) {
                    er.permission.init( item );
                } else /*if ( item )*/ { //这里很坑爹的，假如要清楚权限，比如赋值一个0，就熄火了。。。
                    permissible[ key ] = item;
                }
            }
        },
        
        /**
         * 判断是否拥有权限
         * 
         * @public
         * @param {string} name 权限名
         * @return {boolean}
         */
        isAllow: function ( name ) {
            return !!permissible[ name ];
        }
    };
}();

/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/controller.js
 * desc:    控制器
 * author:  erik
 */

///import er.router;
///import er.Module;
///import er.locator;
///import er.permission;
///import er.init;
///import baidu.sio.callByBrowser;
    
/**
 * 控制器
 * 
 * @desc
 *      控制器负责将对应的path转向给相应的action对象处理
 */
er.controller = function () {
    var contextContainer = {},
        configContainer  = {},
        locationRule     = /^([\/a-zA-Z0-9_-]+)(?:~(.*))?$/,
        mainActionContext,
        currentPath,
        currentLocation,
        _isEnable = 1;

    /**
     * 将参数解析为Map
     * 
     * @inner
     * @param {string} query 参数字符串
     * @return {Object}
     */
    function _parseQuery( query ) {
        query = query || '';
        var params      = {},
            paramStrs   = query.split( '&' ),
            len         = paramStrs.length,
            item,
            value;

        while ( len-- ) {
            item = paramStrs[ len ];
            if ( !item ) {
                continue;
            }
            
            item = item.split( '=' );
            value = decodeURIComponent( item[ 1 ] );
            params[ item[ 0 ] ] = value;
        }

        return params;
    }

    /**
     * 跳转视图
     * 
     * @public
     * @param {string} loc 定位器
     * @param {Object} path 路径
     * @param {Object} query 查询条件
     */
    function forward( loc, path, query ) {
        if ( !_isEnable ) { 
            return; 
        }

        /*
        // location相同时不做forward
        if ( loc == currentLocation ) {
            return;
        }
        */
        
        if ( !path ) {
            locationRule.test( loc );
            path = RegExp.$1;
            query = RegExp.$2;
        }

        var arg = {  // 组合所需的argument对象
                type     : 'main',
                referer  : currentLocation,
                queryMap : _parseQuery( query ) || {},
                path     : path,
                domId    : er._util.getConfig( 'MAIN_ELEMENT_ID' )
            },
            actionConfig,
            actionName,
            actionPath,
            action;  
        
        // path未发生变化时，不卸载和重新加载
        if ( path == currentPath ) {
            arg.refresh = true;
            mainActionContext && ( mainActionContext.enter( arg ) );
        } else {
            unloadAction( mainActionContext );
            mainActionContext   = null;
            currentPath         = null;
            currentLocation     = null;
            
            // 查找action配置
            actionConfig = getActionConfigByPath( path );
            if ( !actionConfig ) {
                throw new Error('ER: the path "' + path + '" cannot bind to action.');
                return;
            }
            
            // 记录当前的path
            currentPath = path; 
            
            // 加载action
            actionName = actionConfig.action;
            action     = findAction( actionName );
            actionPath = getActionPath( actionName );
            if ( action || !actionPath ) {
                _loadAction( action, arg );
            } else if ( actionPath ) {
                baidu.sio.callByBrowser( actionPath, function () {
                    _loadAction( findAction( actionName ), arg );
                });
            }
        }

        // 记录当前的locator    
        currentLocation = loc; 
        
        /**
         * 加载action
         *
         * @inner
         */
        function _loadAction( action, arg ) {
            mainActionContext = loadAction( action, arg );
        }
    }
    
    /**
     * 根据path获取action配置
     * 
     * @public
     * @param {string} path
     * @return {Object}
     */
    function getActionConfigByPath( path ) {
        return configContainer[ path ];
    }

    /**
     * 加载action
     * 
     * @private
     * @param {Object} action        action对象
     * @param {Object} arg           加载action的参数
     * @param {string} opt_privateId 私有环境id
     */
    function loadAction( action, arg, opt_privateId ) {
        if ( action && action.prototype instanceof er.IAction ) {
            var actionContextId = er._util.getUID(),
                actionContext;
            
            
            arg = arg || {};
            arg._contextId = actionContextId;
            actionContext = new action( actionContextId );
            contextContainer[ actionContextId ] = actionContext;
            actionContext.enter( arg );
            
            return actionContext;
        }

        return null;
    }

    
    /**
     * 卸载action
     * 
     * 重置会话。卸载控件并清除显示区域内容
     * @private
     */
    function unloadAction( context ) {
        if ( typeof context == 'string' ) {
            context = contextContainer[ context ];
        }

        if ( !context ) {
            return;
        }
        
        context.leave();
        delete contextContainer[ context._contextId ];
    }

    /**
     * 初始化controller
     * 
     * @public
     */
    function init() {
        var moduleContainer = er.Module.getModuleList(),
            i   = 0, 
            len = moduleContainer.length,
            j, len2,
            path,
            module, actions, actionConfig;
        
        for ( ; i < len; i++ ) {
            module = moduleContainer[ i ];
            
            // 初始化module
            if ( 'function' == typeof module.init ) {
                module.init();
            }
            
            // 注册action
            actions = module.config && module.config.action;
            if ( actions ) {
                for ( j = 0, len2 = actions.length; j < len2; j++ ) {
                    actionConfig = actions[ j ];
                    path = actionConfig.path;
                    
                    configContainer[ path ] = actionConfig;
                }
            }
        }

        // 添加route规则
        er.router.add( locationRule, er.controller.forward );

        // 添加权限验证器
        er.locator.addAuthorizer( _authJudge );
    }
    
    /**
     * 权限验证函数，验证失败时返回自动转向地址
     *
     * @inner
     * @param {string} loc location
     * @return {string} 
     */
    function _authJudge( loc ) {
        if ( !locationRule.test( loc ) ) {
            return null;
        }

        var path = RegExp.$1;
        var actionConfig = getActionConfigByPath( path );
        if ( !actionConfig ) {
            throw new Error('ER: the path "' + path + '" cannot bind to action.');
            return;
        }
        
        var actionAuth = actionConfig.authority;
        
        // 权限判断
        if ( actionAuth && !er.permission.isAllow( actionAuth ) ) {
            return actionConfig.noAuthLocation || getConfig( 'DEFAULT_INDEX' );
        }

        return null;
    }

    /**
     * 查找获取Action对象
     * 
     * @private
     * @param {string|Object} actionName action的对象路径 | action配置对象
     */
    function findAction( actionName ) {
        if ( !actionName ) {
            return null;
        } else if ( 'object' == typeof actionName ) {
            actionName = actionName.action;
        }
        
        var action = window,
            props = actionName.split('.'),
            i, len;
        
        for ( i = 0, len = props.length; i < len; i++ ) {
            action = action[ props[ i ] ];
            if ( !action ) {
                action = null;
                break;
            }
        }
        
        return action;
    }
    
    /**
     * 载入子action
     * 
     * @public
     * @param {string} domId 加载action的容器元素id
     * @param {string|Object} actionName action的对象路径 | action配置对象
     * @param {Object} opt_argMap 一些可选的arg参数
     */
    function loadSub( domId, actionName, opt_argMap ) {
        if ( !_isEnable || !actionName ) { 
            return null; 
        }

        var action,
            actionPath  = getActionPath( actionName ),
            arg         = {type: 'sub', domId: domId},
            privateId;
        
        // 查找action
        if ( typeof actionName == 'string' ) {
            action = findAction( actionName );
        }
        
        // 初始化arg参数
        if ( opt_argMap ) {
            baidu.extend( arg, opt_argMap );
        }
        
        // 加载action，action不存在时自动加载
        if ( action || !actionPath ) {
            return loadAction( action, arg );
        } else {
            privateId = er._util.getUID();
            baidu.sio.callByBrowser( actionPath, function () {
                loadAction( findAction( actionName ), arg, privateId );
            });

            return privateId;
        }
    }

    /**
     * 通过path载入子action
     * 
     * @public
     * @param {string} domId 加载action的容器元素id
     * @param {string} path 要加载的path，path需要在module中配置过action
     * @param {Object} opt_argMap 一些可选的arg参数
     */
    function loadSubByPath( domId, path, opt_argMap ) {
        var actionConfig = getActionConfigByPath( path );
        if ( !actionConfig ) {
            throw new Error('ER: the path "' + path + '" cannot bind to action.');
            return null;
        }

        return loadSub( domId, actionConfig.action, opt_argMap );
    }
    
    /**
     * 触发Action的事件
     *
     * @public
     * @param {string}        type              事件名
     * @param {Any}           eventArg          事件对象
     * @param {string|Object} opt_actionRuntime action的runtime id或对象
     */
    function fireActionEvent( type, eventArg, opt_actionRuntime ) {
        var actionCtx;

        if ( opt_actionRuntime ) {
            actionCtx = opt_actionRuntime;
            if ( typeof actionCtx == 'string' ) {
                actionCtx = contextContainer[ actionCtx ];
            }
        } else {
            actionCtx = mainActionContext;
        }

        actionCtx && actionCtx.fireEvent( type, eventArg );
    }
    
    /**
     * 设置控制器可用状态
     *
     * @inner
     * @param {boolean} isEnable
     */
    function enable( isEnable ) {
        _isEnable = isEnable;
    }

    /**
     * 获取ACTION的路径
     * 
     * @inner
     * @param {string} ACTION ACTION的名称
     * @return {string}
     */
    function getActionPath( actionName ) {
        var rootPath        = er._util.getConfig( 'ACTION_ROOT' );
        var actionPath      = er._util.getConfig( 'ACTION_PATH' );
        var autoLoadMode    = er._util.getConfig( 'ACTION_AUTOLOAD' );
        var path = rootPath + (/\/$/.test(rootPath) ? '' : '/');
        var relatePath;

        if ( autoLoadMode ) {
            relatePath = actionPath[ actionName ]; // 查找配置项

            // 根据默认规则生成path
            if ( !relatePath ) {
                switch ( String(autoLoadMode).toLowerCase() ) {
                case 'action':  // action粒度规则
                    path += actionName.replace( /\./g, '/' ) + '.js';
                    break;
                default:        // module粒度规则
                    actionName = actionName.split('.');
                    actionName.pop();
                    path += actionName.join('/') + '.js';
                    break;
                }
            } else {
                path += relatePath;
            }

            return path;
        }

        return '';
    }
    
    // 注册初始化函数
    er.init.addIniter( init, 1 );

    return {
        forward         : forward,
        _enable         : enable,
        loadSub         : loadSub,
        loadSubByPath   : loadSubByPath,
        unloadSub       : unloadAction,
        fireEvent       : fireActionEvent,
        fireMain        : function (type, eventArg) {fireActionEvent(type, eventArg);},
        getActionConfigByPath       : getActionConfigByPath
    };
}();
    
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/context.js
 * desc:    context为上下文数据提供环境，分为public,private两个级别
 * author:  erik
 */

///import er;

/**
 * 运行时的上下文数据管理器
 */
er.context = function () {
    var publicContext = {},    // public级别数据容器
        privateContext = {},   // private级别数据容器
        changeListeners = [];  // context变化的监听器容器

    return {
        /**
         * 设置应用环境上下文
         * 
         * @name er.context.set
         * @public
         * @param {string} name 环境变量名
         * @param {Any}    value 环境变量值
         * @param {Object} [opt_arg] 设置选项
         *     @config {string} [contextId] 私有环境id
         */
        set: function ( name, value, opt_arg ) {
            opt_arg         = opt_arg || {};
            var contextId   = opt_arg.contextId;  
            var context     = contextId ? privateContext[ contextId ] : publicContext;
            var evtArg      = {};
            var newValue    = value;
            var i, len;
            
            if ( !context ) {
                throw new Error('ER: private context "' + contextId + '" is not exist.');
            }
            
            if ( !opt_arg.silence ) {
                // 初始化event argument
                contextId && ( evtArg.contextId = contextId );
                evtArg.name     = name;
                evtArg.oldValue = context[ name ] || null;
                evtArg.newValue = newValue;
                
                // change事件触发
                for ( i = 0, len = changeListeners.length; i < len; i++ ) {
                    changeListeners[ i ].call( er.context, evtArg );
                }
            }

            context[ name ] = newValue;
        },
        
        /**
         * 增加私有环境
         * 
         * @public
         * @name er.context.addPrivate
         * @param {string} contextId 私有环境id
         * @param {Object} [opt_container] 数据容器对象
         */
        addPrivate: function ( contextId, opt_container ) {
            if ( !privateContext[ contextId ] ) {
                privateContext[ contextId ] = opt_container || {};
            }
        },
        
        /**
         * 移除私有环境
         * 
         * @public
         * @name er.context.removePrivate
         * @param {string} contextId 私有环境id
         */
        removePrivate: function ( contextId ) {
            privateContext[ contextId ] = null; 
        },
        
        /**
         * 获取上下文环境变量
         * 
         * @public
         * @name er.context.get
         * @param {string} name 上下文变量名
         * @param {Object} opt_arg 读取选项
         *     @config {string} [contextId] 私有环境id
         * @return {Any}
         */
        get: function ( name, opt_arg ) {
            opt_arg = opt_arg || {};

            var contextId = opt_arg.contextId;
            var value;
            var priv;
                
            if ( 'string' == typeof contextId ) {
                priv = privateContext[ contextId ];
                value = priv && priv[ name ];
            }
            
            if ( er._util.hasValue( value ) ) {
                return value;
            }
            
            value = publicContext[ name ];
            if ( er._util.hasValue( value ) ) {
                return value;
            }
    
            return null;
        },

        /**
         * 增加context的change事件监听器
         *
         * @public
         * @name er.context.addChangeListener
         * @param {Function} listener 监听器
         */
        addChangeListener: function ( listener ) {
            changeListeners.push( listener );
        },
        
        /**
         * 移除context的change事件监听器
         *
         * @public
         * @name er.context.addChangeListener
         * @param {Function} listener 监听器
         */
        removeChangeListener: function ( listener ) {
            var len = changeListeners.length;
            while ( len-- ) {
                if ( listener === changeListeners[ len ] ) {
                    changeListeners.splice( len, 1 );
                }
            }
        }
    };
}();
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/Model.js
 * desc:    Model类
 * author:  erik
 */

///import er.context;
///import er._util;

er.Model = function () {
    function Model( extend ) {
        var construct = new Function();
        construct.prototype = extend;
        baidu.inherits( construct, Model );

        return construct;
    }

    Model.prototype = {
        /**
         * 构造model实例
         *
         * @public
         * @param {Object} options 构造参数
         */
        construct: function ( option ) {
            option = option || {};

            this._guid              = option.guid || er._util.getUID();
            this._container         = {};
            this._changeListener    = this.__getChangeListener();
            this._changeListeners   = [];
            this.action             = option.action;

            er.context.addPrivate( this._guid, this._container );
            er.context.addChangeListener( this._changeListener );
        },
        
        /**
         * 设置数据
         *
         * @public
         * @param {string} name 数据名
         * @param {Any} value 数据值
         */
        set: function ( name, value, opt_arg ) {
            var arg = baidu.object.clone( opt_arg || {} );
            arg.contextId = this._guid;

            er.context.set( name, value, arg );
        },
        
        /**
         * 获取数据
         *
         * @public
         * @param {string} name 数据名
         * @return {Any}
         */
        get: function ( name ) {
            return er.context.get( name, { contextId: this._guid } );
        },
        
        /**
         * 停止model加载动作
         *
         * @public
         */
        stop: function () {
            if ( this._phase == 'loading' ) {
                this._phase = 'waiting';
            }
        },
        
        /**
         * 开始model加载动作
         *
         * @public
         */
        start: function () {
            if ( this._phase == 'waiting' ) {
                this._phase = 'loading';
                this.__continue();
            }
        },
        
        /**
         * 加载model
         *
         * @public
         * @param {Function} finishedCallback 加载完成回调函数
         */
        load: function ( finishedCallback ) {
            this._phase = 'loading';

            this._loaderList = this.LOADER_LIST || [];
            this._loaderIndex = 0;
            this._loaderCount = this._loaderList.length;

            this._finishedCallback = finishedCallback || new Function();
            this.__continue();
        },
        

        /**
         * 继续加载model
         *
         * @private
         */
        __continue: function () {
            if ( this._phase != 'loading' ) {
                return;
            }

            if ( this._loaderIndex >= this._loaderCount ) {
                this._phase = null;
                this._finishedCallback();
                return;
            }
            
            var loader = this[ this._loaderList[ this._loaderIndex++ ] ];
            loader.setModel( this );
            loader.load();

            this.__continue();
        },
        
        /**
         * 添加数据变化的监听器
         *
         * @public
         * @param {Function} listener 监听器
         */
        addChangeListener: function ( listener ) {
            this._changeListeners.push( listener );
        },
        
        /**
         * 移除数据变化的监听器
         *
         * @public
         * @param {Function} listener 监听器
         */
        removeChangeListener: function ( listener ) {
            var changeListeners = this._changeListeners;
            var len = changeListeners.length;

            while ( len-- ) {
                if ( listener === changeListeners[ len ] ) {
                    changeListeners.splice( len, 1 );
                }
            }
        },

        /**
         * 释放model
         *
         * @public
         */
        dispose: function () {
            er.context.removePrivate( this._guid );
            er.context.removeChangeListener( this._changeListener );
            
            this.action = null;
            this._container = null;
            this._changeListener = null;
            this._changeListeners = null;
        },
        
        /**
         * 获取model唯一标识
         *
         * @public
         * @return {string}
         */
        getGUID: function () {
            return this._guid;
        },
        
        /**
         * 获取参数字符串
         *
         * @public
         * @param {Object} opt_queryMap 参数映射表，默认使用model的QUERY_MAP项
         * @return {string}
         */
        getQueryString: function ( opt_queryMap ) {
            var queryMap = opt_queryMap || this.QUERY_MAP,
                buffer   = [],
                value,
                key;
                
            if ( queryMap ) {
                for ( key in queryMap ) {
                    value = this.get( queryMap[ key ] );
                    if ( er._util.hasValue( value ) ) {
                        buffer.push( key + '=' + encodeURIComponent( value ) );
                    }
                }
                
                return buffer.join( '&' );
            }
            
            return '';
        },

        onchange: new Function(),
        
        /**
         * 获取数据模型变化的事件监听器
         *
         * @private
         * @return {Function}
         */
        __getChangeListener: function () {
            var me = this;
            return function ( event ) {
                if ( event.contextId == me._guid ) {
                    var evtArg = {
                        name    : event.name,
                        oldValue: event.oldValue,
                        newValue: event.newValue
                    };
                    var changeListeners = me._changeListeners;
                    var i = 0;
                    var len = changeListeners.length;

                    me.onchange( evtArg );
                    for ( ; i < len; i++ ) {
                        changeListeners[ i ].call( me, evtArg );
                    }
                }
            };
        }
    };

    return Model;
}();

/**
 * model加载器
 *
 * @class
 */
er.Model.Loader = function ( func, opt_option ) {
    this._func = func;
};

er.Model.Loader.prototype = {
    /**
     * 设置当前加载的model
     *
     * @public
     * @param {er.Model} model 当前加载的model
     */
    setModel: function ( model ) {
        this.model = model;
    },

    /**
     * 加载model
     *
     * @public
     */
    load: function () {
        this._func.call( this.model );
    },

    /**
     * 停止加载
     *
     * @public
     */
    stop: function () {
        this.model.stop();
    },
    
    /**
     * 启动加载
     *
     * @public
     */
    start: function () {
        this.model.start();
    },
    
    /**
     * 获取model数据
     *
     * @public
     * @param {string} name 数据名
     * @return {Any}
     */
    get: function () {
        return this.model.get.apply( 
            this.model, 
            Array.prototype.slice.call( arguments, 0 ) 
        );
    },

    /**
     * 填充model数据
     *
     * @public
     * @param {string} name 数据名
     * @param {Any} value 数据值
     */
    set: function () {
        this.model.set.apply( 
            this.model, 
            Array.prototype.slice.call( arguments, 0 ) 
        );
    },
    
    /**
     * 获取参数字符串
     *
     * @public
     * @param {Object} opt_queryMap 参数映射表，默认使用model的QUERY_MAP项
     * @return {string}
     */
    getQueryString: function ( opt_queryMap ) {
        return this.model.getQueryString( opt_queryMap );
    }
};
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/IAction.js
 * desc:    Action接口声明
 * author:  erik
 */

///import er;
    
/**
 * Action接口声明
 */
er.IAction = function () {
};

/**
 * Action接口的enter方法声明
 */
er.IAction.prototype.enter = function ( args ) {
};

/**
 * Action接口的leave方法声明
 */
er.IAction.prototype.leave = function () {
};
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/View.js
 * desc:    视图类
 * author:  erik
 */

///import er.Model;
///import er.template;
///import baidu.object.extend;
///import baidu.lang.inherits;

er.View = function () {
    var ext_ = {};

    function View( options ) {
        var construct = new Function();

        options && (construct.prototype = options);
        baidu.extend( construct.prototype, ext_ );
        baidu.inherits( construct, arguments.callee );
        return construct;
    }

    View.prototype = {
        /**
         * 构造view实例
         *
         * @public
         * @param {Object} options 构造参数
         */
        construct: function ( options ) {
            if ( options && typeof options == 'object' ) {
                this.setTarget( options.target );
                this.setTemplate( options.template );
                this.setModel( options.model );
            }
        },
        
        /**
         * 设置渲染目标
         *
         * @public
         * @param {string|HTMLElement} target 目标元素或id
         */
        setTarget: function ( target ) {
            target && (this.target = target);
        },
        
        /**
         * 设置模板名
         *
         * @public
         * @param {string} template 模板名
         */
        setTemplate: function ( template ) {
            template && ( this.template = template );
        },
        
        /**
         * 设置数据模型
         *
         * @public
         * @param {er.Model} model 数据模型
         */
        setModel: function ( model ) {
            this.model = model;
        },
        
        /**
         * 渲染视图
         *
         * @public
         */
        render: function () {
            var target = baidu.g( this.target );
            er.template.merge( target, this.template, this.model.getGUID() );
        },
        
        /**
         * 重绘视图
         *
         * @public
         */
        repaint: function () {
            this.render();
        },

        /**
         * 清空视图
         *
         * @public
         */
        clear: function () {
            var target = baidu.g( this.target );
            target && (target.innerHTML = '');
        }
    };

    /**
     * 扩展渲染功能
     *
     * @static
     * @public
     * @param {Object} ext 扩展功能
     */
    View.extend = function ( ext ) {
        baidu.extend( ext_, ext );
    };
 
    return View;
}();



/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/AbstractAction.js
 * desc:    Action的抽象类
 * author:  erik
 */

///import er.IAction;
///import er.context;
///import er.Model;
///import er.View;
///import er._util;
///import baidu.lang.inherits;

er.AbstractAction = function () {

    function AbstractAction_() {}

    // Action的基础功能
    AbstractAction_.prototype = {
        /**
         * 生命周期阶段声明
         */
        LIFECYCLE_PHASE: {
            'enter'             : 1,
            'leave'             : 1,
            'entercomplete'     : 1,
            'beforeloadmodel'   : 1,
            'afterloadmodel'    : 1,
            'beforerender'      : 1,
            'afterrender'       : 1,
            'beforerepaint'     : 1,
            'afterrepaint'      : 1
        },
        
        /**
         * 进入阶段
         *
         * @private
         * @param {string} phase 阶段名
         */
        __moveOntoPhase: function ( phase ) {
            if ( this.LIFECYCLE_PHASE[ phase ] ) {
                this._phase = phase;
                this[ '__' + phase ] && this[ '__' + phase ].call( this );
            }
        },
        
        /**
         * 进入当前action
         * 
         * @protected
         * @param {Object} arg 进入的参数
         * @desc
         *      render与repaint时都从enter入口，只有path离开才leave
         *      来易来，去难去……
         */
        enter: function ( arg ) {
            arg = arg || {};
            
            var me = this;
            var queryMap = arg.queryMap || {};
            var key;
            var viewClazz;
            var templateName;
           
            // 保存arg    
            this.arg = arg; 
            
            // 初始化guid
            if ( !this.guid ) {
                this.guid = arg._contextId;
            }

            // 初始化model
            if ( !this.hasOwnProperty( 'model' ) ) {
                this.model = new (this.model || new er.Model())();
                this.model.construct( {
                    guid    : this.guid,
                    action  : this
                } );
            }

            // 初始化视图生成器
            if ( !this.hasOwnProperty( 'view' ) ) {
                templateName = this.template || this.view || '';
                if ( typeof templateName == 'function' ) {
                    templateName = templateName.call( this );
                }
                
                viewClazz = this.view;
                if ( !viewClazz || !( viewClazz.prototype instanceof er.View ) ) {
                    viewClazz = new er.View;
                }

                this.view = new viewClazz();
                this.view.construct( {
                    target      : arg.domId,
                    template    : templateName,
                    model       : this.model
                } );
            }

            this.__moveOntoPhase( 'enter' );
            
            // 将query装填入model
            for ( key in queryMap ) {
                this.model.set( key, queryMap[ key ] );
            }

            // 初始化context
            this.__moveOntoPhase( 'beforeloadmodel' );
            this.model.load( callback );      
            
            /**
             * 初始化context后的回调，用于绘制主区域或重绘控件
             * 
             * @inner
             */
            function callback() {
                me.__moveOntoPhase( 'afterloadmodel' );
                if ( arg.refresh ) {
                    me.__moveOntoPhase( 'beforerepaint' );
                    me.view.repaint();
                    me.__moveOntoPhase( 'afterrepaint' );
                } else {
                    me.__moveOntoPhase( 'beforerender' );
                    me.view.render();
                    me.__moveOntoPhase( 'afterrender' );
                }
                me.__moveOntoPhase( 'entercomplete' );
            }
        },
        
        /**
         * 获取参数
         * 
         * @param {string} name 参数名
         * @return {string}
         */
        getQuery: function ( name ) {
            var queryMap = this.arg.queryMap || {};
            return queryMap[ name ] || '';
        },

        /**
         * 离开当前action
         * 
         * @protected
         */
        leave: function () {
            this.__moveOntoPhase( 'leave' );
            this.dispose();
        },
        
        /**
         * 执行离开时的清理动作
         * 
         * @protected
         */
        dispose: function () {
            // 释放model
            this.model.dispose();
            delete this.model;
            
            // 清空视图
            this.view.clear();
            delete this.view;
        }
    };

    baidu.inherits( AbstractAction_, er.IAction );
    return AbstractAction_;

}();
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/Action.js
 * desc:    Action的构造器
 * author:  erik
 */

///import er.AbstractAction;
///import er._util;
///import baidu.lang.inherits;
///import baidu.object.extend;

er.Action = function () {
    
    // 声明Action扩展对象
    var ActionBaseX_ = {};

    /**
     * Action类
     * 
     * @desc 
     *      实现action的加载与重绘以及常用列表页与表单页的基础功能
     * @param {Object} obj 业务action功能对象
     * @param {string} opt_name action名，加载默认action的基础功能
     */
    function Action_( obj, opt_name ) {
        var construct = arguments.callee;
        var superClazz = opt_name ? ( ActionBaseX_[ opt_name ] || construct ) : construct;
        
        var clazz = new Function();
        clazz.prototype = obj;
        baidu.inherits( clazz, superClazz );
        return clazz;
    };

    
    Action_.prototype = {
        /**
         * enter时的内部行为
         *
         * @protected
         */ 
        __enter: function () {
            this.__fireEvent( 'enter' );
        },

        /**
         * 开始重绘前的内部行为
         *
         * @protected
         */      
        __beforerender: function () {
            this.__fireEvent( 'beforerender' );
        },
        
        /**
         * 重绘完成后的内部行为
         *
         * @protected
         */      
        __afterrender: function () {
            this.__fireEvent( 'afterrender' );
        },

        /**
         * 开始重绘前的内部行为
         *
         * @protected
         */      
        __beforerepaint: function () {
            this.__fireEvent( 'beforerepaint' );
        },

        /**
         * 重绘完成后的内部行为
         *
         * @protected
         */      
        __afterrepaint: function () {
            this.__fireEvent( 'afterrepaint' );
        },

        /**
         * model加载完成后的内部行为
         *
         * @protected
         */      
        __afterloadmodel: function () {
            this.__fireEvent( 'afterloadmodel' );
        },

        /**
         * model加载前的内部行为
         *
         * @protected
         */      
        __beforeloadmodel: function () {
            var arg = this.arg;
            var queryMap = arg.queryMap;
            var key, value;

            for ( key in queryMap ) {
                value = queryMap[ key ];
                this.model.set( key, value );
            }
            
            this.__fireEvent( 'beforeloadmodel' );
        },

        /**
         * enter完成的内部行为
         *
         * @protected
         */
        __entercomplete: function () {
            this.__fireEvent( 'entercomplete' );
        },

        /**
         * leave的内部行为
         *
         * @protected
         */
        __leave: function () {
            this.__fireEvent( 'leave' );
        },

        /**
         * 自定义事件触发
         *
         * @public
         * @param {string} type 事件名
         * @param {Any} eventArg 事件对象
         */
        fireEvent: function ( type, eventArg ) {
            type = type.replace( /^on/i, '' );
            if ( this.LIFECYCLE_PHASE[ type ] ) {
                throw new Error("ER: Reserve event cannot be fired manually.");
                return;
            }

            this.__fireEvent( type, eventArg );
        },
        
        /**
         * 事件触发的内部方法
         *
         * @private
         * @param {string} type 事件名
         * @param {Any} eventArg 事件对象
         */
        __fireEvent: function ( type, eventArg ) {
            type = type.replace( /^on/i, '' );

            eventHandler = this[ 'on' + type ];
            if ( typeof eventHandler == 'function' ) {
                eventHandler.call( this, eventArg );
            }

            if ( this.LIFECYCLE_PHASE[ type ] ) {
                eventHandler = Action_[ 'on' + type ];
                if ( typeof eventHandler == 'function' ) {
                    eventHandler.call( this, eventArg );
                }
            }
        }
    }; 

    // 实现IAction
    baidu.inherits( Action_, er.AbstractAction );

    /**
     * 扩展Action的功能
     * 
     * @public
     * @param {Object} ext 扩展的功能对象
     * @param {string} opt_name 扩展别名，不提供则扩展默认Action
     */
    Action_.extend = function ( ext, opt_name ) {
        var key, 
            base = Action_.prototype;
        
        if ( opt_name ) {
            base = ActionBaseX_[ opt_name ];
            if ( !base ) {
                base = new Function();
                base.prototype = ext;
                baidu.inherits( base, Action_ );

                ActionBaseX_[ opt_name ] = base;
                return;
            }
            base = base.prototype;
        }
        
        for ( key in ext ) {
            base[ key ] = ext[ key ];
        }
    };
    
    return Action_;
}();
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/extend.js
 * desc:    扩展包容器声明
 * author:  erik
 */


er.extend = {};
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/extend/ui.js
 * desc:    UI扩展
 * author:  erik
 */

///import er.extend;
///import er.context;
///import er.Action;
///import er.View;

er.extend.ui = function () {
    var uiExtend = {};

    // 视图扩展
    er.View.extend( {
        /**
         * 渲染视图
         *
         * @public
         */
        render: function () {
            er.View.prototype.render.call( this );
            var dataControl = {};
            var controlData = {};
            var contextId   = this.model.getGUID();;

            function attrReplacer( attrMap ) {
                var key;
                var attrValue;
                var dataName;
                var controlId = attrMap.id;

                for ( key in attrMap ) {
                    attrValue = attrMap[ key ];
                    if ( typeof attrValue == 'string' && attrValue.indexOf('*') === 0 ) {
                        dataName = attrValue.substr( 1 );

                        // 存储数据的控件引用
                        !dataControl[ dataName ] && ( dataControl[ dataName ] = [] );
                        dataControl[ dataName ].push( controlId + ':' + key );

                        // 存储控件的数据引用
                        !controlData[ controlId ] && ( controlData[ controlId ] = [] );
                        controlData[ controlId ].push( key + ':' + dataName );

                        attrMap[ key ] = er.context.get( dataName, { contextId: contextId } );
                    }
                }
            }
            
            this._dataControl = dataControl;
            this._controlData = controlData;
            this._controlMap = uiExtend.adapter.init(
                baidu.g( this.target ), 
                this.UI_PROP, 
                attrReplacer
            );
            //console.log(
        },
        
        /**
         * 重绘视图
         *
         * @public
         * @param {Object} opt_controlMap 要重绘的控件集合，默认重绘所有控件
         */
        repaint: function ( opt_controlMap ) {
            opt_controlMap = opt_controlMap || this._controlMap;
        
            var key;
            var control;
            var refer;
            var referTmp;
            var referName;
            var referRef;
            var i;
            var len;
            var uiAdapter = uiExtend.adapter;
            var ctrlData  = this._controlData;
           
            for ( key in opt_controlMap ) {
                control = opt_controlMap[ key ];
                refer = ctrlData[ key ];

                if ( control && refer ) {
                    // 重新灌入数据
                    for ( i = 0, len = refer.length; i < len ; i++ ) {
                        referTmp = refer[ i ].split( ':' );
                        uiAdapter.setControlAttribute( 
                            control, 
                            referTmp[ 0 ],
                            this.model.get( referTmp[ 1 ] )
                        );
                    }
                    
                    // 重绘控件
                    uiAdapter.repaint( control );     
                }
            }
        },

        /**
         * 根据Model重绘视图
         *
         * @public
         * @param {string} name model数据的名称
         * @param {Any} value model新数据的值
         */
        repaintByModel: function ( name, value ) {
            var controls  = this._dataControl[ name ];
            var uiAdapter = uiExtend.adapter;
            var temp;
            var i;
            var len;
            var control;

            if ( controls ) {
                for ( i = 0, len = controls.length; i < len; i++ ) {
                    temp = controls[ i ].split( ':' );
                    control = uiAdapter.get( temp[ 0 ] );
                    uiAdapter.setControlAttribute( 
                        control, 
                        temp[ 1 ],
                        value
                    );

                    uiAdapter.repaint( control );
                }
            }
        },

        /**
         * 获取表单控件列表
         * 
         * @public
         * @return {Array}
         */
        getInputList: function () {
            var controlMap = this._controlMap,
                inputList  = [],
                key, control;
                
            // 统计input控件列表
            for ( key in controlMap ) {
                control = controlMap[ key ];
                if ( uiExtend.adapter.isInput( control ) ) {
                    inputList.push( control );
                }
            }
            
            return inputList;
        },
        
        /**
         * 清空视图
         *
         * @public
         */
        clear: function () {
            uiExtend.adapter.uninit( this._controlMap );
            this._controlMap = null;
            this._dataControl = null;
            this._controlData = null;
            er.View.prototype.clear.call( this );
        }
    } );

    er.Action.extend( {
        MODEL_SILENCE: true,

        /**
         * 移除model数据变化的监听器
         *
         * @protected
         */
        __removeModelChangeListener: function () {
            if ( this._modelChangeListener && this.model ) {
                this.model.removeChangeListener( this._modelChangeListener );
            }
        },
        
        /**
         * 添加model数据变化的监听器
         *
         * @protected
         */
        __addModelChangeListener: function () {
            if ( this.MODEL_SILENCE ) {
                return;
            }

            if ( !this._modelChangeListener ) {
                this._modelChangeListener = this.__getModelChangeListener();
            }

            this.model.addChangeListener( this._modelChangeListener );
        },
        
        /**
         * 获取model数据变化的监听器
         *
         * @protected
         * @return {Function}
         */
        __getModelChangeListener: function () {
            var me = this;

            return function ( eventArg ) {
                me.view.repaintByModel( eventArg.name, eventArg.newValue );
            };
        },

        /**
         * enter时的内部行为
         *
         * @protected
         */ 
        __enter: function () {
            this.__removeModelChangeListener();
            this.__fireEvent( 'enter' );
        },
        
        /**
         * enter完成的内部行为
         *
         * @protected
         */
        __entercomplete: function () {
            this.__fireEvent( 'entercomplete' );
            this.__addModelChangeListener();
        },

        /**
         * leave的内部行为
         *
         * @protected
         */
        __leave: function () {
            this.__fireEvent( 'leave' );
            this.__removeModelChangeListener();
        }
    } );

    var adapter = {
        /**
         * 初始化一个dom内部的所有控件
         * 
         * @virtual
         * @param {HTMLElement} wrap
         * @param {Object}      propMap
         * @param {Function}    attrReplacer
         * @return {Object} 
         */
        init: function ( wrap, propMap, attrReplacer ) {
            return esui.init( wrap, propMap, attrReplacer );
        },
        
        /**
         * 释放控件集合。通常用于释放init的返回控件集合
         * 
         * @virtual
         * @param {Object} controlMap 要释放的控件集合
         */
        uninit: function ( controlMap ) {
            if ( controlMap ) {
                for ( var key in controlMap ) {
                    uiExtend.adapter.dispose( key );
                    delete controlMap[ key ];
                }
            }
        },

        /**
         * 根据id获取控件
         * 
         * @virtual
         * @param {string} id
         * @return {Control} 
         */
        get: function ( id ) {
            return esui.get( id );
        },
        
        /**
         * 释放控件
         *     
         * @virtual
         * @param {Object} key
         */
        dispose: function ( key ) { 
            esui.dispose( key );
        },
        
        /**
         * 验证控件
         * 
         * @virtual
         * @param {Object} input
         * @return {boolean}
         */
        validate: function ( input ) {
            if ( input instanceof esui.InputControl ) {
                return input.validate();
            }

            return true;
        },
        
        /**
         * 验证控件并返回错误
         * 
         * @virtual
         * @param {Object} inputCtrl
         * @param {Object} errorMessage
         */
        validateError: function ( inputCtrl, errorMessage ) { },
        
        /**
         * 是否表单控件
         * 
         * @virtual
         * @param {Object} control
         * @return {boolean}
         */
        isInput: function ( control ) { 
            return control instanceof esui.InputControl;
        },
        
        /**
         * 是否Radio或CheckBox
         * 
         * @virtual
         * @param {Object} control
         * @return {boolean}
         */
        isInputBox: function ( control ) { 
            return control instanceof esui.BoxControl;
        },

        /**
         * 控件是否禁用
         * 
         * @virtual
         * @param {Object} control
         * @return {boolean}
         */
        isDisabled: function ( control ) { 
            if ( control ) {
                return control.isDisabled();
            }

            return false;
        },
        
        /**
         * 控件是否只读
         * 
         * @virtual
         * @param {Object} control
         * @return {boolean}
         */
        isReadOnly: function ( control ) { 
            return control.isReadOnly();
        }, 
        
        /**
         * 获取表单控件的表单名
         * 
         * @virtual
         * @param {Object} control
         */
        getInputName: function ( control ) { 
            return control.getName();
        },
        
        /**
         * 设置控件所需属性
         * 
         * @virtual
         * @param {Object} control
         * @param {string} name
         * @param {Any} value
         */
        setControlAttribute: function ( control, name, value ) { 
            control[ name ] = value;
        },
        
        /**
         * 重绘控件
         * 
         * @virtual
         * @param {Object} control
         */
        repaint: function ( control ) { 
            control.render();
        },
        
        /**
         * 设置控件为禁用
         * 
         * @virtual
         * @param {Object} control
         */
        disable: function ( control ) { 
            control.disable();
        },
        
        /**
         * 设置控件为可用
         * 
         * @virtual
         * @param {Object} control
         */
        enable: function ( control ) { 
            control.enable();
        }
    };

    uiExtend.adapter = adapter;
    return uiExtend;
    
}();
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/extend/actionEnhance.js
 * desc:    Action增强包，提供额外的Action操作功能
 * author:  erik
 */

///import er.extend;
///import er.Action;
///import er._util;

er.extend.actionEnhance = (function () {
    /**
     * 状态保持器
     * 
     * @inner
     * @desc
     *      状态保持器能根据path保持相关Context狀態
     */
    var stateHolder_ = (function () {
        var stateMap = {};

        return {
            /**
             * 获取状态
             * 
             * @public
             * @param {string} path 状态名
             * @return {Object}
             */
            'get': function ( path ) {
                return stateMap[ path ] || null;
            },
            
            /**
             * 设置状态
             * 
             * @public
             * @param {string} key 状态名
             * @param {Object} state 状态對象
             */
            'set': function ( path, state ) {
                stateMap[ path ] = state;
            }
        };
    })();
    
    var enhance = {
        /**
         * 从model中获取请求参数字符串
         * 用于参数自动拼接
         * 
         * @protected
         * @param {Object} opt_queryMap 参数表
         * @return {string}
         */
        getQueryStringByModel: function ( opt_queryMap ) {
            var queryMap = opt_queryMap || this.MODEL_QUERY_MAP;
            return this.model.getQueryString( queryMap );
        },
        
        /**
         * 刷新当前action页面
         * 
         * @protected
         * @param {Object} opt_extraMap 额外参数表,(KV)queryName/contextName
         */
        refresh: function ( opt_extraMap ) {
            opt_extraMap = opt_extraMap || {};
            var key, 
                cxtKey,
                path     = this.arg.path,
                stateMap = this.STATE_MAP,
                buffer   = [],
                value;
            
            // 自动组装state    
            for ( key in stateMap ) {
                value = this.model.get( key );
                if ( !er._util.hasValue( value ) ) {
                    value = '';
                }
                buffer.push( key + '=' + encodeURIComponent( value ) );
            }
            
            // 额外参数表的组装  
            for ( key in opt_extraMap ) {
                cxtKey = opt_extraMap[ key ];
                if ( typeof cxtKey == 'string' ) {
                    value = this.model.get( cxtKey );
                    if ( !er._util.hasValue( value ) ) {
                        value = '';
                    }
                    
                    buffer.push( key + '=' + encodeURIComponent( value ) );
                }
            }
            
            er.locator.redirect( this.arg.path + '~' + buffer.join('&'), { enforce: true } );
        },

        /**
         * 重新载入action
         *
         * @protected
         */
        reload: function () {
            this.leave();
            this.enter( this.arg );
        },

        /**
         * 重置状态值
         * 
         * @protected
         * @param {string} opt_name 需要重置的状态名，不提供时重置所有状态
         */
        resetState: function ( opt_name ) {
            var stateMap = this.STATE_MAP || {};
            var defValue;
            
            if ( !opt_name ) {
                for ( opt_name in stateMap ) {
                    this.model.set( opt_name, stateMap[ opt_name ] );
                }
            } else {
                defValue = stateMap[ opt_name ];

                if ( er._util.hasValue( defValue ) ) {
                    this.model.set( opt_name, defValue );
                }
            }
        },
        
        /**
         * 返回上一个location
         * 
         * @protected
         */
        back: function () {
            var arg = this.arg,
                referer = arg && arg.referer;
                
            if ( arg.type != 'main' ) {
                return;
            }
            
            // 沿路返回或返回配置的location
            if ( !referer || this.USE_BACK_LOCATION ) {
                referer = this.BACK_LOCATION;
            }
            er.locator.redirect( referer );
        },
        
        /**
         * model加载前的内部行为，实现状态保持
         *
         * @protected
         * @override
         */  
        __beforeloadmodel: function () {
            var arg         = this.arg;
            var path        = arg.path;
            var queryMap    = arg.queryMap;
            var stateMap    = this.STATE_MAP || {};
            var stateSaved  = stateHolder_.get( path ) || {};
            var ignoreState = this.IGNORE_STATE || (queryMap && queryMap.ignoreState);

            var key, value;
            var state = {};
            
            // 状态恢复与保存
            if ( !ignoreState ) {
                for ( key in stateMap ) {
                    value = queryMap[ key ];
                    if ( !er._util.hasValue( value ) ) {
                        value = stateSaved[ key ];

                        if ( !er._util.hasValue( value ) ) {
                            value = stateMap[ key ];
                        }
                    }

                    state[ key ] = value;
                    this.model.set( key, value );
                }

                stateHolder_.set( path, state );
            }

            this.__fireEvent( 'beforeloadmodel' );
        }
    };

    er.Action.extend( enhance );
    return enhance;
})();
/*
 * ER (Enterprise RIA)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    er/extend/actionLikeForm.js
 * desc:    Form功能的action扩展
 * author:  erik
 */

///import er.Action;
///import er.extend.ui;
///import er.extend.action_enhance;

er.extend.actionLikeForm = function () {
    var uiExtend = er.extend.ui;
    
    var actionExt = {
        /**
         * 验证表单控件的值是否合法
         * 
         * @param {Object} opt_inputList 表单控件数组
         * @return {boolean}
         */
        validateForm: function ( opt_inputList ) {
            var isValid     = true,
                inputList   = opt_inputList || this.view.getInputList(),
                i, len, input;
                
            for ( i = 0, len = inputList.length; i < len; i++ ) {
                input = inputList[ i ];

                if ( uiExtend.adapter.isDisabled( input ) ) {
                    continue;
                }
                
                if ( !uiExtend.adapter.validate( input ) ) {
                    isValid = false;
                }
            }
            
            return isValid;
        },

        /**
         * 获取返回的处理函数
         * 
         * @protected
         * return {Function}
         */
        getFormCanceler: function () {
            var me = this;
            
            return function () {
                me.back();
            };
        },

        /**
         * 获取完成提交数据的函数
         * 
         * @protected
         * return {Function}
         */
        getSubmitFinisher: function () {
            var me = this;
                
            return function ( data ) {
                var inputList   = me.view.getInputList(),
                    len         = inputList.length,
                    i, input,
                    errorMap,
                    errorMessage;
                    
                // 当后端验证失败时
                // 处理后端验证结果
                if ( data.status != 0 ) {
                    errorMap = data.statusInfo.field;
                    
                    for ( i = 0; i < len; i++ ) {
                        input = inputList[ i ];
                        errorMessage = errorMap[ uiExtend.adapter.getInputName( input ) ];
                        if ( errorMessage ) {
                            uiExtend.adapter.validateError( input, errorMessage );
                        }
                    }

                    return;
                }
                
                // onsubmitfinished事件触发
                if ( !me.onsubmitfinished || me.onsubmitfinished( data ) !== false ) {
                    me.back();
                }
            };
        },

        /**
         * 获取表单的请求参数字符串
         * 用于参数自动拼接
         * 
         * @protected
         * @param {Object} opt_inputList 控件数组
         * @param {Object} opt_queryMap 参数表
         * @return {string}
         */
        getQueryStringByForm: function ( opt_inputList, opt_queryMap ) {
            var queryMap    = opt_queryMap || this.INPUT_QUERY_MAP || {},
                inputList   = opt_inputList || this.view.getInputList(),
                finished    = {},
                uiAdapter   = uiExtend.adapter,
                i, len, 
                input,
                inputName, 
                value,
                queryString,
                queryBuf = [];
            
            for ( i = 0, len = inputList.length; i < len; i++ ) {
                input = inputList[i];
                

                if ( uiAdapter.isInput( input ) 
                     && !uiAdapter.isDisabled( input )
                ) {
                    inputName = uiAdapter.getInputName( input );

                    if ( inputName ) {
                        // 已拼接的参数不重复拼接
                        if ( finished[ inputName ] ) {
                            continue;
                        }
                        
                        // 记录拼接状态
                        finished[ inputName ] = 1;
                        
                        // 读取参数名映射
                        inputName = queryMap[ inputName ] || inputName;
                        
                        // 获取input值
                        if ( uiAdapter.isInputBox( input ) ) {
                            value = input.getGroup().getValue().join(',');
                        } else {
                            value = input.getValue();
                        }
                        
                        // 拼接参数
                        queryBuf.push( inputName + '=' + encodeURIComponent( value ) );
                    } else if ( 'function' == typeof input.getQueryString ) {
                        // 拼接参数
                        queryString = input.getQueryString();
                        if ( 'string' == typeof queryString ) {
                            queryBuf.push( queryString );
                        }
                    }
                }
            }
            
            return queryBuf.join('&');
        }
    };

    er.Action.extend( actionExt );
    return actionExt;
}();

/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui.js
 * desc:    esui是一套简单的WEB UI库
 * author:  erik
 */

var esui = {};
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/validator.js
 * desc:    声明validator
 * author:  erik
 */

///import esui;


esui.validator = {};
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/validator/ValidityState.js
 * desc:    规则验证状态类
 * author:  erik
 */

///import esui.validator;

/**
 * 规则验证状态类
 * 
 * @class
 * @param {Object} options 参数
 */
esui.validator.ValidityState = function( options ) {
    this.message = options.message;
    this.state   = options.state;
};

esui.validator.ValidityState.prototype = {
    /**
     * 获取验证消息
     * 
     * @public
     * @return {string}
     */
    getMessage: function () {
        return this.message || '';
    },
    
    /**
     * 设置验证消息
     * 
     * @public
     * @param {string} message 验证消息
     */
    setMessage: function ( message ) {
        this.message = message;
        this.state = !!message;
    },
    
    /**
     * 获取验证状态
     * 
     * @public
     * @return {boolean}
     */
    getState: function () {
        return !!this.state;
    },
    
    /**
     * 设置验证状态
     * 
     * @public
     * @param {boolean} state 验证消息，true为值合法，false为值非法。
     */
    setState: function ( state ) {
        this.state = !!state;
    }
};
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/validator/Rule.js
 * desc:    验证规则类
 * author:  erik
 */

///import esui.validator.ValidityState;

/**
 * 验证规则类
 * 
 * @class
 * @param {Object} options 参数
 */
esui.validator.Rule = function () {
    var RuleClassMap = {};
    function Rule( options ) {
        this.name           = options.name;
        this.check          = options.check;
        this.errorMessage   = options.errorMessage;
    };

    Rule.prototype = {
        /**
         * 获取规则名称
         * 
         * @public
         * @return {string}
         */
        getName: function () {
            return this.name;
        },
        
        /**
         * 验证控件的状态
         * 
         * @public
         * @param {InputControl} control 要验证的控件
         * @return {validator.ValidityState}
         */
        checkValidity: function ( control ) {
            var value = control.getValue();
            var isValid = this.check( value, control );
            var message = '';

            if ( !isValid ) {
                message = this.errorMessage.replace( /\x24\{([a-z0-9_-]+)\}/g, function ( matcher, word ) {
                    return control[ word ] || '';
                } );
            }
            
            return new esui.validator.ValidityState( {
                state   : isValid,
                message : message
            } );
        }
    };
    
    /**
     * 注册规则类型
     *
     * @static
     * @public
     * @param {string} name 规则名
     * @param {Function} RuleClass 规则类
     */
    Rule.register = function ( name, RuleClass ) {
        RuleClassMap[ name ] = RuleClass;
    };
    
    /**
     * 获取规则
     *
     * @static
     * @public
     * @param {string} name 规则名
     * @param {Object} opt_options 规则参数
     * @return {validator.Rule}
     */
    Rule.get = function ( name, opt_options ) {
        var clazz = RuleClassMap[ name ];
        if ( clazz ) {
            return new clazz( opt_options );
        }

        return null;
    };

    return Rule;
}();
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/validator/Validity.js
 * desc:    验证信息类
 * author:  erik
 */

///import esui.validator.ValidityState;

/**
 * 验证信息类
 * 
 * @class
 * @param {Object} options 参数
 */
esui.validator.Validity = function () {
    this._states = [];
    this._customState = new esui.validator.ValidityState( {
        state : true
    } );

    this._stateMap = {};
};

esui.validator.Validity.prototype = {
    /**
     * 添加验证状态
     * 
     * @public
     * @param {string} name 验证名
     * @param {validator.ValidityState} state 验证状态
     */
    addState: function ( name, state ) {
        if ( state instanceof esui.validator.ValidityState ) {
            this._states.push( state );
            this._stateMap[ name ] = state;
        }
    },
    
    /**
     * 获取自定义验证信息
     * 
     * @public
     * @return {string}
     */
    getCustomMessage: function () {
        return this._customState.getMessage();
    },
    
    /**
     * 设置自定义验证信息
     * 
     * @public
     * @param {string} message 自定义验证信息
     */
    setCustomMessage: function ( message ) {
        this._customState.setMessage( message );
    },
    
    /**
     * 获取验证状态集合
     * 
     * @public
     * @return {Array}
     */
    getStateList: function () {
        var list = this._states.slice( 0 );
        list.push( this._customState );
        return list;
    },
    
    /**
     * 是否验证通过
     * 
     * @public
     * @return {boolean}
     */
    isValid: function () {
        var stateList = this.getStateList();
        var len = stateList.length;

        while ( len-- ) {
            if ( !stateList[ len ].getState() ) {
                return false;
            }
        }

        return true;
    },
    
    /**
     * 获取验证状态
     * 
     * @public
     * @param {string} name 验证名
     * @return {validator.ValidityState}
     */
    getState: function ( name ) {
        return this._stateMap[ name ] || null;
    }
};
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/validator/MaxLengthRule.js
 * desc:    最大长度验证规则类
 * author:  erik
 */

///import esui.validator.ValidityState;
///import esui.validator.Rule;
///import baidu.lang.inherits;

/**
 * 最大长度验证规则类
 * 
 * @class
 * @param {Object} options 参数
 */
esui.validator.MaxLengthRule = function( options ) {
    options = options || {};
    options.errorMessage && (this.errorMessage = options.errorMessage);
};

esui.validator.MaxLengthRule.prototype = {
    /**
     * 错误提示信息
     * 
     * @public
     */
    errorMessage : "${title}长度不能超过${maxlength}个字符",

    /**
     * 获取规则名称
     * 
     * @public
     * @return {string}
     */
    getName: function () {
        return 'maxlength';
    },
    
    /**
     * 验证值是否合法
     * 
     * @public
     * @return {string}
     */
    check: function ( value, control ) {
        var maxLength = control.maxlength;
        return value.length <= maxLength;
    }
};

baidu.inherits( esui.validator.MaxLengthRule, esui.validator.Rule );
esui.validator.Rule.register( 'maxlength', esui.validator.MaxLengthRule );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/validator/RequiredRule.js
 * desc:    不能为空验证规则类
 * author:  erik
 */

///import esui.validator.ValidityState;
///import esui.validator.Rule;
///import baidu.lang.inherits;

/**
 * 不能为空验证规则类
 * 
 * @class
 * @param {Object} options 参数
 */
esui.validator.RequiredRule = function( options ) {
    options = options || {};
    options.errorMessage && (this.errorMessage = options.errorMessage);
};

esui.validator.RequiredRule.prototype = {
    /**
     * 错误提示信息
     * 
     * @public
     */
    errorMessage : "${title}不能为空",

    /**
     * 获取规则名称
     * 
     * @public
     * @return {string}
     */
    getName: function () {
        return 'required';
    },
    
    /**
     * 验证值是否合法
     * 
     * @public
     * @return {string}
     */
    check: function ( value ) {
        return value.length > 0;
    }
};

baidu.inherits( esui.validator.RequiredRule, esui.validator.Rule );
esui.validator.Rule.register( 'required', esui.validator.RequiredRule );/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/validator/MaxValueRule.js
 * desc:    最大值验证规则类
 * author:  erik
 */

///import esui.validator.ValidityState;
///import esui.validator.Rule;
///import baidu.lang.inherits;

/**
 * 最大值验证规则类
 * 
 * @class
 * @param {Object} options 参数
 */
esui.validator.MaxValueRule = function( options ) {
    options = options || {};
    options.errorMessage && (this.errorMessage = options.errorMessage);
};

esui.validator.MaxValueRule.prototype = {
    /**
     * 错误提示信息
     * 
     * @public
     */
    errorMessage : "${title}不能大于${max}",

    /**
     * 获取规则名称
     * 
     * @public
     * @return {string}
     */
    getName: function () {
        return 'max';
    },
    
    /**
     * 验证值是否合法
     * 
     * @public
     * @return {string}
     */
    check: function ( value, control ) {
        var valueAsNumber;
        if ( control.getValueAsNumber ) {
            valueAsNumber = control.getValueAsNumber();
            return valueAsNumber <= control.max;
        }

        return true;
    }
};

baidu.inherits( esui.validator.MaxValueRule, esui.validator.Rule );
esui.validator.Rule.register( 'max', esui.validator.MaxValueRule );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/validator/MinValueRule.js
 * desc:    最小值验证规则类
 * author:  erik
 */

///import esui.validator.ValidityState;
///import esui.validator.Rule;
///import baidu.lang.inherits;

/**
 * 最小值验证规则类
 * 
 * @class
 * @param {Object} options 参数
 */
esui.validator.MinValueRule = function( options ) {
    options = options || {};
    options.errorMessage && (this.errorMessage = options.errorMessage);
};

esui.validator.MinValueRule.prototype = {
    /**
     * 错误提示信息
     * 
     * @public
     */
    errorMessage : "${title}不能小于${max}",

    /**
     * 获取规则名称
     * 
     * @public
     * @return {string}
     */
    getName: function () {
        return 'min';
    },
    
    /**
     * 验证值是否合法
     * 
     * @public
     * @return {string}
     */
    check: function ( value, control ) {
        var valueAsNumber;
        if ( control.getValueAsNumber ) {
            valueAsNumber = control.getValueAsNumber();
            return valueAsNumber >= control.max;
        }

        return true;
    }
};

baidu.inherits( esui.validator.MinValueRule, esui.validator.Rule );
esui.validator.Rule.register( 'min', esui.validator.MinValueRule );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/validator/PatternRule.js
 * desc:    正则表达式验证规则类
 * author:  erik
 */

///import esui.validator.ValidityState;
///import esui.validator.Rule;
///import baidu.lang.inherits;

/**
 * 正则表达式验证规则类
 * 
 * @class
 * @param {Object} options 参数
 */
esui.validator.PatternRule = function( options ) {
    options = options || {};
    options.errorMessage && (this.errorMessage = options.errorMessage);
};

esui.validator.PatternRule.prototype = {
    /**
     * 错误提示信息
     * 
     * @public
     */
    errorMessage : "${title}不符合规则",

    /**
     * 获取规则名称
     * 
     * @public
     * @return {string}
     */
    getName: function () {
        return 'pattern';
    },
    
    /**
     * 验证值是否合法
     * 
     * @public
     * @return {string}
     */
    check: function ( value, control ) {
        var pattern = control.pattern;
        if ( pattern && typeof pattern == 'string' ) {
            pattern = new RegExp( pattern );
        }

        if ( pattern instanceof RegExp ) {
            return pattern.test( value );
        }

        return true;
    }
};

baidu.inherits( esui.validator.PatternRule, esui.validator.Rule );
esui.validator.Rule.register( 'pattern', esui.validator.PatternRule );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/config.js
 * desc:    ui控件配置项
 * author:  erik
 */


esui.config = {
    UI_ATTRIBUTE: 'ui'
};

/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/util.js
 * desc:    控件实用方法
 * author:  erik
 */

///import esui.config;
///import baidu.event.on;
    
/**
 * UI组件功能库
 *
 * @static
 * @private
 */
esui.util = function () {
    var ctrlContainer = {};
    var componentMap  = {};
    var guid          = 0;

    return {
        /**
         * 初始化控件渲染
         * 
         * @public
         * @param {HTMLElement} opt_wrap 渲染的区域容器元素
         * @param {Object}      opt_propMap 控件附加属性值
         * @param {Function}    opt_attrReplacer 属性替换函数
         * @return {Object} 控件集合
         */
        init: function ( opt_wrap, opt_propMap, opt_attrReplacer ) {
            opt_propMap = opt_propMap || {};
            
            // 容器为空的判断
            opt_wrap = opt_wrap || document.body;
            
            var elements = opt_wrap.getElementsByTagName( '*' );
            var uiAttr = esui.config.UI_ATTRIBUTE || 'ui';
            var realEls = [];
            var attrs, attrStr, attrArr, attrArrLen;
            var attr, attrValue, attrItem, attrSegment, extraAttrMap;
            var i, len, key, el, uis = {};
            
            // 把dom元素存储到临时数组中
            // 控件渲染的过程会导致elements的改变
            for ( i = 0, len = elements.length; i < len; i++ ) {
                realEls.push( elements[ i ] );
            }
            
            // 循环解析自定义的ui属性并渲染控件
            // <div ui="type:UIType;id:uiId;..."></div>
            for ( i = 0, len = realEls.length; i < len; i++ ) {
                el = realEls[ i ];
                attrStr = el.getAttribute( uiAttr );
                
                if ( attrStr ) {
                    // 解析ui属性
                    attrs       = {};
                    attrArr     = attrStr.split( /;\s*/ );
                    attrArrLen  = attrArr.length;

                    while ( attrArrLen-- ) {
                        // 判断属性是否为空
                        attrItem = attrArr[ attrArrLen ];
                        if ( !attrItem ) {
                            continue;
                        } 
                        
                        // 获取属性
                        attrSegment = attrItem.split( /\s*:/ );
                        attr        = attrSegment[ 0 ];
                        attrValue   = attrSegment[ 1 ];
                        attrs[attr] = attrValue;
                    }
                    
                    // 主元素参数初始化
                    attrs.main = el;

                    // 创建并渲染控件
                    var objId = attrs[ 'id' ];
                    if ( !objId ) {
                        objId = esui.util.getGUID();
                        attrs[ 'id' ] = objId;
                    }
                    
                    extraAttrMap = opt_propMap[ objId ];
                    
                    // 将附加属性注入
                    for ( key in extraAttrMap ) {
                        attrs[ key ] = attrs[ key ] || extraAttrMap[ key ];
                    }
                    
                    // 解析属性替换
                    if ( 'function' == typeof opt_attrReplacer ) {
                        opt_attrReplacer( attrs );
                    }
                    
                    // 渲染控件
                    uis[ objId ] = esui.util.create( attrs[ 'type' ], attrs );
                    el.setAttribute( uiAttr, '' );
                }
            }
            
            return uis;
        },
        
        /**
         * 获取控件对象
         * 
         * @public
         * @param {string} id 控件id
         * @return {esui.Control}
         */
        get: function ( id ) {
            return ctrlContainer[ id ] || null;
        },

        /**
         * 创建控件对象
         * 
         * @public
         * @param {string} type 控件类型
         * @param {Object} options 控件初始化参数
         * @return {esui.Control} 创建的控件对象
         */
        create: function ( type, options ) {
            options = options || {};

            var uiClazz = componentMap[ type ] || esui[ type ],
                id      = options.id,
                uiObj   = null;

            if ( id && uiClazz ) {
                uiObj = new uiClazz( options ); 
                if ( options.main ) {
                    uiObj.render();
                }
            }
            
            return uiObj;
        },

        /**
         * 销毁控件
         * 
         * @public
         * @param {esui.Control|string} ctrl 控件或控件id
         */
        dispose: function ( ctrl ) {
            if ( ctrl ) {
                var control = ctrl;
                var id;

                if ( typeof ctrl == 'string' ) {
                    control = ctrlContainer[ ctrl ];
                    
                }
                
                if ( control && control instanceof esui.Control ) {
                    id = control.id;
                    
                    control.__dispose();
                    delete ctrlContainer[ id ];
                }
            } else {
                for ( var key in ctrlContainer ) {
                    esui.util.dispose( key );
                }
            }
        },
        
        /**
         * 注册控件
         * 
         * @public
         * @param {string} name 控件名
         * @param {Function} component 控件类
         */
        register: function ( name, component ) {
            componentMap[ name ] = component;
        },

        validate : new Function(),
        
        /**
         * 寻找dom元素所对应的控件
         * 
         * @public
         * @param {HTMLElement} dom dom元素
         * @return {esui.Control}
         */
        getControlByDom: function ( dom ) {
            if ( !dom ) {
                return;
            }
            
            var controlId;
            if ( ( controlId = dom.getAttribute( 'data-control' ) ) ) {
                return esui.util.get( controlId );
            }

            return null;
        },

        /**
         * 寻找dom元素下的控件集合
         * 
         * @public
         * @param {HTMLElement} container 要查找的容器元素
         * @return {Array}
         */
        getControlsByContainer: function ( container ) {
            var els = container.getElementsByTagName( '*' );
            var len = els.length;
            var i = 0;
            var controlName;
            var result = [];
                
            for ( ; i < len; i++ ) {
                controlName = els[ i ].getAttribute( 'data-control' );
                if ( controlName ) {
                    result.push( esui.util.get( controlName ) );
                }
            }
            
            return result;
        },
        
        /**
         * 改变Input控件的disable状态
         * 
         * @public
         * @param {HTMLElement} container 容器元素
         * @param {boolean} disabled disable状态
         */
        setDisabledByContainer: function ( container, disabled ) {
            var controls = esui.util.getControlsByContainer( container );
            var len = controls.length;
            var control;
                
            while ( len-- ) {
                control = controls[ len ];
                if ( control instanceof esui.Control ) {
                    control.setDisabled( disabled );
                }
            }
        },
        
        /**
         * 构造控件
         *
         * @public
         * @param {ecui.Control} control 控件实例
         */
        construct: function ( control ) {
            ctrlContainer[ control.id ] = control;
            control.__construct();
        },

        /**
         * 判断值不为空(null|undefined)
         * 
         * @public
         * @param {Any} value
         * @param {boolean}
         */
        hasValue: function ( value ) {
            return typeof value != 'undefined' && value !== null;
        },
        
        /**
         * 字符串格式化
         * 
         * @public
         * @param {string} source 原字符串
         * @param {Object|Array} opts 参数
         * @param {string}
         */
        format: function (source, opts) {
            source = String(source);
            
            if ( 'undefined' != typeof opts ) {
                if ( '[object Object]' == Object.prototype.toString.call( opts ) ) {
                    return source.replace( /\$\{(.+?)\}/g,
                        function ( match, key ) {
                            var replacer = opts[ key ];
                            if ( 'function' == typeof replacer ) {
                                replacer = replacer( key );
                            }

                            return ( 'undefined' == typeof replacer ? '' : replacer );
                        });

                } else {
                    var data = Array.prototype.slice.call(arguments, 1);
                    var len = data.length;

                    return source.replace( /\{(\d+)\}/g,
                        function ( match, index ) {
                            index = parseInt( index, 10 );
                            return ( index >= len ? match : data[index] );
                        });
                }
            }
            
            return source;
        },
        
        /**
         * 获取唯一id
         *
         * @public
         * @return {string}
         */
        getGUID: function () {
            return '_innerui_' + ( guid++ );
        }
    };
}();

// 窗口关闭时，释放所有控件
baidu.on( window, 'unload', function () {
    esui.util.dispose();
} );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/get.js
 * desc:    获取控件
 * author:  erik
 */

///import esui.util;

/**
 * 获取控件实例
 * 
 * @public
 * @param {string} id 控件id
 * @return {esui.Control}
 */
esui.get = esui.util.get;
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/init.js
 * desc:    初始化控件
 * author:  erik
 */

///import esui.util;

/**
 * 初始化控件
 * 
 * @public
 * @param {HTMLElement} opt_wrap 渲染的区域容器元素
 * @param {Object}      opt_propMap 控件附加属性值
 * @param {Function}    opt_attrReplacer 属性替换函数
 * @return {Object} 控件集合
 */
esui.init = esui.util.init;
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/create.js
 * desc:    创建控件
 * author:  erik
 */

///import esui.util;

/**
 * 创建控件
 * 
 * @public
 * @param {string} type 控件类型
 * @param {Object} options 控件初始化参数
 * @return {esui.Control} 创建的控件对象
 */
esui.create = esui.util.create;
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/dispose.js
 * desc:    销毁控件
 * author:  erik
 */

///import esui.util;

/**
 * 销毁控件
 * 
 * @public
 * @param {esui.Control|string} ctrl 控件或控件id
 */
esui.dispose = esui.util.dispose;
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/Control.js
 * desc:    ui控件基类
 * author:  erik, zhaolei 
 */

///import esui.util;
///import esui.get;
///import esui.init;
///import esui.create;
///import esui.dispose;
///import baidu.dom.addClass;
///import baidu.dom.removeClass;

/**
 * 控件基类
 *
 * @class
 * @param {Object} options 初始化参数
 */
esui.Control = function ( options ) {
    this._state = {};

    // 初始化参数
    this.__initOptions( options );

    // 生成控件id
    if ( !this.id ) {
        this.id = esui.util.getGUID();
    }

    esui.util.construct( this );
};

esui.Control.prototype = {

    /**
     * 渲染控件
     * 
     * @public
     */
    render: function () {
        var main = this.main;

        if ( !this._isRendered ) {
            !main.id && ( main.id = this.__getId() );
            main.setAttribute( 'data-control', this.id );
            baidu.addClass( main, this.__getClass() );
            
            if ( this._autoState ) {
                this.__initStateChanger();
            }

            this._isRendered = true;
        }    
    },
    
    /**
     * 将控件添加到页面的某个元素中
     *
     * @public
     * @param {HTMLElement} wrap
     */
    appendTo: function ( wrap ) {
        wrap = wrap || document.body;
        wrap.appendChild( this.main );
        this.render();
    },

    /**
     * 设置控件为不可用
     *
     * @public
     */
    disable: function () {
        this.addState( 'disabled' );
        this.disabled = true;
    },
    
    /**
     * 设置控件为可用
     *
     * @public
     */
    enable: function () {
        this.removeState( 'disabled' );
        this.disabled = false;
    },

    /**
     * 判断控件不可用状态
     * 
     * @public
     * @return {boolean}
     */
    isDisabled: function () {
        return this.getState( 'disabled' );
    },
    
    /**
     * 设置控件不可用状态
     *
     * @public
     * @param {boolean} disabled
     */
    setDisabled: function ( disabled ) {
        this[ disabled ? 'disable': 'enable' ]();
    },

    /**
     * 添加控件的当前状态
     * 
     * @public
     * @param {string} state 要设置的状态
     */
    addState: function ( state ) {
        this._state[ state ] = 1;
        baidu.addClass( this.main, this.__getClass( state ) );
    },
    
    /**
     * 移除控件的当前状态
     * 
     * @public
     * @param {string} state 要移除的状态
     */
    removeState: function ( state ) {
        delete this._state[ state ];
        baidu.removeClass( this.main, this.__getClass( state ) );
    },
    
    /**
     * 获取控件状态
     * 
     * @public
     * @param {string} state 要获取的状态
     * @return {boolean}
     */
    getState: function ( state ) {
        return !!this._state[ state ];
    },
    
    /**
     * 释放控件
     * 
     * @public
     */
    dispose: function () {
        esui.util.dispose( this );
    },
    
    /**
     * 构造控件
     *
     * @protected
     */
    __construct: function () {
        // 生成控件主元素
        if ( !this.main ) {
            this.main = this.__createMain();
        }
        
        // 子控件容器
        this._controlMap = {};
    },

    /**
     * 释放控件
     * 
     * @protected
     */
    __dispose: function () {
        var controlMap  = this._controlMap,
            main        = this.main;
        
        // dispose子控件
        if ( controlMap ) {
            for ( var k in controlMap ) {
                esui.util.dispose( controlMap[k].id );
                delete controlMap[ k ];
            }
        }
        this._controlMap = null;
        
        // 释放控件主区域的事件以及引用
        if ( main ) {
            main.onclick     = null;
            main.onmouseover = null;
            main.onmouseout  = null;
            main.onmousedown = null;
            main.onmouseup   = null;
        }

        this.main = null;
    },
        
    /**
     * 初始化参数
     * 
     * @protected
     * @param {Object} options 参数集合
     */
    __initOptions: function ( options ) {
        for ( var k in options ) {
            this[ k ] = options[ k ];
        }
    },
    
    /**
     * 初始化单一参数
     * 
     * @protected
     * @param {string} name 参数名称
     * @param {Any}    opt_defaultValue 默认值
     * @param {string} opt_configName 对应的控件配置名
     */
    __initOption: function ( name, opt_defaultValue, opt_configName ) {
        var hasValue = esui.util.hasValue;

        if ( !hasValue( this[ name ] ) ) {
            if ( 'string' == typeof opt_configName ) {
                this[ name ] = this.constructor[ opt_configName ];
            } 
            
            if ( !hasValue( this[ name ] )
                && hasValue( opt_defaultValue )
            ) {
                this[ name ] = opt_defaultValue;
            } 
        }
    },
    
    /**
     * 创建控件主元素
     *
     * @protected
     * @return {HTMLElement}
     */
    __createMain: function () {
        return document.createElement( 'div' );
    },

    /**
     * 获取dom子部件的css class
     * 
     * @protected
     * @return {string}
     */
    __getClass: function ( name ) {
        var me          = this,
            type        = me._type.toLowerCase(),
            suffix      = (name ? '-' + name : ''),
            className   = [ ('ui-' + type + suffix) ],
            skinName    = me.skin,
            i, len;
        
        // 将skin转换成数组
        if ( skinName && typeof skinName == 'string' ) {
            skinName = me.skin = skinName.split( /\s+/ );
        }


        if ( skinName instanceof Array ) {
            for ( i = 0, len = skinName.length; i < len; i++ ) {
                className.push( 'skin-' + type + '-' + skinName[ i ] + suffix );
            }
        }  
        
        return className.join( ' ' );
    },
    
    /**
     * 获取dom子部件的id
     * 
     * @protected
     * @return {string}
     */
    __getId: function ( name ) {
        var idPrefix = 'ctrl' + this._type + this.id;
        if ( name ) {
            return idPrefix + name;
        }

        return idPrefix;
    },

    /**
     * 获取控件对象的全局引用字符串
     * 
     * @protected
     * @return {string}
     */
    __getStrRef: function () {
        return "esui.util.get('" + this.id + "')";
    },
    
    /**
     * 获取控件对象方法的全局引用字符串
     * 
     * @protected
     * @param {string} fn 调用的方法名
     * @param {Any...} anonymous 调用的参数
     * @return {string}
     */
    __getStrCall: function ( fn ) {
        var argLen = arguments.length,
            params = [],
            i, arg;

        if ( argLen > 1 ) {
            for ( i = 1; i < argLen; i++ ) {
                arg = arguments[i];
                if ( typeof arg == 'string' ) {
                    arg = "'" + arg +"'";
                }
                params.push( arg );
            }
        }
        
        return esui.util.format(
                "{0}.{1}({2});",
                this.__getStrRef(),
                fn,
                params.join(',') );
    },
    
    /**
     * 初始化状态事件
     * 
     * @protected
     * @desc
     *      默认为控件的主dom元素挂载4个mouse事件
     *      实现hover/press状态切换的样式设置
     */
    __initStateChanger: function () {
        var me = this,
            main = me.main;
        
        me._state = {};
        if ( main ) {
            main.onmouseover = me.__getMainOverHandler();
            main.onmouseout  = me.__getMainOutHandler();
            main.onmousedown = me.__getMainDownHandler();
            main.onmouseup   = me.__getMainUpHandler();
        }
    },
    
    /**
     * 获取主元素over的鼠标事件handler
     * 
     * @protected
     * @return {Function}
     */
    __getMainOverHandler: function () {
        var me = this;
        return function () {
            if ( !me._state[ 'disabled' ]) {
                me.addState( 'hover' );
            }
        };
    },
    
    /**
     * 获取主元素out的鼠标事件handler
     * 
     * @protected
     * @return {Function}
     */
    __getMainOutHandler: function () {
        var me = this;
        return function () {
            if ( !me._state[ 'disabled' ] ) {
                me.removeState( 'hover' );
                me.removeState( 'press' );
            }
        };
    },
    
    /**
     * 获取主元素down的鼠标事件handler
     * 
     * @protected
     * @return {Function}
     */
    __getMainDownHandler: function () {
        var me = this;
        return function () {
            if ( !me._state[ 'disabled' ] ) {
                me.addState( 'press' );
            }
        };
    },
    
    /**
     * 获取主元素up的鼠标事件handler
     * 
     * @protected
     * @return {Function}
     */
    __getMainUpHandler: function () {
        var me = this;
        return function () {
            if ( !me._state[ 'disabled' ] ) {
                me.removeState( 'press' );
            }
        };
    },
    
    /**
     * 预置状态表
     * 
     * @protected
     */
    _STATES: [ 
        'hover', 
        'press', 
        'active', 
        'disabled', 
        'readonly', 
        'focus'
    ],
    
    /**
     * 验证控件的值是否合法
     *
     * @public
     * @return {boolean}
     */
    validate: function () {
        if ( !this.rule ) {
            return !!1;
        }
        
        return esui.util.validate( this, this.rule );
    }
};  
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2011 Baidu Inc. All rights reserved.
 * 
 * path:    esui/Button.js
 * desc:    按钮控件
 * author:  erik, zhaolei
 */

///import esui.Control;
///import baidu.lang.inherits;

/**
 * 按钮控件
 * 
 * @param {Object} options 控件初始化参数
 */
esui.Button = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'button';
    
    // 标识鼠标事件触发自动状态转换
    this._autoState = 1;

    esui.Control.call( this, options );
};

esui.Button.prototype = {
    /**
     * button的html模板
     *
     * @private
     */
    _tplButton: '<div id="{2}" class="{1}">{0}</div>',
    
    /**
     * 默认的onclick事件执行函数
     * 不做任何事，容错
     * @public
     */
    onclick: new Function(),
    
    /**
     * 获取button主区域的html
     *
     * @private
     * @return {string}
     */
    _getMainHtml: function() {
        var me = this;
        
        return esui.util.format(
            me._tplButton,
            me.content || '&nbsp;',
            me.__getClass( 'label' ),
            me.__getId( 'label' )
        );
    },

    /**
     * 设置是否为Active状态
     * 
     * @public
     * @param {boolean} active active状态
     */
    setActive: function ( active ) {
        var state = 'active';

        if ( active ) {
            this.setState( state );
        } else {
            this.removeState( state );
        }
    },
    
    /**
     * 渲染控件
     * 
     * @public
     */
    render: function () {
        var me   = this;
        var main = me.main;
        var father;
        var temp;
        
        if ( !me._isRendered ) {
            if ( !me.content ) {
                me.content = main.innerHTML;
            }
            
            // 如果是button的话，替换成一个DIV
            if ( main.tagName == 'BUTTON' ) {
                father = main.parentNode;
                temp = document.createElement( 'div' );
                father.insertBefore( temp, main );
                father.removeChild( main );
                main = me.main = temp;
            }

            esui.Control.prototype.render.call( me );
            main.innerHTML = me._getMainHtml();

            // 初始化状态事件
            main.onclick = me._getHandlerClick();

            me._isRendered = true;
        }

        // 设定宽度
        me.width && (main.style.width = me.width + 'px');
        
        // 设置disabled
        me.setDisabled( me.disabled );
    },
    
    /**
     * 获取按钮点击的事件处理程序
     * 
     * @private
     * @return {function}
     */
    _getHandlerClick: function() {
        var me = this;
        return function ( e ) {
            if ( !me.isDisabled() ) {
                if (false === me.onclick()) {
                    baidu.event.stop(e || window.event);
                }
            }
        };
    },
    
    /**
     * 设置按钮的显示文字
     * 
     * @public
     * @param {string} content 按钮的显示文字
     */
    setContent: function ( content ) {
        baidu.g( this.__getId( 'label' ) ).innerHTML = content;
    },
    
    /**
     * 释放控件
     * 
     * @private
     */
    __dispose: function () {
        this.onclick = null;
        esui.Control.prototype.__dispose.call( this );
    }
};

baidu.inherits( esui.Button, esui.Control );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/InputControl.js
 * desc:    输入控件基类
 * author:  erik
 */

///import esui.Control;
///import baidu.lang.inherits;
///import esui.validator.Rule;
///import esui.validator.Validity;
///import esui.validator.ValidityState;

/**
 * 输入控件基类
 *
 * @class
 * @param {Object} options 初始化参数
 */
esui.InputControl = function ( options ) {
    esui.Control.call( this, options );

    this._validatorMessageClass = 'ui-validator-message';

    /**
     * @inner
     */
    function addRule( ruleObj ) {
        if ( !ruleObj ) {
            return;
        }

        if ( typeof ruleObj == 'string' ) {
            rules.push( esui.validator.Rule.get( ruleObj ) );
        } else if ( ruleObj instanceof esui.validator.Rule ) {
            rules.push( ruleObj );
        } else if ( typeof ruleObj == 'object' ) {
            rules.push( new esui.validator.Rule( {
                name            : ruleObj.name,
                errorMessage    : ruleObj.errorMessage,
                check           : ruleObj.check
            } ) );
        }
    }

    // 验证规则初始化
    var rule = this.rule;
    var rules = [];
    this._rules = rules;
    if ( typeof rule == 'string' ) {
        rule = rule.split( ',' );
    }

    if ( rule instanceof Array ) {
        var ruleLen = rule.length;
        var i;

        for ( i = 0; i < ruleLen; i++ ) {
            addRule( rule[ i ] );
        }
    } else {
        addRule( rule );
    }
};

esui.InputControl.prototype = {
    /**
     * 渲染控件
     *
     * @public
     */
    render: function () {
        this.name = this.main.getAttribute( 'name' );
        esui.Control.prototype.render.call( this );
    },
    
    /**
     * 获取控件的name
     *
     * @public
     * @return {string}
     */
    getName: function () {
        return this.name;
    },

    /**
     * 获取控件的值
     *
     * @public
     * @return {string}
     */
    getValue: function () {
        return this.value;
    },
    
    /**
     * 设置控件的值
     *
     * @public
     * @param {string} value 控件的值
     */
    setValue: function ( value ) {
        this.value = value;
    },
    
    /**
     * 创建Input元素
     *
     * @protected
     * @return {HTMLInputElement}
     */
    __createInput: function ( options ) {
        var tagName = options.tagName;
        var name    = options.name;
        var type    = options.type;
        var creater = tagName;
        var input;

        name && ( creater = '<' + tagName + ' name="' + this.name + '">' );
        input = document.createElement( creater ); 

        // 非IE浏览器不认createElement( '<input name=...' )
        if ( !input ) {
            input = document.createElement( tagName );
            name && ( input.name = name );
        }

        type && ( input.type = type );
        return input;
    },

    onbeforevalidate    : new Function(),
    onaftervalidate     : new Function(),
    oninvalid           : new Function(),
    
    /**
     * 验证控件
     * 
     * @protected
     * @param {boolean} 是否仅验证
     * @return {boolean} 是否验证通过
     */
    __validate: function ( justCheck ) {
        var i, len, rule;
        var rules = this._rules;
        var isValid;
        var validity = new esui.validator.Validity();
        
        // 开始验证前事件触发
        !justCheck && this.onbeforevalidate( validity );

        // 开始验证
        for ( i = 0, len = rules.length; i < len; i++ ) {
            rule = rules[ i ];
            validity.addState( rule.getName(), rule.checkValidity( this ) );
        }

        // 验证完成后事件触发
        !justCheck && this.onaftervalidate( validity );
        
        // 验证失败事件触发
        isValid = validity.isValid();
        if ( !isValid ) {
            this.oninvalid( validity );
        }
        
        // 验证信息显示
        !justCheck && this.showValidity( validity );

        return isValid;
    },
    
    /**
     * 验证控件，仅返回是否验证通过
     * 
     * @public
     * @return {boolean} 是否验证通过
     */
    checkValidity: function () {
        return this.__validate( true );
    },
    
    /**
     * 验证控件，当值不合法时显示错误信息
     * 
     * @public
     * @return {boolean} 是否验证通过
     */
    validate: function () {
        return this.__validate();
    },
    
    /**
     * 显示验证信息
     * 
     * @public
     * @param {validator.Validity} 验证信息
     */
    showValidity: function ( validity ) {
        var isValid         = validity.isValid();
        var dom             = this.__getValidMsgDom();
        var states          = validity.getStateList();
        var customMessage   = validity.getCustomMessage();
        var msg             = [];
        var i, len, state;


        if ( isValid ) {
            dom.innerHTML = '';
            baidu.hide( dom );
        } else {
            if ( customMessage ) {
                dom.innerHTML = customMessage;
            } else {
                for ( i = 0, len = states.length; i < len - 1; i++ ) {
                    state = states[ i ];
                    !state.getState() && msg.push( state.getMessage() );
                }

                dom.innerHTML = msg.join( ',' );
            }

            baidu.show( dom );
        }
    },

    /**
     * 获取显示验证信息的容器
     * 
     * @public
     * @return {HTMLElement}
     */
    __getValidMsgDom: function () {
        var id = this.__getId( 'validatemessage' );
        var dom = baidu.g( id );
        var father;

        if ( !dom ) {
            dom = document.createElement( 'span' );
            dom.id = id;
            dom.className = this._validatorMessageClass;
            father = this.main.parentNode;
            father && father.insertBefore( dom, this.main.nextSibling );
        }
        
        return dom;
    }
};  

baidu.inherits( esui.InputControl, esui.Control );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/Layer.js
 * desc:    浮动面板层
 * author:  erik
 */

///import esui.Control;
///import baidu.lang.inherits;
///import baidu.event.on;
///import baidu.event.un;
///import baidu.event.getTarget;

/**
 * 浮动面板层控件
 * 
 * @param {Object} options 参数
 */
esui.Layer = function ( options ) {
    esui.Control.call( this, options );

    // 类型声明，用于生成控件子dom的id和class
    this._type = this.retype || 'layer';
    
    // 标识鼠标事件触发自动状态转换
    this._autoState = 0;

    this.top = 0;
    this.left = 0;
    this.autoHide = this.autoHide || '';
};

esui.Layer.prototype = {
    /**
     * 绘制控件
     *
     * @public
     * @param {HTMLElement} main 控件挂载的DOM
     */
    render: function () {
        var main = this.main;
        esui.Control.prototype.render.call( this );

        main.style.position = 'absolute';
        main.style.left     = this._HIDE_POS;
        main.style.top      = this._HIDE_POS;
        this.zIndex && ( main.style.zIndex = this.zIndex );
        this.width  && ( main.style.width  = this.width + 'px' );
        this.height && ( main.style.height = this.height + 'px' );
        
        // 初始化autohide行为
        if ( this._autoHideInited ) {
            return;
        }

        switch ( this.autoHide.toLowerCase() ) {
        case 'click':
            this._clickHandler = this._getClickHider();
            baidu.on( document, 'click', this._clickHandler );
            break;
        case 'out':
            main.onmouseout = this._getOutHandler();
            main.onmouseover = this._getOverHandler();
            break;
        }

        this._autoHideInited = 1;
    },
    
    /**
     * 获取部件的css class
     * 
     * @override
     * @return {string}
     */
    __getClass: function ( name ) {
        name = name || this.partName;

        return esui.Control.prototype.__getClass.call( this, name );
    },
    
    /**
     * 获取鼠标移入的事件handler
     *
     * @private
     * @return {Function}
     */
    _getOverHandler: function () {
        var me = this;
        return function () {
            me.show();
        };
    },
    
    /**
     * 获取鼠标移出的事件handler
     *
     * @private
     * @return {Function}
     */
    _getOutHandler: function () {
        var me = this;
        return function () {
            me.onhide();
            me.hide();
        };
    },
    
    onhide: new Function(),

    /**
     * 获取点击自动隐藏的处理handler
     *
     * @private
     * @return {Function}
     */
    _getClickHider: function () {
        var me = this;
        return function ( e ) {
            if ( me._isHidePrevent ) {
                me._isHidePrevent = 0;
                return;
            }

            var tar = baidu.event.getTarget( e );
            while ( tar && tar != document.body ) {
                if ( tar == me.main ) {
                    return;
                }
                tar = tar.parentNode;
            }
            
            me.onhide();
            me.hide();
        };
    },

    /**
     * 在一次点击中阻止隐藏层
     * 
     * @private
     */
    _preventHide: function () {
        this._isHidePrevent = 1;
    },

    _HIDE_POS: '-10000px',
    
    /**
     * 设置浮动层的宽度
     *
     * @public
     * @param {number} width 宽度
     */
    setWidth: function ( width ) {
        this.main.style.width = width + 'px';
        this.width = width;
    },
    
    /**
     * 获取浮动层的宽度
     *
     * @public
     * @return {number}
     */
    getWidth: function () {
        return this.width || this.main.offsetWidth;
    },
    
    /**
     * 设置浮动层的高度
     *
     * @public
     * @param {number} height 高度
     */
    setHeight: function ( height ) {
        this.main.style.height = height + 'px';
        this.height = height;
    },
    
    /**
     * 获取浮动层的高度
     *
     * @public
     * @return {number}
     */
    getHeight: function () {
        return this.height || this.main.offsetHeight;
    },

    /**
     * 显示层
     * 
     * @public
     */
    show: function ( left, top ) {
        this._isShow = 1;
        this.left = left || this.left;
        this.top = top || this.top;
        
        this.main.style.left = this.left + 'px';
        this.main.style.top = this.top + 'px';
    },

    /**
     * 隐藏层
     * 
     * @public
     */
    hide: function () {
        this._isShow = 0;
        this.main.style.left = this._HIDE_POS;
        this.main.style.top = this._HIDE_POS;
    },
    
    /**
     * 获取层是否显示
     * 
     * @public
     * @return {boolean}
     */
    isShow: function () {
        return !!this._isShow;
    },
    
    /**
     * 释放控件
     * 
     * @private
     */
    __dispose: function () {
        var main = this.main;

        if ( this._clickHandler ) {
            baidu.un( document, 'click', this._clickHandler );
            this._clickHandler = null;
        }
        
        this.onhide = null;
        esui.Control.prototype.__dispose.call( this );
        
        main.innerHTML = '';
        main.parentNode && main.parentNode.removeChild( main );
    }
};

baidu.inherits( esui.Layer, esui.Control );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    ui/MonthView.js
 * desc:    日历月份显示单元
 * author:  erik, zhaolei
 */

///import esui.Control;
///import baidu.lang.inherits;
///import baidu.dom.g;
///import baidu.dom.addClass;
///import baidu.dom.removeClass;


/**
 * 日历月份显示单元
 * 
 * @param {Object} options 控件初始化参数
 */
esui.MonthView = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = "month";
    
    // 标识鼠标事件触发自动状态转换
    this._autoState = 0;

    esui.Control.call( this, options );

    this.now = this.now || esui.config.NOW || new Date();
    var viewBase = this.valueAsDate || this.now;
    this.year = parseInt( this.year, 10 ) || viewBase.getFullYear();
    this.month = parseInt( this.month, 10 ) || viewBase.getMonth();
};

esui.MonthView.prototype = {
    /**
     * 设置当前显示的月份日期
     * 
     * @public
     * @param {Date} view 当前显示的月份日期
     */
    setView: function ( view ) {
        this.month = view.getMonth();
        this.year = view.getFullYear();
        this.render();   
    },
    
    /**
     * 获取当前选择的日期
     * 
     * @public
     * @return {Date}
     */
    getValueAsDate: function () {
        return this.valueAsDate || null;
    },
    
    /**
     * 选择日期
     * 
     * @public
     * @param {Date} date 要选择的日期
     */
    setValueAsDate: function ( date ) {
        if ( date instanceof Date ) {
            var me = this;
            
            me._resetSelected();
            me.valueAsDate = date;
            me._paintSelected();
        }
    },
    
    /**
     * 绘制控件
     *
     * @public
     */
    render: function () {
        esui.Control.prototype.render.call( this );
        this.main.innerHTML = this._getHtml();
        this.setValueAsDate( this.valueAsDate );
    },

    /**
     * 日期的模板
     * @private
     */
    _tplItem: '<td year="{1}" month="{2}" date="{0}" class="{4}" style="{5}" id="{3}" onmouseover="{6}" onmouseout="{7}" onclick="{8}">{0}</td>',
    
    /**
     * 日期表格头的模板
     * @private
     */
    _tplHead: '<table border="0" cellpadding="0" cellspacing="0" class="{0}"><thead><tr>',

    /**
     * 标题显示配置
     */
    TITLE_WORDS: ['一', '二', '三', '四', '五', '六', '日'],
    
    /**
     * 获取控件的html
     * 
     * @private
     * @return {string}
     */
    _getHtml: function () {
        var me = this,
            html        = [ esui.util.format( me._tplHead, me.__getClass( 'main' ) ) ],
            index       = 0,
            year        = me.year,
            month       = me.month,
            repeater    = new Date( year, month, 1 ),
            nextMonth   = new Date( year, month + 1, 1 ),
            begin       = 1 - ( repeater.getDay() + 6 ) % 7,
            titles      = me.TITLE_WORDS,
            tLen        = titles.length,
            tIndex,
            virtual,
            overClass   = me.__getClass( 'over' ),
            virClass    = me.__getClass( 'item-virtual' ),
            itemClass   = me.__getClass( 'item' ),
            currentClass,
            customClass,
            overHandler = "baidu.addClass(this, '" + overClass + "')",
            outHandler  = "baidu.removeClass(this, '" + overClass + "')";
        
        // 绘制表头
        for ( tIndex = 0; tIndex < tLen; tIndex++ ) {
            html.push( '<td class="' + me.__getClass('title') + '">' + titles[ tIndex ] + '</td>' );
        }
        html.push( '</tr></thead><tbody><tr>' )        
        repeater.setDate( begin );
        
        // 绘制表体
        while ( nextMonth - repeater > 0 || index % 7 !== 0 ) {
            if ( begin > 0 && index % 7 === 0 ) {
                html.push( '</tr><tr>' );
            }
            
            virtual = (repeater.getMonth() != month);

            // 构建date的css class
            currentClass = itemClass;
            customClass = me._getCustomDateValue( 'customClass', repeater );

            virtual && (currentClass += ' ' + virClass);
            customClass && (currentClass += ' ' + customClass);

            html.push( esui.util.format(
                    me._tplItem, 
                    repeater.getDate(),
                    repeater.getFullYear(),
                    repeater.getMonth(),
                    me._getItemId( repeater ),
                    currentClass,
                    me._getCustomDateValue( 'customStyle', repeater ),
                    ( virtual ? '' : overHandler ),
                    ( virtual ? '' : outHandler ),
                    ( virtual ? '' : me.__getStrRef() + "._selectByItem(this)" )
                ) );
                          
            repeater = new Date( year, month, ++begin );
            index ++;
        }
               
        html.push( '</tr></tbody></table>' );
        return html.join( '' );
    },
    
    /**
     * 获取日期的用户自定义属性值
     * 
     * @private
     * @param {string} name 属性名
     * @param {Date} date 日期
     * @return {string}
     */
    _getCustomDateValue: function ( name, date ) {
        var value = this[ name ];
        var valueType = typeof value;
        
        switch ( valueType ) {
        case 'string':
            return value;
            break
        case 'function':
            return value.call( this, date ) || '';
            break
        }
        
        return '';
    },

    /**
     * 通过item的dom元素选择日期
     * 
     * @private
     * @param {HTMLElement} item dom元素td
     */
    _selectByItem: function ( item ) {
        var date  = item.getAttribute( 'date' ),
            month = item.getAttribute( 'month' ),
            year  = item.getAttribute( 'year' );
            
        this._change( new Date( year, month, date ) );
    },
    
    onchange: new Function(),
    
    /**
     * 选择当前日期
     * 
     * @private
     * @param {Date} date 当前日期
     */
    _change: function ( date ) {
        if ( !date ) {
            return;
        }
        
        if ( this.onchange( date ) !== false ) {
            this.setValueAsDate( date );
        }
    },

    /**
     * 清空选中的日期
     * 
     * @private
     */
    _resetSelected: function () {
        var me = this;

        if ( me.valueAsDate ) {
            var item = baidu.g( me._getItemId( me.valueAsDate ) );
            item && baidu.removeClass( item, me.__getClass( 'selected' ) );

            me.valueAsDate = null;
        }
    },

    /**
     * 绘制选中的日期
     * 
     * @private
     */
    _paintSelected: function () {
        var me = this;

        if ( me.valueAsDate ) {
            var date = me.valueAsDate;
            var item = baidu.g( me._getItemId( date ) );

            item && baidu.addClass( item, me.__getClass( 'selected' ) );
        }
    },
    
    /**
     * 获取日期对应的dom元素item的id
     * 
     * @private
     * @param {Date} date 日期
     * @return {string}
     */
    _getItemId: function ( date ) {
        return this.__getId(
            date.getFullYear() 
            + '-' + date.getMonth() 
            + '-' + date.getDate()
        );
    }
};

baidu.inherits( esui.MonthView, esui.Control );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/Select.js
 * desc:    下拉选择框
 * author:  erik, zhaolei, linzhifeng
 */

///import esui.InputControl;
///import esui.Layer;
///import baidu.lang.inherits;

/**
 * 下拉选择框控件
 * 
 * @param {Object} options 参数
 */
esui.Select = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'select';
   
    // 标识鼠标事件触发自动状态转换
    this._autoState = 1;
    
    esui.InputControl.call( this, options );

    // 参数初始化
    this.__initOption( 'maxItem', null, 'MAX_ITEM' );
    this.__initOption( 'emptyText', null, 'EMPTY_TEXT' );
    this.emptyLabel = esui.util.format(
        this._tplLabel,  
        this.__getClass('text-def'), 
        this.emptyText );
    
    this.datasource = this.datasource || [];
};

esui.Select.EMPTY_TEXT = '请选择'; // 选项为空时主区域显示文字
esui.Select.MAX_ITEM   = 8;        // 浮动层最大选项设置，超出则浮动层出现滚动条

esui.Select.prototype = {
    /**
     * 设置控件为禁用
     * 
     * @public
     */
    disable: function () {
        this.hideLayer();
        esui.InputControl.prototype.disable.call( this );
    },
    
    /**
     * 设置控件为可用
     * 
     * @public
     */
    enable: function () {
        this.hideLayer();
        esui.InputControl.prototype.enable.call( this );
    },
    
    /**
     * 绘制控件
     * 
     * @public
     * @param {HTMLElement} main 外部容器
     */
    render: function() {
        var me = this,
            main = me.main,
            value = me.value;

        if ( !me._isRendered ) {
            esui.InputControl.prototype.render.call( me );

            main.innerHTML  = me._getMainHtml();
            main.onclick    = me._getMainClickHandler();

            me._isRendered = 1;
        }
        
        // 绘制浮动层
        me._renderLayer();
        
        me.width && ( main.style.width = me.width + 'px' );
        if ( !esui.util.hasValue(me.value) && esui.util.hasValue( me.selectedIndex ) ) {
            me.setSelectedIndex( me.selectedIndex );
        } else {
            me.setValue( value );
        }
        
        me.setReadOnly ( !!me.readOnly );
        me.setDisabled( !!me.disabled );
    },
    
    // 主体部分模板
    _tplMain: '<div id="{0}" class="{1}" value="" style="width:{3}px"><nobr>{2}</nobr></div><div class="{4}" arrow="1"></div>',
    
    // 无选择时主区域显示的内容
    _tplLabel: '<span class="{0}">{1}</span>',

    /**
     * 获取主体部分HTML
     * 
     * @return {string}
     */
    _getMainHtml: function() {
        var me = this;
        
        return esui.util.format(
            me._tplMain,
            me.__getId( 'text' ),
            me.__getClass( 'text' ),
            me.staticText || me.emptyLabel,
            me.width - 20,
            me.__getClass( 'arrow' )
        );
    },

    /**
     * 绘制下拉列表
     *
     * @private
     */
    _renderLayer: function() {
        var me      = this,
            layerId = me.__getId( 'layer' ),
            layer   = me.getLayer(),
            len     = me.datasource.length,
            maxItem = me.maxItem,
            layerMain,
            layerMainWidth,
            itemHeight;
        
        if ( !layer ) {
            layer = esui.util.create( 'Layer', {
                    id      : layerId,
                    autoHide: 'click',
                    retype  : me._type,
                    partName: 'layer',
                    skin    : me.skin
                } );
            layer.appendTo();
            me._controlMap[ 'layer' ] = layer;
            layer.onhide = me._getLayerHideHandler();
        }
        
        
        layerMain = layer.main;
        layerMain.style.width   = 'auto';
        layerMain.style.height  = 'auto';
        layerMain.innerHTML     = me._getLayerHtml();
        layerMainWidth          = layerMain.offsetWidth;

        if ( len > maxItem ) {
            itemHeight = layerMain.firstChild.offsetHeight;
            layerMain.style.height = maxItem * ( itemHeight + 1 ) + 'px';
            layerMainWidth += 17;
        }

        if ( layerMainWidth < me.width ) {
            layer.setWidth( me.width );
        } else {
            layer.setWidth( layerMainWidth );
        }
        
        // TODO:页面resize的时候需要调整浮动层的位置
    },
    
    /**
     * 获取浮动层关闭的handler
     * 
     * @private
     * @return {Function}
     */
    _getLayerHideHandler: function () {
        var me = this;
        return function () {
            me.removeState( 'active' );
        };
    },

    // Layer中每个选项的模板
    _tplItem: '<div id="{0}" {10} class="{1}" index="{2}" value="{3}" dis="{4}" onmouseover="{6}" onmouseout="{7}" onclick="{8}">{9}<nobr>{5}</nobr></div>',
    
    // Item中图标层的模板
    _tplIcon: '<span class="{0}"></span>',
    
    /**
     * 获取下拉列表层的HTML
     * 
     * @return {string}
     */
    _getLayerHtml: function () {
        var me          = this,
            datasource  = me.datasource,
            i           = 0,
            len         = datasource.length,
            html        = [],
            strRef      = me.__getStrRef(),
            basicClass  = me.__getClass( 'item' ),
            itemClass,
            dis,
            item,
            iconClass,
            iconHtml,
            titleTip;

        for ( ; i < len; i++ ) {
            itemClass   = basicClass;
            dis         = 0;
            item        = datasource[ i ];
            iconHtml    = '';
            titleTip    = '';
            
            // 初始化icon的HTML
            if ( item.icon ) {
                iconClass = me.__getClass( 'icon-' + item.icon );
                iconHtml = esui.util.format( me._tplIcon, iconClass );
            }
            
            // 初始化基础样式
            if ( item.style ) {
                itemClass += ' ' + basicClass + '-' + item.style;
            }
            
            // 初始化不可选中的项
            if ( item.disabled ) {
                dis = 1;
                itemClass += ' ' + basicClass + '-disabled'; 
            }
            
            // 初始化选中样式
            if ( item.value == me.value ) {
                itemClass += ' ' + me.__getClass( 'item-selected' )
            }
            if ( me.titleTip ) {
                titleTip = 'title="' + item.name + iconHtml + '"';
            }
            
            html.push(
                esui.util.format(me._tplItem,
                    me.__getId( 'item' ) + i,
                    itemClass,
                    i,
                    item.value,
                    dis,
                    item.name,
                    strRef + '._itemOverHandler(this)',
                    strRef + '._itemOutHandler(this)',
                    strRef + '._itemClickHandler(this)',
                    iconHtml,
                    titleTip
                ) );
        }
        
        return html.join( '' );
    },
    
    /**
     * 设置控件为readOnly
     * 
     * @public
     * @param {boolean} readOnly
     */
    setReadOnly: function ( readOnly ) {
        this.readOnly = readOnly = !!readOnly;
        readOnly ? this.addState( 'readonly' ) : this.removeState( 'readonly' );
    },
    
    /**
     * 获取主区域点击的事件handler
     * 
     * @private
     * @return {Function}
     */
    _getMainClickHandler: function () {
        var me = this;

        return function ( e ) {
            e = e || window.event;
            var tar = e.srcElement || e.target;

            if ( !me.readOnly && !me.isDisabled() ) {
                if ( tar.getAttribute( 'arrow' ) || me.onmainclick() !== false ) {
                    me.getLayer()._preventHide();
                    me.toggleLayer();
                }
            }
        };
    },

    onmainclick: new Function(),

    /**
     * 显示层
     * 
     * @public
     */
    showLayer: function() {
        var me = this,
            main                = me.main,
            mainPos             = baidu.dom.getPosition( main ),
            layer               = me.getLayer(),
            layerMain           = layer.main,
            layerOffsetHeight   = layerMain.offsetHeight,
            mainOffsetHeight    = main.offsetHeight,
            pageVHeight         = baidu.page.getViewHeight(),
            layerVHeight        = mainPos.top
                                    + mainOffsetHeight 
                                    + layerOffsetHeight 
                                    - baidu.page.getScrollTop(),
            layerTop;

        if ( pageVHeight > layerVHeight ) {
            layerTop = mainPos.top + mainOffsetHeight - 1;
        } else {
            layerTop = mainPos.top - layerOffsetHeight + 1;
        }
        
        layer.show( mainPos.left, layerTop );
        me.addState( 'active' );
    },
    
    /**
     * 隐藏层
     * 
     * @public
     */
    hideLayer: function() {
        this.getLayer().hide();
        this.removeState( 'active' );
    },
    
    /**
     * 显示|隐藏 层
     * 
     * @public
     */
    toggleLayer: function() {
        var me = this;
        if ( me.getLayer().isShow() ) {
            me.hideLayer();
        } else {
            me.showLayer();
        }
    },
    
    /**
     * 获取layer的控件对象
     * 
     * @return {Object}
     */
    getLayer: function() {
        return this._controlMap[ 'layer' ];
    },
    
    /**
     * 获取ComboBox当前选项部分的DOM元素
     * 
     * @return {HTMLElement}
     */
    _getCur: function() {
        return baidu.g( this.__getId( 'text' ) );
    },
    
    /**
     * 获取当前选中的值
     * 
     * @public
     * @return {string}
     */
    getValue: function() {
        if ( esui.util.hasValue( this.value ) ) {
            return this.value;
        }

        return '';
    },
    
    /**
     * 根据值选择选项
     *
     * @public
     * @param {string} value 值
     */
    setValue: function( value ) {
        var me = this,
            layer = me.getLayer().main,
            items = layer.getElementsByTagName( 'div' ),
            len,
            i,
            item;

        if ( esui.util.hasValue( value ) ) {
            for ( i = 0, len = items.length; i < len; i++ ) {
                item = items[ i ].getAttribute( 'value' );
                if ( item == value ) {
                    me.setSelectedIndex( i );
                    return;
                }
            }
/*
            for ( i = 0, len = me.datasource.length; i < len; i++ ) {
                if ( me.datasource[i].value === value ) {
                    me.setSelectedIndex( i );
                    return;
                }
            }
*/
        }
        
        me.value = null;
        me.setSelectedIndex( -1 );
    },
    
    /**
     * 根据索引选择选项
     * 
     * @public
     * @param {number} index 选项的索引序号
     * @param {boolean} opt_isDispatch 是否发送事件
     */
    setSelectedIndex: function ( index, opt_isDispatch ) {
        var selected = this.datasource[ index ],
            value;
            
        if ( !selected ) {
            value = null;
        } else {
            value = selected.value;
        }
        

        this.selectedIndex = index;
        this.value = value;
        
        if (
            opt_isDispatch === true 
            && this.onchange( value, selected ) === false
        ) {
            return;
        }
        
        this._repaint();
    },
    
    onchange: new Function(),

    /**
     * 重绘控件
     * 
     * @private
     */
    _repaint: function () {
        var selected = this.datasource[ this.selectedIndex ],
            word = this.staticText || ( selected ? selected.name : this.emptyLabel ),
            titleTip = this.staticText || ( selected ? selected.name : this.emptyText ),
            el = this._getCur();
            
        if ( this.titleTip ) {
            el.title = titleTip;    
        }
        el.innerHTML = '<nobr>' + word + '</nobr>';
        
        this._repaintLayer();
    },
    
    /**
     * 重绘选项列表层
     * 
     * @private
     */
    _repaintLayer: function () {
        var me              = this,
            index           = me.selectedIndex,
            walker          = me.getLayer().main.firstChild,
            selectedClass   = me.__getClass( 'item-selected' );
            
        while ( walker ) {
            if ( walker.getAttribute( 'index' ) == index ) {
                baidu.addClass( walker, selectedClass );
            } else {
                baidu.removeClass( walker, selectedClass );
            }

            walker = walker.nextSibling;
        }
    },
    
    /**
     * 选项点击事件
     * 
     * @private
     * @param {HTMLElement} item 选项
     */
    _itemClickHandler: function ( item ) {
        var index = item.getAttribute( 'index' );
        var disabled = item.getAttribute( 'dis' );

        if ( disabled == 1 ) {
            return;
        }

        this.hideLayer();
        this.setSelectedIndex( parseInt( index, 10 ), true );
    },

    /**
     * 选项移上事件
     * 
     * @private
     * @param {HTMLElement} item 选项
     */
    _itemOverHandler: function ( item ) {
        if ( item.getAttribute( 'dis' ) == 1 ) {
            return;
        }
        
        var index = item.getAttribute( 'index' );
        baidu.addClass( 
            this.__getId( 'item' ) + index, 
            this.__getClass( 'item-hover' ) );
    },
    
    /**
     * 选项移开事件
     * 
     * @private
     * @param {HTMLElement} item 选项
     */
    _itemOutHandler: function ( item ) {
        var index = item.getAttribute( 'index' );
        baidu.removeClass(
            this.__getId( 'item' ) + index, 
            this.__getClass( 'item-hover' ) );
    },
    
    /**
     * 释放控件
     * 
     * @private
     */
    __dispose: function () {
        this.onchange = null;
        esui.InputControl.prototype.__dispose.call( this );
    }
};

baidu.inherits( esui.Select, esui.InputControl );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    ui/Calendar.js
 * desc:    单日期选择器
 * author:  zhaolei, erik
 */

///import esui.InputControl;
///import esui.Layer;
///import esui.MonthView;
///import esui.Select;
///import esui.Button;
///import baidu.lang.inherits;
///import baidu.date.format;
///import baidu.date.parse;
///import baidu.dom.getPosition;
///import baidu.page.getWidth;

/**
 * 单日期选择器
 * 
 * @param {Object} options 控件初始化参数
 */
esui.Calendar = function (options) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'cal';

    
    // 标识鼠标事件触发自动状态转换
    this._autoState = 1;

    esui.InputControl.call( this, options );

    // 初始化显示日期的年月
    this.now = this.now || esui.config.NOW || new Date();
    var now = this.now;
    now = this.now = new Date(
        now.getFullYear(), 
        now.getMonth(), 
        now.getDate()
    );

    // 日期格式化方式初始化
    this.__initOption( 'dateFormat', null, 'DATE_FORMAT' );
    this.__initOption( 'valueFormat', null, 'VALUE_FORMAT' );
    this.__initOption( 'range', null, 'RANGE' );

    // 初始化value与valueAsDate
    var valueAsDate;
    if ( this.value ) {
        valueAsDate = baidu.date.parse( this.value );
    }

    if ( valueAsDate ) {
        this.valueAsDate = valueAsDate;
    } else {
        this.valueAsDate = this.valueAsDate || new Date( now.getTime() );
    }
   
    
    valueAsDate = this.valueAsDate;
    this.month = parseInt( this.month, 10 );
    if ( isNaN( this.month ) ) {
        this.month = valueAsDate.getMonth();
    }
    this.year  = parseInt( this.year, 10 ) || valueAsDate.getFullYear();
};

esui.Calendar.DATE_FORMAT = 'yyyy-MM-dd';
esui.Calendar.VALUE_FORMAT = 'yyyy-MM-dd';
esui.Calendar.RANGE = {
    begin: new Date(2001, 8, 3),
    end: new Date(2046, 10, 4)
};


esui.Calendar.prototype = {
    /**
     * 绘制控件
     * 
     * @public
     * @param {HTMLElement} main 控件的容器元素
     */
    render: function () {
        var me = this;
        var main = me.main;
        
        if ( !me._isRendered ) {
            esui.InputControl.prototype.render.call( me );

            // 初始化主区域
            main.innerHTML = me._getMainHtml();
            main.onclick = me._getMainClickHandler();

            // 创建日历部件的控件对象
            me._renderLayer();

            me._isRendered = 1;
        }
        
        me.setValueAsDate( me.valueAsDate );
    },
   
    /**
     * 获取当前选取的日期(字符串表示)
     * 
     * @public
     * @return {string}
     */
    getValue: function () {
        if ( this.valueAsDate ) {
            return baidu.date.format( this.valueAsDate, this.valueFormat );
        }

        return '';
    },
    
    /**
     * 设置当前选取的日期
     * 
     * @public
     * @param {string} value 选取的日期(字符串表示)
     */
    setValue: function ( value ) {
        var valueAsDate = baidu.date.parse( value );
        valueAsDate && ( this.setValueAsDate( valueAsDate ) );
    },
    
    /**
     * 获取当前选取的日期对象
     * 
     * @public
     * @return {Date}
     */
    getValueAsDate: function () {
        return this.valueAsDate || null;
    },

    /**
     * 设置当前选取的日期
     * 
     * @public
     * @param {Date} valueAsDate 选取的日期
     */
    setValueAsDate: function ( valueAsDate ) {
        if ( !valueAsDate ) {
            return;
        }

        var me = this;
        me.valueAsDate = valueAsDate;
        
        me.getLayer()._controlMap.monthview.setValueAsDate( valueAsDate );
        me.month = valueAsDate.getMonth();
        me.year  = valueAsDate.getFullYear();
        me._repaintMonthView();
        baidu.g( me.__getId('text') ).innerHTML = baidu.date.format( valueAsDate, me.dateFormat );
    },
    
    /**
     * 获取主区域点击的事件handler
     * 
     * @private
     * @return {Function}
     */
    _getMainClickHandler: function () {
        var me = this;

        return function ( e ) {
            if ( !me.isDisabled() ) {
                me.getLayer()._preventHide();
                me.toggleLayer();
            }
        };
    },

     
    /**
     * 显示|隐藏 浮动层
     * 
     * @public
     */
    toggleLayer: function () {
        var me = this;

        if ( this.getLayer().isShow() ) {
            me.hideLayer();
        } else {
            me.showLayer();
        }
    },
    
    /**
     * 隐藏浮动层
     * 
     * @public
     */
    hideLayer: function () {
        this.getLayer().hide();
        this.removeState( 'active' );
    },
    
    /**
     * 显示浮动层
     * 
     * @public
     */
    showLayer: function () {
        var me = this,
            main        = me.main,
            pos         = baidu.dom.getPosition(main),
            pageWidth   = baidu.page.getWidth(),
            layer       = me.getLayer(),
            layerWidth  = layer.main.offsetWidth,
            layerTop    = pos.top + main.offsetHeight,
            layerLeft;

        if ( pageWidth < ( pos.left + layerWidth ) ) {
            layerLeft = pos.left + main.offsetWidth - layerWidth;
        } else {
            layerLeft = pos.left;
        }

        layer.show( layerLeft, layerTop );
        this.addState( 'active' );
    },

    /**
     * 获取控件的html
     * 
     * @private
     * @return {string}
     */
    _getMainHtml: function () {
        var me    = this,
            input = 'text',
            date  = me.getValueAsDate();

        return esui.util.format( 
            me._tplMain,
            me.__getId( input ),
            me.__getClass( input ),
            me.__getClass( 'arrow' ),
            baidu.date.format( date, me.dateFormat ) 
        );
    },
    
    /**
     * 主显示区域的html
     * @private
     */
    _tplMain: '<div class="{1}" id="{0}">{3}</div><div class="{2}"></div>',
    
    /**
     * 浮动层html模板
     * @private
     */
    _tplLayer: '<div class="{0}"><table><tr>'
                    + '<td width="40" align="left"><div ui="type:Button;id:{1};skin:back"></div></td>'
                    + '<td><div ui="type:Select;id:{3};width:55"</td>'
                    + '<td><div ui="type:Select;id:{4};width:40"</td>'
                    + '<td width="40" align="right"><div ui="type:Button;id:{2};skin:forward"></div></td>'
                + '</tr></table></div><div ui="id:{5};type:MonthView"></div>',

    
    /**
     * 绘制浮动层
     * 
     * @private
     */
    _renderLayer: function () {
        var me = this,
            layerId = me.__getId( 'layer' ),
            layer   = esui.util.create( 'Layer', {
                    id      : layerId,
                    autoHide: 'click',
                    retype  : me._type,
                    partName: 'layer',
                    skin    : me.skin
                } );
        
        me._controlMap.layer = layer;
        layer.appendTo();
        layer.onhide = me._getLayerHideHandler();
        
        layer.main.innerHTML = esui.util.format(
            me._tplLayer,
            me.__getClass( 'layer-head' ),
            me.__getId( 'prevmonth' ),
            me.__getId( 'nextmonth' ),
            me.__getId( 'year' ),
            me.__getId( 'month' ),
            me.__getId( 'monthview' )
        );
        
        me._initLayerUI();
    },
    
    /**
     * 初始化浮动层上的子ui组件
     *
     * @private
     */
    _initLayerUI: function () {
        var prevMonth = this.__getId( 'prevmonth' );
        var nextMonth = this.__getId( 'nextmonth' );
        var year      = this.__getId( 'year' );
        var month     = this.__getId( 'month' );
        var monthView = this.__getId( 'monthview' );
        
        var layer        = this.getLayer();
        var uiProp       = {};
        var layerCtrlMap = layer._controlMap;
        var controlMap;
        

        uiProp[ monthView ] = {
            valueAsDate: this.valueAsDate, 
            customClass: this._getMVCustomClass()
        };
        uiProp[ month ] = {
            datasource: this._getMonthOptions( this.year ), 
            value: this.month
        };
        uiProp[ year ] = {
            datasource: this._getYearOptions(), 
            value: this.year
        };
        
        controlMap  = esui.util.init( layer.main, uiProp );
        prevMonth   = controlMap[ prevMonth ];
        nextMonth   = controlMap[ nextMonth ];
        year        = controlMap[ year ];
        month       = controlMap[ month ];
        monthView   = controlMap[ monthView ];

        layerCtrlMap.prevMonth  = prevMonth;
        layerCtrlMap.nextMonth  = nextMonth;
        layerCtrlMap.year       = year;
        layerCtrlMap.month      = month;
        layerCtrlMap.monthview  = monthView;

        year.onchange       = this._getYearChangeHandler();
        month.onchange      = this._getMonthChangeHandler();
        nextMonth.onclick   = this._getMonthNexter();
        prevMonth.onclick   = this._getMonthPrever();
        monthView.onchange  = this._getMVChangeHandler();
    },
    
    /**
     * 判断日期是否属于允许的区间中
     * 
     * @private
     * @param {Date} date
     * @return {boolean}
     */
    _isInRange: function ( date ) {
        var begin = this.range.begin;
        var end = this.range.end;

        if ( ( begin && date - begin < 0 ) 
             || ( end && end - date < 0 )
        ) {
            return false;
        }

        return true;
    },
    
    /**
     * 获取日历区域点击选择的handler
     *
     * @private
     * @return {Function}
     */
    _getMVChangeHandler: function () {
        var me = this;

        return function ( date ) {
            if ( !me._isInRange( date ) ) {
                return false;
            }

            if ( me.onchange( date ) !== false ) {
                me.value = date;
                me.hideLayer();

                var textEl = baidu.g( me.__getId( 'text' ) );
                textEl.innerHTML = baidu.date.format( date, me.dateFormat );
            } else {
                return false;
            }
        };
    },

    onchange: new Function(),
 
    /**
     * 获取日历选择的自定义样式生成器
     * 
     * @private
     * @return {Function}
     */
    _getMVCustomClass: function () {
        var me = this;
        return function ( date ) {
            if ( !me._isInRange( date ) ) {
                return this.__getClass( 'item-out' );
            }

            return '';
        };
    },

    /**
     * 获取“下一个月”按钮点击的handler
     *
     * @private
     * @return {Function}
     */
    _getMonthNexter: function () {
        var me = this;
        return function () {
            me._repaintMonthView( me.year, me.month + 1 );
        };
    },
    
    /**
     * 获取“上一个月”按钮点击的handler
     *
     * @private
     * @return {Function}
     */
    _getMonthPrever: function () {
        var me = this;
        return function () {
            me._repaintMonthView( me.year, me.month - 1 );
        };
    },

    /**
     * 获取年份切换的handler
     * 
     * @private
     * @return {Function}
     */
    _getYearChangeHandler: function () {
        var me = this;

        return function ( year ) {
            me.year = year;

            me._repaintMonthView( year, me.month );
            me.getLayer()._preventHide();
        };
    },
     
    /**
     * 获取月份切换的handler
     * 
     * @private
     * @return {Function}
     */
    _getMonthChangeHandler: function () {
        var me = this;

        return function ( month ) {
            me._repaintMonthView( me.year, month );
            me.getLayer()._preventHide();
        };
    },
    
    /**
     * 获取浮动层元素
     * 
     * @public
     * @return {HTMLElement}
     */
    getLayer: function () {
        return this._controlMap.layer;
    },

    /**
     * 获取浮动层关闭的handler
     * 
     * @private
     * @return {Function}
     */
    _getLayerHideHandler: function () {
        var me = this;
        return function () {
            me.removeState( 'active' );
        };
    },
    
    /**
     * 获取可选择的年列表
     * 
     * @private
     * @return {Array}
     */
    _getYearOptions: function () {
        var range  = this.range,
            result = [],
            end    = range.end.getFullYear(),
            i      = range.begin.getFullYear();

        for ( ; i <= end; i++ ) {
            result.push( {
                name  : i, 
                value : i
            } );
        }

        return result;
    },

    /**
     * 获取可选择的月列表
     * 
     * @private
     * @param {number} year 选中的年
     * @return {Array}
     */
    _getMonthOptions: function ( year ) {
        var range   = this.range,
            result  = [],
            i       = 0,
            len     = 11;
        
        if ( year == range.begin.getFullYear() ) {
            i = range.begin.getMonth();
        } 
        
        if ( year == range.end.getFullYear() ) {
            len = range.end.getMonth();
        }

        for ( ; i <= len; i++) {
            result.push( {
                name: (i + 1), 
                value: i
            });
        }

        return result;
    },
    
    /**
     * 绘制浮动层内的日历部件
     * 
     * @private
     */
    _repaintMonthView: function ( year, month ) {
        if ( !esui.util.hasValue( year ) ) {
            year = this.year;
        }
        if ( !esui.util.hasValue( month ) ) {
            month = this.month;
        }

        var me = this,
            range       = me.range,
            view        = new Date(year, month, 1),
            layer       = me.getLayer(),
            layerCM     = layer._controlMap,
            cal         = layerCM.monthview,
            rangeBegin  = range.begin.getFullYear() * 12 + range.begin.getMonth(),
            rangeEnd    = range.end.getFullYear() * 12 + range.end.getMonth(),
            viewMonth   = year * 12 + month,
            monthSelect = layerCM.month;
        
        month = view.getMonth();
        if ( rangeBegin - viewMonth > 0 ) {
            month += ( rangeBegin - viewMonth );
        } else if ( viewMonth - rangeEnd > 0 ) {
            month -= ( viewMonth - rangeEnd );
        }
        view.setMonth( month );
        me.month = view.getMonth();
        me.year  = view.getFullYear();
        
        monthSelect.datasource = me._getMonthOptions( me.year );
        monthSelect.render();
        monthSelect.setValue( me.month );
        
        layerCM.year.setValue( me.year );
        layerCM.prevMonth.setDisabled( ( rangeBegin >= viewMonth ) );
        layerCM.nextMonth.setDisabled( ( rangeEnd <= viewMonth ) );
        
        // 绘制日历部件
        cal.setView( view );
    },
    
    /**
     * 释放控件
     * 
     * @protected
     */
    __dispose: function () {
        this.onchange = null;
        esui.InputControl.prototype.__dispose.call( this );
    }
};

baidu.inherits( esui.Calendar, esui.InputControl );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/BoxGroup.js
 * desc:    选项组类
 * author:  zhaolei, erik
 */

///import esui.util;

/**
 * 选项组
 * 
 * @class
 * @description 
 *      该对象不往DOM上画东西，只做一些全选、反选、取值的事情
 * 
 * @param {Object} options 参数
 */
esui.BoxGroup = function( options ) {
    this.name     = options.name;
    this.type     = options.type;
    this.control  = options.control;
};

esui.BoxGroup.prototype = {
    /**
     * 获取选项组选中的值
     * 
     * @public
     * @return {string}
     */
    getValue: function() {
        var me      = this,
            boxs    = me.getBoxList(),
            len     = boxs.length,
            re      = [],
            i       = 0,
            box;
        
        for ( ; i < len; i++ ) {
            box = boxs[ i ];
            if ( box.isChecked() ) {
                re.push( box.getValue() );
            }
        }
        
        return re.join( ',' );
    },
    
    /**
     * 对选项组下所有选项进行全选
     * 
     * @public
     * @description 
     *      仅多选控件可用
     */
    selectAll: function() {
        if ( this.type != 'checkbox' ) {
            return;
        }

        var boxs    = this.getBoxList(),
            len     = boxs.length,
            i       = 0;
        
        for ( ; i < len; i++ ) {
            boxs[i].setChecked( true );
        }
    },
    
    /**
     * 对选项组下所有选项进行反选
     * 
     * @public
     * @description 
     *      仅多选控件可用
     */
    selectInverse: function() {
        if ( this.type != 'checkbox' ) {
            return;
        }

        var boxs    = this.getBoxList(),
            len     = boxs.length,
            i       = 0,
            box;

        for ( ; i < len; i++ ) {
            box = boxs[ i ];
            box.setChecked( !box.isChecked() );
        }
    },
    
    /**
     * 获取选项组下的DOM元素列表
     * 
     * @public
     * @return {Array}
     */
    getBoxList: function() {
        var me      = this,
            name    = me.name,
            type    = me.type,
            result  = [],
            parent  = me.control.main,
            els,
            i,
            el,
            len,
            control;
        
        while ( parent 
                && parent.tagName != 'FORM' 
                && parent != document.body 
        ) {
            parent = parent.parentNode;
        }

        els = parent.getElementsByTagName( 'input' );
        len = els.length;
        for ( i = 0; i < len; i++ ) {
            el = els[ i ];
            control = esui.util.getControlByDom( el );
           
            if (control 
                && control instanceof esui.BoxControl
                && control.getType() == type 
                && control.name == name
            ) {
                result.push( control );
            }
        }
        
        return result;
    }
};
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/BoxControl.js
 * desc:    选择框控件基类
 * author:  zhaolei, erik
 */

///import esui.InputControl;
///import esui.BoxGroup;
///import baidu.lang.inherits;
///import baidu.string.encodeHTML;
///import baidu.dom.insertAfter;
///import baidu.array.contains;

/**
 * 选择框控件基类
 * 
 * @description 不直接使用，供CheckBox和Radio继承
 * @param {Object} options 控件初始化参数
 */
esui.BoxControl = function ( options ) {
    // 标识鼠标事件触发自动状态转换
    this._autoState = 1;

    esui.InputControl.call( this, options );
};

esui.BoxControl.prototype = {
    onclick: new Function(),
    
    /**
     * 获取控件类型，checkbox|radio
     * 
     * @public
     * @return {string}
     */
    getType: function () {
        return this._type;
    },

    /**
     * 设置选中状态
     * 
     * @public
     * @param {boolean} checked 状态
     */
    setChecked: function ( checked ) {
        this.main.checked = !!checked;
    },
    
    /**
     * 获取选中状态
     * 
     * @public
     * @return {boolean}
     */
    isChecked: function() {
        return this.main.checked;
    },
    
    /**
     * 设置box为不可用状
     * 
     * @public
     */
    disable: function () {
        this.main.disabled = true;
        this.disabled = true;

        esui.InputControl.prototype.disable.call( this );
    },

    /**
     * 设置box为不可用状
     * 
     * @public
     */
    enable: function () {
        this.main.disabled = false;
        this.disabled = false;

        esui.InputControl.prototype.enable.call( this );
    },
    
    /**
     * 设置box的只读状态
     * 
     * @public
     */
    setReadOnly: function ( readOnly ) {
        this.main.disabled = readOnly;
        readOnly ? this.addState( 'readonly' ) : this.removeState( 'readonly' );
    },
    
    /**
     * 获取分组
     * 
     * @public
     * @return {esui.BoxGroup}
     */
    getGroup: function() {
        return new esui.BoxGroup( {
            name    : this.name, 
            type    : this._type,
            control : this
        } );
    },
    
    /**
     * 设置值
     * 
     * @public
     * @param {string} value
     */
    setValue: function( value ) {
        this.main.setAttribute( 'value', value );
    },
    
    /**
     * 获取值
     * 
     * @public
     * @return {string}
     */
    getValue: function() {
        return this.main.getAttribute( 'value' ) || 'on';
    },
    
    /**
     * 渲染控件
     *
     * @public
     */
    render: function () {
        var me   = this,
            main = me.main,
            data = me.datasource,
            title,
            label,
            value;
        
        esui.InputControl.prototype.render.call( me );
        
        // 初始化click事件
        if ( !me._mainClick ) {
            me._mainClick = me.__getClickHandler();
            main.onclick  = me._mainClick;
        }

        // 插入点击相关的label元素
        if ( !me._label ) {
            label = document.createElement( 'label' );
            label.className = me.__getClass( 'label' );
            baidu.setAttr( label, 'for', main.id );

            baidu.dom.insertAfter( label, main );
            me._label = label;
        } else {
            label = me._label;
        }

        // 初始化label的内容
        title = me.title || main.title || me.getValue();
        label.innerHTML = baidu.encodeHTML( title );
        
        // 初始化disabled
        me.setDisabled ( !!me.disabled );

        // 初始化value
        me.value && me.setValue( me.value );
        value = me.getValue();
        
        // 初始化checked
        switch ( typeof data ) {
        case 'string':
        case 'number':
            me.setChecked( data == value );
            break;

        default:
            if ( data instanceof Array ) {
                me.setChecked( baidu.array.contains( data, value ) );
            }
            break;
        }
    },
    
    /**
     * 获取click事件handler
     *
     * @protected
     */
    __getClickHandler: function() {
        var me = this;
        return function ( e ) {
            if ( !me.isDisabled() ) {
                me.onclick( e );
            }
        };
    },

    /**
     * 释放控件
     * 
     * @protected
     */
    __dispose: function () {
        this.onclick    = null;
        this._mainClick = null;
        this._label     = null;

        esui.InputControl.prototype.__dispose.call( this );
    },

    /**
     * 创建控件主元素
     *
     * @protected
     * @return {HTMLInputElement}
     */
    __createMain: function () {
        return esui.InputControl.prototype.__createInput.call( this, {
            tagName : 'input',
            name    : this.name,
            type    : this.type
        } );
    }
};

baidu.inherits( esui.BoxControl, esui.InputControl );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/CheckBox.js
 * desc:    多选框控件
 * author:  zhaolei, erik
 */

///import esui.BoxControl;
///import baidu.lang.inherits;

/**
 * 多选框控件
 * 
 * @param {Object} options 控件初始化参数
 */
esui.CheckBox = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'checkbox';

    esui.BoxControl.call( this, options );
};

baidu.inherits( esui.CheckBox, esui.BoxControl );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/Radio.js
 * desc:    单选框控件
 * author:  zhaolei, erik
 */

///import esui.BoxControl;
///import baidu.lang.inherits;

/**
 * 单选框控件
 * 
 * @param {Object} options 控件初始化参数
 */
esui.Radio = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type      = 'radiobox';

    esui.BoxControl.call( this, options );
};

baidu.inherits( esui.Radio, esui.BoxControl );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 *
 * path:    esui/Mask.js
 * desc:    页面遮盖控件
 * author:  zhaolei, erik, linzhifeng
 */

///import esui;
///import baidu.dom.g;
///import baidu.event.on;
///import baidu.event.un;

/**
 * 页面遮盖控件
 */
esui.Mask = (function() {
    var maskClass = 'ui-mask';
    var idPrefix  = 'ctrlMask';

    /**
     * 遮盖层初始化
     *
     * @private
     */
    function init( level ) {
        var id = idPrefix + level,
            el = document.createElement( 'div' );
        
        el.id = id;
        document.body.appendChild( el );
    }

    /**
     * 重新绘制遮盖层的位置
     *
     * @private
     * @param {HTMLElement} mask 遮盖层元素.
     */
    function repaintMask( mask ) {
        var width = Math.max(
                        document.documentElement.clientWidth,
                        Math.max(
                            document.body.scrollWidth,
                            document.documentElement.scrollWidth)),
            height = Math.max(
                        document.documentElement.clientHeight,
                        Math.max(
                            document.body.scrollHeight,
                            document.documentElement.scrollHeight));

        mask.style.width  = width + 'px';
        mask.style.height = height + 'px';
    }

    /**
     * 页面大小发生变化的事件处理器
     *
     * @private
     */
    function getResizeHandler( level ) {
        return function () {
            repaintMask( getMask( level ) );
        };
    }

    /**
     * 获取遮盖层dom元素
     *
     * @private
     * @return {HTMLElement} 获取到的Mask元素节点.
     */
    function getMask( level ) {
        var id = idPrefix + level;
        var mask = baidu.g( id );

        if ( !mask ) {
            init( level );
        }

        return baidu.g( id );
    }
    
    var resizeHandlerMap = {};
    return {
        /**
         * 显示遮盖层
         */
        'show': function( level, type ) {
            level = level || '0';
            var mask = getMask( level ),
                clazz = [];
            
            clazz.push( maskClass );
            clazz.push( maskClass + '-level-' + level );
            if ( type ) {
                clazz.push( maskClass + '-' + type );
            }
            
            repaintMask( mask );

            mask.className = clazz.join( ' ' );
            mask.style.display = 'block';

            var resizeHandler = getResizeHandler( level );
            resizeHandlerMap[ level ] = resizeHandler;
            baidu.on( window, 'resize', resizeHandler );
        },

        /**
         * 隐藏遮盖层
         */
        'hide': function ( level ) {
            level = level || '0';
            var mask = getMask( level );
            if ( 'undefined' != typeof mask ) {
                mask.style.display = 'none';

                var resizeHandler = resizeHandlerMap[ level ];
                baidu.un( window, 'resize', resizeHandler );
            }
        }
    };
})();

/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/Dialog.js
 * desc:    对话框控件
 * author:  zhaolei, erik, linzhifeng
 */

///import esui.Control;
///import esui.Layer;
///import esui.Button;
///import esui.Mask;
///import baidu.lang.inherits;
///import baidu.dom.draggable;
///import baidu.event.on;
///import baidu.event.un;

/**
 * 对话框控件
 * 
 * @param {Object} options 控件初始化参数
 */
esui.Dialog = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'dialog';
    
    // 标识鼠标事件触发自动状态转换
    this._autoState = 0;
    
    esui.Control.call( this, options );

    // 初始化自动定位参数
    this.__initOption('autoPosition', null, 'AUTO_POSITION');
    
    // 初始化可拖拽参数
    this.__initOption('draggable', null, 'DRAGGABLE');

    // 初始化关闭按钮参数
    this.__initOption('closeButton', null, 'CLOSE_BUTTON');
    
    // 初始化宽度
    this.__initOption('width', null, 'WIDTH');

    // 初始化距离顶端的高度
    this.__initOption('top', null, 'TOP');
    this.top = parseInt( this.top, 10 );

    this._resizeHandler = this._getResizeHandler();
};

esui.Dialog.prototype = {
    /**
     * 对话框头部的html模板
     * @private
     */
    _tplHead: '<div id="{0}" class="{1}" onmouseover="{4}" onmouseout="{5}">{2}</div>{3}',
    
    /**
     * 关闭按钮的html模板
     * @private
     */
    _tplClose: '<div ui="type:Button;id:{0};skin:layerclose"></div>',
    
    /**
     * 显示对话框
     * 
     * @public
     */
    show: function () {
        var mask = this.mask;
        var main;
        if ( !this.getLayer() ) {
            this.render();            
        }

        main = this.getLayer().main;

        // 浮动层自动定位功能初始化
        if ( this.autoPosition ) {
            baidu.on( window, 'resize', this._resizeHandler );
        }
        
        this._resizeHandler();     
        
        // 如果mask不是object，则会隐式装箱
        // 装箱后的Object不具有level和type属性
        // 相当于未传参数
        mask && esui.Mask.show( mask.level, mask.type );
        
        this._isShow = true;
    },
    
    /**
     * 隐藏对话框
     * 
     * @public
     */
    hide: function () {
        if ( this._isShow ) {
            if ( this.autoPosition ) {
                baidu.un( window, 'resize', this._resizeHandler );
            }
            
            this.getLayer().hide();
            this.mask && esui.Mask.hide( this.mask.level );
        }

        this._isShow = 0;
    },
    
    /**
     * 获取浮出层控件对象
     * 
     * @public
     * @return {esui.Layer}
     */
    getLayer: function () {
        return this._controlMap.layer;
    },

    /**
     * 设置标题文字
     * 
     * @public
     * @param {string} html 要设置的文字，支持html
     */
    setTitle: function ( html ) {
        var el = baidu.g( this.__getId( 'title' ) );
        if ( el ) {
            el.innerHTML = html;
        }
        this.title = html;
    },

    /**
     * 设置内容
     *
     * @public
     * @param {string} content 要设置的内容，支持html.
     */
    setContent: function ( content ) {
        this.content = content;
        var body = this.getBody();
        body && ( body.innerHTML = content );
    },

    
    /**
     * 获取页面resize的事件handler
     * 
     * @private
     * @return {Function}
     */
    _getResizeHandler: function () {
        var me = this;
            
        return function () {
            var layer   = me.getLayer(),
                main    = layer.main,
                left    = me.left,
                top     = me.top; 
            
            if ( !left ) {
                left = (baidu.page.getViewWidth() - main.offsetWidth) / 2;
            }
            top += baidu.page.getScrollTop();
            
            if ( left < 0 ) {
                left = 0;
            }

            if ( top < 0 ) {
                top = 0;
            }
            
            layer.show( left, top );
        };
    },
    
    /**
     * 获取关闭按钮的点击handler
     *
     * @private
     * @return {Function}
     */
    _getCloseHandler: function () {
        var me = this;
        return function () {
            me.onhide();
            me.hide();
        };
    },
    
    onhide: new Function(),
        
    /**
     * 绘制对话框
     * 
     * @public
     */
    render: function () {
        var me      = this;
        var layer   = me.getLayer();
        var main    = me.main;
        
        // 避免重复创建    
        if ( layer ) {
            return;
        }
        
        layer = esui.util.create( 'Layer', {
                id      : me.__getId( 'layer' ),
                retype  : me._type,
                skin    : me.skin + ( me.draggable ? ' draggable' : '' ),
                width   : me.width,
                main    : main
            } );
        layer.appendTo();
        me._controlMap.layer = layer;
        
        
        // 初始化dialog结构
        me._initStruct();
        
        // 拖拽功能初始化
        if ( this.draggable ) {
            baidu.dom.draggable( layer.main, {handler:this.getHead()} );
        }
    },
    
    /** 
     * dialog只允许在body下。重置appendTo方法
     *
     * @public
     */ 
    appendTo: function () {
        this.render();
    },
    
    /** 
     * 初始化dialog的结构
     *
     * @private
     */
    _initStruct: function () {
        var layer = this.getLayer();
        var main = layer.main;
        var childs = [], childCount;
        var el;

        el = main.firstChild;
        while ( el ) {
            if ( el.nodeType == 1 ) {
                childs.push( el );
            }

            el = el.nextSibling;
        }
        childCount = childs.length;

        this._initHead( childCount < 2, childs[ 0 ] );
        this._initBody( childCount < 1, childs[ 1 ] || childs[ 0 ] );
        this._initFoot( childCount < 3, childs[ 2 ] );
    },

    /** 
     * dialog不需要创建main，方法置空
     *
     * @private
     */
    __createMain: function () {},
    
    /**
     * 初始化dialog的head
     *
     * @private
     * @param {boolean} needCreate 是否需要创建head元素
     * @param {HTMLElement} head 现有的head元素
     */
    _initHead: function ( needCreate, head ) {
        var me      = this;
        var layer   = me.getLayer();
        var main    = layer.main;
        var closeId = me.__getId( 'close' );
        var layerControl, closeBtn;

        if ( needCreate ) {
            head = document.createElement( 'div' );
            main.insertBefore( head, main.firstChild );
        } else {
            this.title = this.title || head.innerHTML;
        }
        
        baidu.addClass( head, this.__getClass( 'head' ) );
        head.id = this.__getId( 'head' );
        head.innerHTML = esui.util.format(
            me._tplHead,
            me.__getId( 'title' ),
            me.__getClass( 'title' ),
            me.title,
            (!me.closeButton  ? '' :
                esui.util.format(
                    me._tplClose,
                    closeId
            ) ),
            me.__getStrCall( '_headOver' ),
            me.__getStrCall( '_headOut' )
        );

        // 初始化关闭按钮
        layerControl = esui.util.init( head );
        closeBtn     = layerControl[ closeId ];
        if ( closeBtn ) {
            layer._controlMap._close = closeBtn;
            closeBtn.onclick = me._getCloseHandler();
        }
    },

    /**
     * 初始化dialog的body
     *
     * @private
     * @param {boolean} needCreate 是否需要创建body元素
     * @param {HTMLElement} body 现有的body元素
     */
    _initBody: function ( needCreate, body ) {
        if ( needCreate ) {
            body = document.createElement( 'div' );
            this.getLayer().main.appendChild( body );
        }
        
        baidu.addClass( body, this.__getClass( 'body' ) );
        body.id = this.__getId( 'body' );

        if ( this.content ) {
            body.innerHTML = this.content;
        } else {
            this.content = body.innerHTML;
        }
    },

    /**
     * 初始化dialog的foot
     *
     * @private
     * @param {boolean} needCreate 是否需要创建foot元素
     * @param {HTMLElement} foot 现有的foot元素
     */
    _initFoot: function ( needCreate, foot ) {
        var layer = this.getLayer();
        var controls;
        var control;
        var i = 0, len;
        var index = 0;

        if ( needCreate ) {
            foot = document.createElement( 'div' );
            layer.main.appendChild( foot );
        }
        
        baidu.addClass( foot, this.__getClass( 'foot' ) );
        foot.id = this.__getId( 'foot' );

        if ( this.footContent ) {
            foot.innerHTML = this.footContent;
        }

        // 初始化foot的按钮
        esui.util.init( foot );
        controls = esui.util.getControlsByContainer( foot );
        this._commandHandler = this._getCommandHandler();
        for ( len = controls.length; i < len; i++ ) {
            control = controls[ i ];
            if ( control instanceof esui.Button ) {
                control.onclick = this._commandHandler;
                control._dialogCmdIndex = index;
                index++;
            }

            layer._controlMap[ control.id ] = control;
        }
    },
    
    /**
     * 获取command handler
     *
     * @private
     * @return {Function} 
     */
    _getCommandHandler: function () {
        var me = this;
        return function () {
            if ( me.oncommand( { index: this._dialogCmdIndex } ) !== false ) {
                me.hide();
            }
        };
    },

    oncommand: new Function(),

    /**
     * 获取对话框主体的dom元素
     * 
     * @public
     * @return {HTMLElement}
     */
    getBody: function () {
        return baidu.g( this.__getId( 'body' ) );
    },
    
    /**
     * 获取对话框头部dom元素
     *
     * @public
     * @return {HTMLElement}
     */
    getHead: function () {
        return baidu.g( this.__getId( 'head' ) );
    },

    /**
     * 获取对话框腿部的dom元素
     * 
     * @public
     * @return {HTMLElement}
     */
    getFoot: function () {
        return baidu.g( this.__getId( 'foot' ) );
    },
    
    /**
     * 鼠标移上表头的handler
     * 
     * @private
     */
    _headOver: function () {
        baidu.addClass(
            this.getHead(), 
            this.__getClass( 'head-hover' ) );
    },
    
    /**
     * 鼠标移出表头的handler
     * 
     * @private
     */
    _headOut: function () {
        baidu.removeClass(
            this.getHead(), 
            this.__getClass( 'head-hover' ) );
    },

    /**
     * 释放控件
     * 
     * @private
     */
    __dispose: function () {
        if ( this.autoPosition ) {
            baidu.un( window, 'resize', this._resizeHandler );
        }
        
        this.oncommand = null;
        this._resizeHandler = null;
        esui.Control.prototype.__dispose.call( this );
    }
};

baidu.inherits( esui.Dialog, esui.Control );

esui.Dialog.TOP             = 100;
esui.Dialog.WIDTH           = 400;
esui.Dialog.CLOSE_BUTTON    = 1;
esui.Dialog.OK_TEXT         = '确定';
esui.Dialog.CANCEL_TEXT     = '取消';

esui.Dialog._increment = function () {
    var i = 0;
    return function () {
        return i++;
    };
}();

/**
 * alert dialog
 */
esui.Dialog.alert = (function () {
    var dialogPrefix = '__DialogAlert';
    var buttonPrefix = '__DialogAlertOk';

    var tpl     = '<div class="ui-dialog-icon ui-dialog-icon-{0}"></div><div class="ui-dialog-text">{1}</div>';
    var footTpl = '<button ui="type:Button;id:{0};skin:em">{1}</button>';

    /**
     * 获取按钮点击的处理函数
     * 
     * @private
     * @param {Function} onok 用户定义的确定按钮点击函数
     * @return {Function}
     */
    function getDialogCommander( onok, id ) {
        return function() {
            var dialog = esui.util.get( dialogPrefix + id );
            var isFunc = ( typeof onok == 'function' );

            if ( ( isFunc && onok( dialog ) !== false ) 
                 || !isFunc
            ) {
                dialog.hide();

                esui.util.dispose( buttonPrefix + id );
                esui.util.dispose( dialog.id );
            }

            return false;
        };
    }
    
    /**
     * 显示alert
     * 
     * @public
     * @param {Object} args alert对话框的参数
     * @config {string} title 显示标题
     * @config {string} content 显示的文字内容
     * @config {Function} onok 点击确定按钮的行为，默认为关闭提示框
     */
    function show ( args ) {
        if ( !args ) {
            return;
        }
        
        var index   = esui.Dialog._increment();
        var title   = args.title || '';
        var content = args.content || '';
        var type    = args.type || 'warning';
        
        var dialog  = esui.util.create('Dialog', 
                          {
                              id            : dialogPrefix + index,
                              closeButton   : 0,
                              title         : '', 
                              width         : 440,
                              mask          : {level: 3 || args.level},
                              footContent   : esui.util.format( footTpl, buttonPrefix + index, esui.Dialog.OK_TEXT )
                          });
        
        dialog.show();
        dialog.oncommand = getDialogCommander( args.onok, index );
        dialog.setTitle( title );
        dialog.getBody().innerHTML = esui.util.format( tpl, type, content );
        return dialog;
    }

    return show;
})();

/**
 * confirm dialog
 */
esui.Dialog.confirm = (function () {
    var dialogPrefix    = '__DialogConfirm';
    var okPrefix        = '__DialogConfirmOk';
    var cancelPrefix    = '__DialogConfirmCancel';

    var tpl = '<div class="ui-dialog-icon ui-dialog-icon-{0}"></div><div class="ui-dialog-text">{1}</div>';
    var footTpl = '<button ui="type:Button;id:{0};skin:em">{1}</button><button ui="type:Button;id:{2};">{3}</button>';

    /**
     * 获取按钮点击的处理函数
     * 
     * @private
     * @param {Function} onok 用户定义的确定按钮点击函数
     * @param {Function} oncancel 用户定义的取消按钮点击函数
     * @return {Function}
     */
    function getDialogCommander( onok, oncancel, id ) {
        return function ( args ) {
            var dialog = esui.util.get( dialogPrefix + id );
            var eventHandler = ( args.index === 0 ? onok : oncancel );
            var isFunc = (typeof eventHandler == 'function');

            if ( (isFunc && eventHandler( dialog ) !== false ) 
                 || !isFunc 
            ) {
                dialog.hide();
                esui.util.dispose( dialog.id );
            }

            return false;
        };
    }
    
    /**
     * 显示confirm
     * 
     * @public
     * @param {Object} args alert对话框的参数
     * @config {string} title 显示标题
     * @config {string} content 显示的文字内容
     * @config {Function} onok 点击确定按钮的行为，默认为关闭提示框
     * @config {Function} oncancel 点击取消按钮的行为，默认为关闭提示框
     */
    function show ( args ) {
        if ( !args ) {
            return;
        }
        
        var index       = esui.Dialog._increment();
        var title       = args.title || '';
        var content     = args.content || '';
        var type        = args.type || 'warning';

        var dialog = esui.util.create('Dialog', 
                          {
                              id            : dialogPrefix + index,
                              closeButton   : 0,
                              title         : '', 
                              width         : 440,
                              mask          : {level: 3 || args.level},
                              footContent   : esui.util.format( footTpl, 
                                                                okPrefix + index, 
                                                                esui.Dialog.OK_TEXT,
                                                                cancelPrefix + index,
                                                                esui.Dialog.CANCEL_TEXT)
                          });

        dialog.show();
        dialog.setTitle( title );
        dialog.getBody().innerHTML = esui.util.format( tpl, type, content );
        dialog.oncommand = getDialogCommander( args.onok, args.oncancel, index );
        return dialog;
    }
    
    return show;
})();
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/FormTab.js
 * desc:    表单Tab控件
 * author:  zhaolei, erik
 */


///import esui.Control;
///import baidu.lang.inherits;

/**
 * 表单Tab控件
 *
 * @constructor
 * @param {object} options 构造的选项.
 */
esui.FormTab = function ( options ) {
    this.disableHidden = 1;

    esui.Control.call( this, options );
    
    this.__initOption( 'autoDisabled', null, 'AUTO_DISABLED' );
    this.tabs = this.datasource || this.tabs || [];
};

esui.FormTab.AUTO_DISABLED = 1;

esui.FormTab.prototype = {
    /**
     * 初始化FormTab
     *
     * @public
     */
    init: function () {
        var me = this;
        this.activeIndex = this.activeIndex || 0;
        if ( !me.isInited ) {
            me._initEvent();
            me.isInited = 1;
        }
        
        setTimeout( function () {
                me.setActiveIndex( me.activeIndex );
            }, 0 );
    },

    render: function () {
        this.init();
    },

    __createMain: function () {
        return null;
    },
    
    /**
     * 初始化FormTab的行为
     *
     * @private
     */
    _initEvent: function () {
        var tabs = this.tabs;
        var len  = tabs.length;
        var i;
        var tab;
        var radio;
        
        for ( i = 0; i < len; i++ ) {
            tab   = tabs[ i ];
            radio = tab.radio;
            if ( radio ) {
                radio = esui.util.get( radio );
                radio && ( radio.onclick = this._getRadioClickHandler( i ) );
            }
        }
    },
    
    _getRadioClickHandler: function ( index ) {
        var me = this;
        return function () {
            return me._select( index );
        };
    },
    
    /**
     * 选择标签
     * 
     * @private
     * @param {number} index 标签序号
     */
    _select: function ( index ) {
        if ( this.onchange( index, this.tabs[ index ] ) !== false ) {
            this.setActiveIndex( index );
            return;
        }

        return false;
    },
    
    /**
     * 选择活动标签
     * 
     * @public
     * @param {number} index 标签序号
     */
    setActiveIndex: function( index ) {
        var tabs = this.tabs;
        var len = tabs.length;

        if ( index >= 0 && index < len ) {
            esui.util.get( tabs[ index ].radio ).setChecked( true );
            this.activeIndex = index;
        }

        this._resetPanel();
    },
    
    onchange: new Function(),
    
    /**
     * 重置tab对应的panel的显示隐藏状态
     * 
     * @private
     */
    _resetPanel: function () {
        var tabs = this.tabs;
        var len  = tabs.length;
        var i;
        var tab;
        var panel;
        var radio;
        var checked;

        for ( i = 0; i < len; i++ ) {
            tab     = tabs[ i ];
            radio   = tab.radio;
            panel   = tab.panel;
            panel   = panel && baidu.g( panel );

            if ( radio && panel ) {
                radio = esui.util.get( radio );
                if ( radio ) {
                    checked = radio.isChecked();

                    this.autoDisabled 
                        && esui.util.setDisabledByContainer( panel, !checked );
                    panel.style.display = checked ? '' : 'none';
                }
            }
        }
    }
};

baidu.inherits( esui.FormTab, esui.Control );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/Label.js
 * desc:    标签显示控件
 * author:  erik, tongyao, yanjunyi
 */

///import esui.Control;
///import baidu.lang.inherits;

/**
 * 标签显示控件
 * 
 * @param {Object} options 控件初始化参数
 */
esui.Label = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'label';

    // 标识鼠标事件触发自动状态转换
    this._autoState = 1;

    esui.Control.call( this, options );
};

esui.Label.prototype = {
    /**
     * 渲染控件
     *
     * @public
     */
    render: function () {
        var me = this;
        
        esui.Control.prototype.render.call( me );
        
        if ( this.text ) {
            this.content = baidu.encodeHTML( this.text );
        }

        this.setContent( this.content );
        this.setTitle( this.title );
    },

    /**
     * 设置显示内容（不经过html编码）
     *
     * @public
     * @param {string} content
     */
    setContent: function ( content ) {
        this.content = content || '';
        this.main.innerHTML = this.content;
    },
    
    /**
     * 设置显示文字（经过html编码）
     *
     * @public
     * @param {string} text
     */
    setText: function ( text ) {
        text = text || '';
        this.setContent( baidu.encodeHTML( text ) );
    },
    
    /**
     * 设置自动提示的title
     *
     * @public
     * @param {string} title
     */
    setTitle: function ( title ) {
        this.title = title || '';
        this.main.setAttribute( 'title', this.title );
    },

    /**
     * 创建控件主元素
     *
     * @protected
     * @return {HTMLElement}
     */
    __createMain: function () {
        return document.createElement( 'span' );
    }
};

baidu.inherits( esui.Label, esui.Control );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/Link.js
 * desc:    链接控件
 * author:  zhaolei, erik
 */


///import esui.Control;
///import baidu.string.encodeHTML;
///import baidu.lang.inherits

/**
 * 链接控件
 * 
 * @class
 * @param {Object} options 控件初始化参数
 */
esui.Link = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'link';

    // 标识鼠标事件触发自动状态转换
    this._autoState = 0;

    esui.Control.call( this, options );
};

esui.Link.prototype = {
    /**
     * 渲染控件
     * 
     * @public
     * @param {Object} main 控件挂载的DOM
     */
    render: function () {
        var me = this;
        esui.Control.prototype.render.call( me );
        
        // 设置各种属性
        me.href    && me.setHref( me.href );
        me.text    && me.setText( me.text );
        me.content && me.setContent( me.content );
        me.target  && me.setTarget( me.target );
        
        // 绑定点击事件处理
        if ( !me._clickHandler ) {
            me._clickHandler = me._getClickHandler();
            me.main.onclick = me._clickHandler;
        }
    },

    /**
     * 设置链接地址
     *
     * @public
     * @param {string} href 链接地址
     */
    setHref: function ( href ) {
        !href && ( href = '' );
        this.main.href = href;
    },

    /**
     * 设置链接显示文字。经过html encode
     *
     * @public
     * @param {string} text 显示文字
     */
    setText: function ( text ) {
        !text && ( text = '' );
        this.setContent( baidu.encodeHTML( text ) );
    },
    
    /**
     * 设置链接显示内容。不经过html encode
     *
     * @public
     * @param {string} content 链接显示内容
     */
    setContent: function ( content ) {
        !content && ( content = '' );
        this.main.innerHTML = content;
    },

    /**
     * 设置链接target
     *
     * @public
     * @param {string} target 链接target
     */
    setTarget: function ( target ) {
        !target && ( target = '' );
        this.main.target = target;
    },
    
    onclick: new Function(),
    
    /**
     * 生成控件主元素
     *
     * @protected
     * @return {HTMLElement}
     */
    __createMain: function () {
        return document.createElement( 'a' );
    },

    /**
     * 获取点击的handler
     * 
     * @private
     * @return {Function}
     */
    _getClickHandler: function() {
        var me = this;
        return function ( e ) {
            return me.onclick( e );
        };
    },
    
    /**
     * 销毁控件
     * 
     * @private
     */
    __dispose: function () {
        this._clickHandler = null;
        esui.Control.prototype.__dispose.call( this );
    }
};

baidu.inherits( esui.Link, esui.Control );

/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/MiniMultiCalendar.js
 * desc:    小型多日期选择器
 * author:  zhaolei, erik
 */

///import esui.InputControl;
///import baidu.lang.inherits;
///import baidu.date.format;
///import baidu.date.parse;

/**
 * 多日期选择器
 * 
 * @param {Object} options 控件初始化参数
 */
esui.MiniMultiCalendar = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'mmcal';

    // 标识鼠标事件触发自动状态转换
    this._autoState = 0;
    
    esui.InputControl.call( this, options );
    
    // 声明当前格式
    this.now = this.now || esui.config.NOW || new Date();

    // 声明shortcut选项组
    this.__initOption( 'options', null, 'OPTIONS' );

    // 声明日期格式
    this.__initOption( 'valueFormat', null, 'VALUE_FORMAT' );

    // 初始化value与valueAsObject
    var valueAsObject, valueSplits;
    if ( this.value ) {
        valueSplits = this.value.split( ',' ); 
        if ( valueSplits.length == 2 ) {
            valueAsObject = {
                begin   : baidu.date.parse( valueSplits[ 0 ] ),
                end     : baidu.date.parse( valueSplits[ 1 ] )
            };
        }
    }

    if ( valueAsObject ) {
        this.valueAsObject = valueAsObject;
    } else {
        this.valueAsObject = this.valueAsObject || {
            begin   : new Date( this.now ),
            end     : new Date( this.now )
        };
    }
};

esui.MiniMultiCalendar.VALUE_FORMAT = 'yyyy-MM-dd';

esui.MiniMultiCalendar.prototype = {
    /**
     * 获取当前选取的日期（字符串类型）
     * 
     * @public
     * @return {string}
     */
    getValue: function () {
        var valueAsObj  = this.valueAsObject;
        var format      = this.valueFormat;
        var begin, end;

        if ( valueAsObj
             && ( begin = valueAsObj.begin )
             && ( end = valueAsObj.end )
        ) {
            return baidu.date.format( begin, format )
                    + ','
                    + baidu.date.format( end, format );
        }

        return '';
    },
    
    /**
     * 设置当前选取的日期（字符串类型）
     * 
     * @public
     * @param {string} value
     */
    setValue: function ( value ) {
        value = value.split( ',' );
        if ( value.length == 2 ) {
            var begin = baidu.date.parse( value[ 0 ] );
            var end = baidu.date.parse( value[ 1 ] );

            if ( begin && end ) {
                this.setValueAsObject( {
                    begin   : begin,
                    end     : end
                } );
            }
        }
    },
    
    /**
     * 获取当前选取的日期（{begin:Date,end:Date}类型）
     * 
     * @public
     * @return {Object}
     */
    getValueAsObject: function () {
        return this.valueAsObject || null;
    },

    /**
     * 选取日期区间
     * 
     * @public
     * @param {Object} value 日期区间对象
     */
    setValueAsObject: function ( valueAsObject ) {
        this.selectedIndex = null;
        this.valueAsObject = valueAsObject;
        this.render();
    },

    /**
     * 绘制控件
     * 
     * @public
     */
    render: function () {
        esui.InputControl.prototype.render.call( this );
        this.main.innerHTML = this._getHtml();
    },
    
    /**
     * 快捷项的模板
     * @private
     */
     _tplItem: '<span index="{0}" class="{1}" id="{2}"{4}>{3}</span>',

    /**
     * 比较两个日期是否同一天
     * 
     * @private
     * @param {Date} date1 日期
     * @param {Date} date2 日期
     * @return {boolean}
     */
    _isSameDate: function ( date1, date2 ) {
        if ( date2 != "" && date1 != "" ) {
            if ( date1.getFullYear() == date2.getFullYear()
                 && date1.getMonth() == date2.getMonth()
                 && date1.getDate() == date2.getDate()
            ) {
                return true;
            }
        }

        return false;
    },

    /**
     * 获取控件的html
     * 
     * @private
     * @return {string}
     */
    _getHtml: function () {
        var me          = this,
            value       = me.valueAsObject,
            opList      = me.options,
            len         = opList.length, 
            idPrefix    = me.__getId( 'option' ),
            i, 
            opValue, 
            option,
            clazz, callStr,
            html = [];

           me._currentName = '';
        if ( esui.util.hasValue( me.selectedIndex ) ) {
            me._currentName = opList[ me.selectedIndex ].name;
        } else {
            for ( i = 0; i < len; i++ ) {
                option = opList[ i ];
                opValue = option.getValue.call( me );

                if ( me._isSameDate( value.begin, opValue.begin )
                     && me._isSameDate( value.end, opValue.end )
                ) {
                    me.selectedIndex = i;
                    me._currentName = option.name;
                    break;
                }
            }
        }
        
        for ( i = 0; i < len; i++ ) {
            option  = opList[i];
            opValue = option.getValue.call( me );
            clazz   = me.__getClass( 'option' );
            callStr = ' onclick="' + me.__getStrCall( "_selectByIndex", i ) + '"';
            
            if ( i == me.selectedIndex ) {
                clazz = clazz + ' ' + me.__getClass( 'option-selected' );
                callStr = '';
            }
            
            html.push(
                esui.util.format(
                    me._tplItem,
                    i,
                    clazz,
                    idPrefix + i,
                    option.name,
                    callStr
                )
            );
        }

        return html.join( '&nbsp;|&nbsp;' );
    },

    onchange: new Function(),
    
    /**
     * 根据索引选取日期
     * 
     * @private
     * @param {number} index 
     */
    _selectByIndex: function ( index ) {
        var opList = this.options,
            item,
            value;

        if ( index < 0 || index >= opList.length ) {
            return;
        }
        
        item = opList[ index ];
        value = item.getValue.call( this );
        
        if ( this.onchange( value, item.name, index ) !== false ) {
            this.setSelectedIndex( index );
        }
    },
    
    /**
     * 按快捷项index选取日期区间
     * 
     * @public
     * @param {number} index 快捷项index
     */
    setSelectedIndex: function ( index ) {
        var opList = this.options, 
            item = opList[ index ];

        if ( index < 0 || index >= opList.length ) {
            return;
        }

        this.selectedIndex = index;
        this.value = item.getValue.call( this );
        this.render();
    },
    
    /**
     * 获取快捷方式的名称
     * 
     * @public
     * @param {Object} opt_value 日期区间值
     * @return {string}
     */
    getName: function ( opt_value ) {
        if ( opt_value ) {
            var items = this.options;
            var i, item, value;
            var len = items.length;

            for ( i = 0; i < len; i++ ) {
                item = items[ i ];
                value = item.getValue.call( this );

                if ( this._isSameDate( value.begin, opt_value.begin )
                     && this._isSameDate( value.end, opt_value.end )
                ) {
                    return item.name;
                }
            }

            return '';
        }

        return this._currentName;
    }
};

/**
 * 日期区间选项列表配置
 */
esui.MiniMultiCalendar.OPTIONS = [
    {
        name: '昨天',
        value: 0,
        getValue: function () {
            var yesterday = new Date( this.now.getTime() );
            yesterday.setDate( yesterday.getDate() - 1 );
            
            return {
                begin   : yesterday,
                end     : yesterday
            };
        }
    },
    {
        name: '最近7天',
        value: 1,
        getValue: function () {
            var begin   = new Date( this.now.getTime() ),
                end     = new Date( this.now.getTime() );
            
            end.setDate( end.getDate() - 1 );
            begin.setDate( begin.getDate() - 7 );
            
            return {
                begin   : begin,
                end     : end
            };
        }
    },
    {
        name: '上周',
        value: 2,
        getValue: function () {
            var now     = this.now,
                begin   = new Date( this.now.getTime() ),
                end     = new Date( this.now.getTime() ),
                _wd     = 1; //周一为第一天;
            
            if ( begin.getDay() < _wd % 7 ) {
                begin.setDate( begin.getDate() - 14 + _wd - begin.getDay() );
            } else {
                begin.setDate( begin.getDate() - 7 - begin.getDay() + _wd % 7 );
            }
            begin.setHours( 0, 0, 0, 0 );
            end.setFullYear( begin.getFullYear(), begin.getMonth(), begin.getDate() + 6 );
            end.setHours( 0, 0, 0, 0 );
            
            return {
                begin   : begin,
                end     : end
            };
        }
    },
    {
        name: '本月',
        value: 3,
        getValue: function () {
            var now     = this.now,
                begin   = new Date(this.now.getTime()),
                end     = new Date(this.now.getTime());
            begin.setDate( 1 );
            
            return {
                begin   : begin,
                end     : end
            };
        }
    },
    {
        name: '上个月',
        value: 4,
        getValue: function () {
            var now     = this.now,
                begin   = new Date( now.getFullYear(), now.getMonth() - 1, 1 ),
                end     = new Date( now.getFullYear(), now.getMonth(), 1 );

            end.setDate( end.getDate() - 1 );
            
            return {
                begin   : begin,
                end     : end
            };
        }
    },
    {
        name: '上个季度',
        value: 5,
        getValue: function () {
            var now     = this.now,
                begin   = new Date( now.getFullYear(), now.getMonth() - now.getMonth()%3 - 3, 1 ),
                end     = new Date( now.getFullYear(), now.getMonth() - now.getMonth()%3, 1 );

            end.setDate( end.getDate() - 1 );
            
            return {
                begin   :   begin,
                end     :   end
            };
        }
    }
];

baidu.inherits( esui.MiniMultiCalendar, esui.InputControl );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/MultiCalendar.js
 * desc:    多日期选择器
 * author:  erik, zhaolei
 */

///import esui.InputControl;
///import esui.Layer;
///import esui.MonthView;
///import esui.Select;
///import esui.Button;
///import esui.MiniMultiCalendar;
///import baidu.lang.inherits;
///import baidu.date.format;
///import baidu.date.parse;

/**
 * 多日期选择器
 * 
 * @param {Object} options 控件初始化参数
 */
esui.MultiCalendar = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'mcal';

    // 标识鼠标事件触发自动状态转换
    this._autoState = 1;
    
    esui.InputControl.call( this, options );

    // 声明日期格式
    this.__initOption( 'dateFormat', null, 'DATE_FORMAT' );
    this.__initOption( 'valueFormat', null, 'VALUE_FORMAT' );
    
    // 声明按钮文字
    this.__initOption( 'okText', null, 'OK_TEXT' );
    this.__initOption( 'cancelText', null, 'CANCEL_TEXT' );

    // 声明浮动层侧边的说明
    this.__initOption( 'beginSideTitle', null, 'BEGIN_SIDE_TITLE' );
    this.__initOption( 'endSideTitle', null, 'END_SIDE_TITLE' );

    // 初始化当前日期
    this.now = this.now || esui.config.NOW || new Date();
    var now = this.now;
    
    // 初始化value与valueAsObject
    var valueAsObject, valueSplits;
    if ( this.value ) {
        valueSplits = this.value.split( ',' ); 
        if ( valueSplits.length == 2 ) {
            valueAsObject = {
                begin   : baidu.date.parse( valueSplits[ 0 ] ),
                end     : baidu.date.parse( valueSplits[ 1 ] )
            };
        }
    }

    if ( valueAsObject ) {
        this.valueAsObject = valueAsObject;
    } else {
        this.valueAsObject = this.valueAsObject || {
            begin   : new Date( now ),
            end     : new Date( now )
        };
    }
    
    // 初始化可选择的日期
    this.__initOption( 'range', null, 'RANGE' );

    // 初始化显示的日期
    this.view = {
        begin   : new Date( this.valueAsObject.begin ),
        end     : new Date( this.valueAsObject.end )
    };
};

esui.MultiCalendar.OK_TEXT          = '确定';
esui.MultiCalendar.CANCEL_TEXT      = '取消';
esui.MultiCalendar.BEGIN_SIDE_TITLE = '开始日期'
esui.MultiCalendar.END_SIDE_TITLE   = '结束日期';
esui.MultiCalendar.DATE_FORMAT      = 'yyyy-MM-dd';
esui.MultiCalendar.VALUE_FORMAT     = 'yyyy-MM-dd';
esui.MultiCalendar.RANGE = {
    begin: new Date(2001, 8, 3),
    end: new Date(2046, 10, 4)
};

esui.MultiCalendar.prototype = {
    /**
     * 绘制控件
     * 
     * @public
     */
    render: function () {
        var me = this;
        var main = this.main;
        
        if ( !me._isRendered ) {
            esui.InputControl.prototype.render.call( me );

            main.innerHTML = me._getMainHtml();
            main.onclick = me._getMainClickHandler();
            me._renderLayer();
            me._isRendered = 1;
        }

        me.setValueAsObject( me.valueAsObject );
    },
    
    
    /**
     * 获取当前选取的日期（{begin:Date,end:Date}类型）
     * 
     * @public
     * @return {Object}
     */
    getValueAsObject: function () {
        return this.valueAsObject || null;
    },

    /**
     * 获取当前选取的日期（字符串类型）
     * 
     * @public
     * @return {string}
     */
    getValue: function () {
        var valueAsObj  = this.valueAsObject;
        var format      = this.valueFormat;
        var begin, end;

        if ( valueAsObj
             && ( begin = valueAsObj.begin )
             && ( end = valueAsObj.end )
        ) {
            return baidu.date.format( begin, format )
                    + ','
                    + baidu.date.format( end, format );
        }

        return '';
    },
    
    /**
     * 设置当前选取的日期
     * 
     * @public
     * @param {Object} obj 日期区间（{begin:Date,end:Date}类型）
     */
    setValueAsObject: function ( obj ) {
        if ( obj && obj.begin && obj.end ) {
            this.valueAsObject = obj;
            this._controlMap.shortcut.setValueAsObject( obj );
            this._repaintMain( obj );
        }
    },
    
    /**
     * 设置当前选取的日期（字符串类型）
     * 
     * @public
     * @param {string} value
     */
    setValue: function ( value ) {
        value = value.split( ',' );
        if ( value.length == 2 ) {
            var begin = baidu.date.parse( value[ 0 ] );
            var end = baidu.date.parse( value[ 1 ] );

            if ( begin && end ) {
                this.setValueAsObject( {
                    begin   : begin,
                    end     : end
                } );
            }
        }
    },

    /**
     * 主显示区域的模板
     * @private
     */
    _tplMain: '<span id="{3}" class="{4}" style="display:none"></span><span id="{0}" class="{1}"></span><div class="{2}" arrow="1"></div>',

    /**
     * 浮动层html模板
     * @private
     */
    _tplLayer: '<div ui="id:{0};type:MiniMultiCalendar"></div>'
                + '<div class="{1}">{5}{6}</div>'
                + '<div class="{2}"><div ui="type:Button;id:{3};skin:em">{7}</div><div ui="type:Button;id:{4}">{8}</div></div>'
                + '<div ui="type:Button;id:{9};skin:layerclose"></div>',
    
    /**
     * 浮动层单侧html模板
     * @private
     */
    _tplSide: '<div class="{0}">'
                + '<div class="{1}"><b>{9}</b><span id="{2}"></span></div>'
                + '<div class="{4}"><table><tr>'
                    + '<td width="40" align="left"><div ui="type:Button;id:{5};skin:back"></div></td>'
                    + '<td><div ui="type:Select;id:{7};width:55"</td>'
                    + '<td><div ui="type:Select;id:{8};width:40"</td>'
                    + '<td width="40" align="right"><div ui="type:Button;id:{6};skin:forward"></div></td>'
                + '</tr></table></div><div ui="id:{3};type:MonthView"></div></div>',
    
    

    /**
     * 获取主区域点击的事件handler
     * 
     * @private
     * @return {Function}
     */
    _getMainClickHandler: function () {
        var me = this;

        return function ( e ) {
            if ( !me.isDisabled() ) {
                me.getLayer()._preventHide();
                me.toggleLayer();
            }
        };
    },

    /**
     * 获取取消按钮的点击handler
     * 
     * @private
     * @return {Function}
     */
    _getCancelHandler: function () {
        var me = this;
        return function () {
            me.hideLayer();
        };
    },
    
    /**
     * 获取确定按钮的点击handler
     * 
     * @private
     * @return {Function}
     */
    _getOkHandler: function () {
        var me = this,
            parse = baidu.date.parse;
            
        function getValue( type ) {
            return me._controlMap[ type + 'monthview' ].getValueAsDate();
        }
        
        return function () {
            var begin  = getValue( 'begin' ),
                end    = getValue( 'end' ),
                dvalue = end - begin, 
                valueAsObject;

            if ( dvalue > 0 ) {
                valueAsObject = {
                    'begin': begin,
                    'end': end
                };
            } else {
                valueAsObject = {
                    'begin': end,
                    'end': begin
                };
            }
            
            if ( me.onchange( valueAsObject, me.getShortcutText( valueAsObject ) ) !== false ) {
                me.valueAsObject = valueAsObject;

                me._controlMap.shortcut.setValueAsObject( valueAsObject );
                me._repaintMain( valueAsObject );
                me.hideLayer();
            }
        };
    },
    
    onchange: new Function(),
    
    /**
     * 获取日历选择的自定义样式生成器
     * 
     * @private
     * @return {Function}
     */
    _getMVCustomClass: function () {
        var me = this;
        return function ( date ) {
            if ( !me._isInRange( date ) ) {
                return this.__getClass( 'item-out' );
            }

            return '';
        };
    },

    /**
     * 获取日历选择的事件handler
     * 
     * @private
     * @return {Function}
     */
    _getCalChangeHandler: function ( type ) {
        var me = this;

        return function ( date ) {
            if ( !me._isInRange( date ) ) {
                return false;
            }

            me.tempValue[ type ] = date;
            var title = baidu.g( me.__getId( type + 'title' ) );
            title.innerHTML = baidu.date.format( date, me.dateFormat );
        };
    },
    
    /**
     * 判断日期是否属于允许的区间中
     * 
     * @private
     * @param {Date} date
     * @return {boolean}
     */
    _isInRange: function ( date ) {
        var begin = this.range.begin;
        var end   = this.range.end;

        if ( ( begin && date - begin < 0 ) 
             || ( end && end - date < 0 )
        ) {
            return false;
        }

        return true;
    },

    /**
     * 重新绘制main区域
     * 
     * @private
     */
    _repaintMain: function ( valueAsObject, shortcutText ) {
        var scText = shortcutText || this.getShortcutText( valueAsObject );
        var scEl   = baidu.g( this.__getId( 'shortcuttext' ) );

        baidu.g( this.__getId( 'text' ) ).innerHTML = this.getValueText( valueAsObject );
        scText && ( scEl.innerHTML = scText );
        scEl.style.display = scText ? '' : 'none';
    },
    
    /**
     * 重新绘制浮动层侧边栏的显示内容
     * 
     * @private
     * @param {string} type 侧边栏类型，begin|end
     */
    _repaintSide: function ( type ) {
        var me          = this,
            range       = me.range,
            view        = me.view[ type ],
            year        = view.getFullYear(),
            month       = view.getMonth(),
            valueAsDate = me.tempValue[ type ],
            cal         = me._controlMap[ type + 'monthview' ],
            monthSelect = me._controlMap[ type + 'month' ],
            rangeBegin  = range.begin.getFullYear() * 12 + range.begin.getMonth(),
            rangeEnd    = range.end.getFullYear() * 12 + range.end.getMonth(),
            viewMonth   = view.getFullYear() * 12 + view.getMonth(),
            titleEl     = baidu.g( me.__getId( type + 'title' ) );
        
        monthSelect.datasource = me._getMonthOptions( year );
        monthSelect.render();
        if ( rangeBegin - viewMonth > 0 ) {
            month += ( rangeBegin - viewMonth );
        } else if ( viewMonth - rangeEnd > 0 ) {
            month -= ( viewMonth - rangeEnd );
        }
        monthSelect.setValue( month );
        view.setMonth( month );

        me._controlMap[ type + 'year' ].setValue( year );
        me._controlMap[ type + 'prevmonth' ].setDisabled( ( rangeBegin >= viewMonth ) );
        me._controlMap[ type + 'nextmonth' ].setDisabled( ( rangeEnd <= viewMonth ) );
        
        titleEl.innerHTML = baidu.date.format( valueAsDate, me.dateFormat );

        // 绘制日历部件
        cal.setValueAsDate( valueAsDate );
        cal.setView( view );
    },

    /**
     * 获取控件的html
     * 
     * @private
     * @return {string}
     */
    _getMainHtml: function () {
        var me      = this,
            show    = 'text',
            showsc  = 'shortcuttext';

        return esui.util.format(
            me._tplMain,
            me.__getId( show ),
            me.__getClass( show ),
            me.__getClass( 'arrow' ),
            me.__getId( showsc ),
            me.__getClass( showsc )
        );
    },

    /**
     * 获取浮动层侧边栏的html
     * 
     * @private
     * @param {string} type 侧边栏类型,begin|end
     * @return {string}
     */
    _getLayerSideHtml: function ( type ) {
        var me = this;

        return esui.util.format(
            me._tplSide, 
            me.__getClass( type ),
            me.__getClass( 'side-title' ),
            me.__getId( type + 'title' ),
            me.__getId( type + 'monthview' ),
            me.__getClass( 'side-func' ),
            me.__getId( type + 'prevmonth' ),
            me.__getId( type + 'nextmonth' ),
            me.__getId( type + 'year' ),
            me.__getId( type + 'month' ),
            me[ type + 'SideTitle' ]
        );
    },

    /**
     * 绘制浮动层
     * 
     * @private
     */
    _renderLayer: function () {
        var me = this,
            layerId = me.__getId( 'layer' ),
            layer = esui.util.create( 'Layer' , 
                {
                    id       : layerId,
                    autoHide : 'click',
                    retype   : me._type,
                    partName : 'layer',
                    skin     : me.skin
                } );
        
        me._controlMap.layer = layer;
        layer.appendTo();
        layer.onhide = me._getLayerHideHandler();
        layer.main.innerHTML = esui.util.format(
            me._tplLayer,
            me.__getId( 'shortcut' ),
            me.__getClass( 'body' ),
            me.__getClass( 'foot' ),
            me.__getId( 'ok' ),
            me.__getId( 'cancel' ),
            me._getLayerSideHtml( 'begin' ),
            me._getLayerSideHtml( 'end' ),
            me.okText,
            me.cancelText,
            me.__getId( 'close' ) 
        );

        me._initLayerUI();
    },
    
    /**
     * 获取浮动层关闭的handler
     * 
     * @private
     * @return {Function}
     */
    _getLayerHideHandler: function () {
        var me = this;
        return function () {
            me.removeState( 'active' );
        };
    },
    
    /**
     * 初始化浮动层的ui子控件
     * 
     * @private
     */
    _initLayerUI: function () {
        // 绘制子控件
        var layer       = this.getLayer(),
            ok          = this.__getId('ok'),
            cancel      = this.__getId('cancel'),
            close       = this.__getId('close'),
            beginM      = this.__getId('beginmonth'),
            endM        = this.__getId('endmonth'),
            beginY      = this.__getId('beginyear'),
            endY        = this.__getId('endyear'),
            beginPM     = this.__getId('beginprevmonth'),
            endPM       = this.__getId('endprevmonth'), 
            beginNM     = this.__getId('beginnextmonth'), 
            endNM       = this.__getId('endnextmonth'),
            beginMV     = this.__getId('beginmonthview'),
            endMV       = this.__getId('endmonthview'),
            shortcut    = this.__getId('shortcut'),
            uiProp      = {},
            view        = this.view,
            beginView   = view.begin,
            endView     = view.end,
            beginYear   = beginView.getFullYear(),
            endYear     = endView.getFullYear(),
            beginMonth  = beginView.getMonth(),
            endMonth    = endView.getMonth(),
            yearDs      = this._getYearOptions(),
            mvCustomClz = this._getMVCustomClass(),
            valueAsObj  = this.valueAsObject,
            controlMap;
        
        // 构造附加属性
        uiProp[beginMV] = {valueAsDate:valueAsObj.begin, customClass:mvCustomClz};
        uiProp[endMV]   = {valueAsDate:valueAsObj.end, customClass:mvCustomClz};
        uiProp[beginM]  = {datasource:this._getMonthOptions(beginYear),value:beginMonth};
        uiProp[endM]    = {datasource:this._getMonthOptions(endYear),value:endMonth};
        uiProp[beginY]  = {datasource:yearDs,value:beginYear};
        uiProp[endY]    = {datasource:yearDs,value:endYear};
        uiProp[shortcut]= {options: this.shortcutOptions, valueAsObject: valueAsObj};

        // 初始化控件
        controlMap  = esui.util.init( layer.main, uiProp );
        ok      = controlMap[ok];
        cancel  = controlMap[cancel];
        close   = controlMap[close];
        beginM  = controlMap[beginM];
        endM    = controlMap[endM];
        beginY  = controlMap[beginY];
        endY    = controlMap[endY];
        beginPM = controlMap[beginPM];
        endPM   = controlMap[endPM];
        beginNM = controlMap[beginNM];
        endNM   = controlMap[endNM];
        beginMV = controlMap[beginMV];
        endMV   = controlMap[endMV];
        shortcut = controlMap[shortcut];

        this._controlMap['ok']              = ok;
        this._controlMap['cancel']          = cancel;
        this._controlMap['close']           = close;
        this._controlMap['beginmonthview']  = beginMV;
        this._controlMap['endmonthview']    = endMV;
        this._controlMap['beginmonth']      = beginM;
        this._controlMap['endmonth']        = endM;
        this._controlMap['beginyear']       = beginY;
        this._controlMap['endyear']         = endY;
        this._controlMap['beginprevmonth']  = beginPM;
        this._controlMap['endprevmonth']    = endPM;
        this._controlMap['beginnextmonth']  = beginNM;
        this._controlMap['endnextmonth']    = endNM;
        this._controlMap['shortcut']        = shortcut;

        ok.onclick = this._getOkHandler();
        close.onclick = cancel.onclick = this._getCancelHandler();
        beginY.onchange = this._getYearChangeHandler('begin');
        endY.onchange   = this._getYearChangeHandler('end');
        beginM.onchange = this._getMonthChangeHandler('begin');
        endM.onchange   = this._getMonthChangeHandler('end');
        beginPM.onclick = this._getPrevMonthHandler('begin');
        endPM.onclick   = this._getPrevMonthHandler('end');
        beginNM.onclick = this._getNextMonthHandler('begin');
        endNM.onclick   = this._getNextMonthHandler('end');
        beginMV.onchange = this._getCalChangeHandler('begin');
        endMV.onchange = this._getCalChangeHandler('end');
        shortcut.onchange = this._getShortcutChangeHandler();
    },
    
    /**
     * 获取选择快捷选项的handler
     * 
     * @private
     * @return {Function}
     */
    _getShortcutChangeHandler: function () {
        var me = this;

        return function ( valueAsObject, shortcutText ) {
            if ( me.onchange( valueAsObject, shortcutText ) !== false ) {
                me.valueAsObject = valueAsObject;
                me._repaintMain( valueAsObject, shortcutText );
                me.hideLayer();
            }
        };
    },
    
    /**
     * 获取年份切换的handler
     * 
     * @private
     * @return {Function}
     */
    _getYearChangeHandler: function ( type ) {
        var me = this;

        return function ( year ) {
            var view = me.view[ type ],
                month = view.getMonth();

            me._repaintMonthView( type, year, month );
            me.getLayer()._preventHide();
        };
    },
    
    /**
     * 获取月份切换的handler
     * 
     * @private
     * @return {Function}
     */
    _getMonthChangeHandler: function ( type ) {
        var me = this;

        return function ( month ) {
            var view = me.view[ type ],
                year = view.getFullYear();

            me._repaintMonthView( type, year, month );
            me.getLayer()._preventHide();
        };
    },
    
    /**
     * 获取月份前进按钮的handler
     * 
     * @private
     * @return {Function}
     */
    _getPrevMonthHandler: function ( type ) {
        var me = this;

        return function () {
            var view = me.view[ type ];
            
            
//            view.setMonth( view.getMonth() - 1 )
            me._repaintMonthView( type, view.getFullYear(), view.getMonth() -1 );
        };
    },
    
    /**
     * 获取月份后退按钮的handler
     * 
     * @private
     * @return {Function}
     */
    _getNextMonthHandler: function ( type ) {
        var me = this;

        return function () {
            var view = me.view[ type ];
            
//            view.setMonth(view.getMonth() + 1)
            me._repaintMonthView( type, view.getFullYear(), view.getMonth() + 1 );
        };
    },

    /**
     * 获取可选择的年列表
     * 
     * @private
     * @return {Array}
     */
    _getYearOptions: function () {
        var range   = this.range,
            ds      = [],
            i       = range.begin.getFullYear(),
            end     = range.end.getFullYear();

        for ( ; i <= end; i++) {
            ds.push( {name: i, value:i} );
        }

        return ds;
    },

    /**
     * 获取可选择的月列表
     * 
     * @private
     * @param {number} year 选中的年
     * @return {Array}
     */
    _getMonthOptions: function ( year ) {
        var range   = this.range,
            ds      = [],
            i       = 0,
            len     = 11;
        
        if ( year == range.begin.getFullYear() ) {
            i = range.begin.getMonth();
        } 
        
        if ( year == range.end.getFullYear() ) {
            len = range.end.getMonth();
        }

        for ( ; i <= len; i++ ) {
            ds.push( {
                name: (i + 1), 
                value:i
            } );
        }

        return ds;
    },
    
    /**
     * 重新绘制日期显示
     * 
     * @private
     * @param {string} type 侧边栏类型,begin|end
     * @param {number} year 年份
     * @param {number} month 月份
     */
    _repaintMonthView: function ( type, year, month ) {
        this.view[ type ] = new Date( year, month, 1 );
        this._repaintSide( type );
    },
    
    /**
     * 显示|隐藏 浮动层
     * 
     * @public
     */
    toggleLayer: function () {
        var me = this;
        if ( this.getLayer().isShow() ) {
            me.hideLayer();
        } else {
            me.showLayer();
        }
    },
    
    /**
     * 隐藏浮动层
     * 
     * @public
     */
    hideLayer: function () {
        this.getLayer().hide();
        this.removeState( 'active' );
    },
    
    /**
     * 显示浮动层
     * 
     * @public
     */
    showLayer: function () {
        var me = this,
            main        = me.main,
            pos         = baidu.dom.getPosition( main ),
            pageWidth   = baidu.page.getWidth(),
            layer       = me.getLayer(),
            layerWidth  = layer.main.offsetWidth,
            value       = me.valueAsObject,
            layerTop    = pos.top + main.offsetHeight - 1,
            layerLeft;

        // 创建临时日期存储变量
        me.tempValue = {
            'begin' : new Date( value.begin ),
            'end'   : new Date( value.end )
        };
        
        // 更新浮动层显示的日期
        me.view = {
            'begin' : new Date( value.begin ),
            'end'   : new Date( value.end )
        };
        
        me._repaintLayer();

        if ( pageWidth < ( pos.left + layerWidth ) ) {
            layerLeft = pos.left + main.offsetWidth - layerWidth;
        } else {
            layerLeft = pos.left;
        }
        layer.show( layerLeft, layerTop );
        this.addState( 'active' );
    },
    
    /**
     * 获取浮动层元素
     * 
     * @public
     * @return {HTMLElement}
     */
    getLayer: function () {
        return this._controlMap.layer;
    },

    /**
     * 重新绘制layer
     * 
     * @private
     */
    _repaintLayer: function () {  
        //this._controlMap['shortcut'].select(this.value);
        this._repaintSide( 'begin' );
        this._repaintSide( 'end' );
    },

    /**
     * 获取当前日期区间的显示字符
     * 
     * @public
     * @param {Object} opt_valueAsObject 日期区间
     * @return {string}
     */
    getValueText: function ( opt_valueAsObject ) {
        var valueAsObj  = opt_valueAsObject || this.getValueAsObject();
        var begin       = valueAsObj.begin;
        var end         = valueAsObj.end;
        var format      = this.dateFormat;
        var formatter   = baidu.date.format;
        var shortcut    = this._controlMap[ 'shortcut' ];
            
        if ( begin && end ) {
            return formatter( begin, format ) 
                    + " 至 " 
                    + formatter( end, format );
        }
        
        return '';
    },
    
    /**
     * 获取当前日期区间的快捷显示字符
     * 
     * @public
     * @param {Object} opt_valueAsObject 日期区间
     * @return {string}
     */
    getShortcutText: function ( opt_valueAsObject ) {
        var valueAsObject   = opt_valueAsObject || this.getValue();
        var shortcut        = this._controlMap.shortcut;

        if ( valueAsObject.begin && valueAsObject.end ) {
            return shortcut.getName( opt_valueAsObject ? valueAsObject : null );
        }
        
        return '';
    },
    
    /**
     * 释放控件
     * 
     * @protected
     */
    __dispose: function () {
        this.onchange = null;
        esui.InputControl.prototype.__dispose.call( this );
    }
};


baidu.inherits( esui.MultiCalendar, esui.InputControl );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/Pager.js
 * desc:    分页控件
 * author:  zhaolei, erik, yanjunyi
 */


///import esui.Control;
///import baidu.lang.inherits;

/**
 * @class ui.Pager
 * 页码组件
 */

/**
 * 构造函数
 * 
 * @param {Object} options 控件初始化参数
 */
esui.Pager = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'pager';
    
    // 标识鼠标事件触发自动状态转换
    this._autoState = 0;

    esui.Control.call( this, options );
    
    // Add by junyi @2011-01-24
    // 起始页码数字，即传给后端计算当前页码的偏移量，大多数系统第一页数据的页码索引为0，少数系统为1，即可在此配置，默认：0。
    this.startNumber = parseInt(this.startNumber, 10) || 0;
    
    this.__initOption('prevText', null, 'PREV_TEXT');
    this.__initOption('nextText', null, 'NEXT_TEXT');
    this.__initOption('omitText', null, 'OMIT_TEXT');
    
    this.showCount = parseInt(this.showCount, 10) || esui.Pager.SHOW_COUNT;
};

esui.Pager.SHOW_COUNT = 5;
esui.Pager.OMIT_TEXT  = '…';
esui.Pager.NEXT_TEXT  = '<span class="ui-pager-pntext">下一页</span><span class="ui-pager-icon"></span>';
esui.Pager.PREV_TEXT  =  '<span class="ui-pager-icon"></span><span class="ui-pager-pntext">上一页</span>';

esui.Pager.prototype = {
    /**
     * 获取当前页码
     * 
     * @public
     * @return {string}
     */
    getPage: function () {
        return this.page;
    },
    
    /**
     * 渲染控件
     * 
     * @public
     */
    render: function () {
        var me = this;
        esui.Control.prototype.render.call( me );
        
        me.total = parseInt(me.total, 10) || 0;

        me.setPage(me.page);
    },
    
    /**
     * @ignore
     */
    _tplMain: '<ul>{0}</ul>',
    /**
     * @ignore
     */
    _tplItem: '<li onclick="{2}" onmouseover="{3}" onmouseout="{4}" class="{1}">{0}</li>',
    
    /**
     * 绘制页码区
     * 
     * @private
     */
    _renderPages: function () {
        var me        = this,
            html      = [],
            total     = me.total,
            startNumber = this.startNumber,
            page      = me.page, // 恶心，这里逻辑不大对，改掉
            itemClass = me.__getClass( 'item' ),
            disClass  = me.__getClass( 'disabled' ),
            prevClass = me.__getClass( 'prev' ),
            nextClass = me.__getClass( 'next' ),
            omitWord  = me._getInfoHtml( me.omitText, me.__getClass( 'omit' ) ),
            i, begin;
        
        if ( total <= 0 ) {
            this.main.innerHTML = '';
            return;
        }
        if(page >= total){
            page = total - 1;
        }
        // 计算起始页
        if ( page < me.showCount - 1 ) {
            begin = 0;
        } else if ( page > total - me.showCount ) {
            begin = total - me.showCount;
        } else {
            begin = page - Math.floor( me.showCount / 2 );
        }

        if ( begin < 0 ) {
            begin = 0
        }
        
        // 绘制前一页的link
        if (page > 0) {
            html.push( 
                me._getItemHtml(
                    me.prevText,
                    prevClass,
                    me.__getStrCall( '_setPage', page - 1 )
                ) );
        } else {
            html.push( me._getInfoHtml( me.prevText, prevClass + ' ' + disClass ) );
        }
        
        // 绘制前缀
        if ( begin > 0 ) {
            html.push(
                me._getItemHtml(
                    1,
                    itemClass,
                    this.__getStrCall( '_setPage', 0 )
                ),
                omitWord );
        }

        // 绘制中间的序号
        for ( i = 0; i < me.showCount && begin + i < total; i++ ) {
            if ( begin + i != page ) {
            html.push(
                me._getItemHtml(
                    1 + begin + i,
                    itemClass,
                    me.__getStrCall( '_setPage', begin + i)
                ) );
            } else {
                html.push(
                    me._getInfoHtml(
                        1 + begin + i, 
                        itemClass + ' ' + me.__getClass( 'selected' )
                    ) );
            }
        }
        
        // 绘制后缀
        if ( begin < total - me.showCount ) {
            html.push(
                omitWord,
                me._getItemHtml(
                    total,
                    itemClass,
                    me.__getStrCall( '_setPage', total - 1)
                ) );
        }
        
        
        // 绘制后一页的link
        if ( page < total - 1 ) {
            html.push(
                me._getItemHtml(
                    me.nextText,
                    nextClass,
                    me.__getStrCall( '_setPage', page + 1 ) 
                ) );
        } else {
            html.push( me._getInfoHtml( me.nextText, nextClass + ' ' + disClass ) );
        }
        
        this.main.innerHTML = esui.util.format( me._tplMain, html.join('') );
    },
    
    /**
     * 生成单个页码元素的html内容
     * @private
     * 
     * @param {String} sText
     * @param {Strint} sClass
     * @param {String} sClick
     * 
     * @return {String}
     */
    _getItemHtml: function( sText, sClass, sClick ) {
        var me          = this,
            strRef      = me.__getStrRef(),
            itemOver    = strRef + '._itemOverHandler(this)',
            itemOut     = strRef + '._itemOutHandler(this)';
            
        return esui.util.format(
            me._tplItem,
            sText,
            sClass,
            sClick,
            itemOver,
            itemOut
        );
    },
    
    /**
     * 生成单个不可点击的页码元素的html内容
     * @private
     * 
     * @param {String} sText
     * @param {Strint} sClass
     * 
     * @return {String}
     */
    _getInfoHtml: function ( sText, sClass ) {
        return esui.util.format( this._tplItem, sText, sClass, '', '' ,'' );
    },
    
    /**
     * 点击页码的事件处理接口
     * 
     * @param {Number} page
     * 
     * @return {Boolean}
     */
    onchange: new Function(),
    
    /**
     * 选择页码
     * 
     * @public
     * @param {number} page 选中页数
     */
    _setPage: function ( page ) {
        page += this.startNumber;
        if ( this.onchange( page ) !== false ) {
            this.setPage( page );
        }
    },

    /**
     * 选择页码
     * 
     * @public
     * @param {number} page 选中页数
     */
    setPage: function ( page ) {
        this.page = parseInt(page, 10) - this.startNumber;
        this._renderPages();
    },
    
    /**
     * @ignore
     * @param {Object} item
     */
    _itemOverHandler: function( item ) {
        baidu.addClass( item, this.__getClass( 'hover' ) );
    },

    /**
     * @ignore
     * @param {Object} item
     */
    _itemOutHandler: function( item ) {
        baidu.removeClass( item, this.__getClass( 'hover' ) );
    }
};

baidu.inherits( esui.Pager, esui.Control );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/Region.js
 * desc:    地域选择控件
 * author:  zhouyu, erik
 */

///import esui.InputControl;
///import esui.Select;
///import baidu.lang.inherits;
///import baidu.object.clone;

/**
 * 地域选择控件
 *
 * @param {Object} options 控件初始化参数
 */
esui.Region = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'region';
    
    // 标识鼠标事件触发自动状态转换
    this._autoState = 0;

    esui.InputControl.call( this, options );


    this._initDatasource( this.datasource );
    
    // 初始化mode
    if ( this.mode != 'single' ) {
        this.mode = 'multi';
    }

    // 初始化value
    var valueAsRaw = this.valueAsRaw || this.value;
    if ( this.mode == 'multi' ) {
        if ( typeof valueAsRaw == 'string' ) {
            valueAsRaw = valueAsRaw.split( ',' );
        } else if ( !( valueAsRaw instanceof Array ) ) {
            valueAsRaw = [];
        }
    }
    this.valueAsRaw =  valueAsRaw;
};

 
esui.Region.prototype = {
    /**
     * 渲染控件
     *
     * @public
     */
    render: function () {
        if ( !this._isRendered ) {
            esui.InputControl.prototype.render.call( this );

            switch ( this.mode ) {
            case 'multi':
                this._initMulti();
                break;
            case 'single':
                this._initSingle();
                break;
            }
            
            this._isRendered = 1;
        }
    },
    
    /**
     * 获取当前选中的值
     * 
     * @public
     * @return {string}
     */
    getValue: function () {
        if ( this.mode == 'multi' ) {
            return this.valueAsRaw.join( ',' );
        }

        return this.valueAsRaw;
    },
    
    /**
     * 设置当前选中的值
     * 
     * @public
     * @param {string} value
     */
    setValue: function ( value ) {
        this.valueAsRaw = value;
        
        if ( this.mode == 'multi' ) {
            this._selectMulti( value.split( ',' ) );
        } else {
            this._controlMap.select.setValue( value );
        }
    },

    /**
     * 设置控件的禁用状态
     * 
     * @public
     * @param {boolean} disabled 是否禁用
     */
    setDisabled: function ( disabled ) {
        disabled = !!disabled;
        if ( this.mode == 'multi' ) {
            var cbs = this.main.getElementsByTagName( 'input' );
            var cbsLen = cbs.length;
            var cb;

            while ( cbsLen-- ) {
                cb = cbs[ cbsLen ];
                if ( cb.type == 'checkbox' ) {
                    cb.disabled = disabled;
                }
            }

            this._updateMulti();
        } else {
            this._controlMap.select.setDisabled( disabled );
        }

        this[ disabled ? 'addState' : 'removeState' ]( 'disabled' );
        this.disabled = disabled;
    },
    
    /**
     * 设置控件为禁用
     * 
     * @public
     */
    disable: function () {
        this.setDisabled( true );
    },
    
    /**
     * 设置控件为可用
     * 
     * @public
     */
    enable: function () {
        this.setDisabled( false );
    },
    
    /**
     * 多选地域初始化
     * 
     * @private
     */
    _initMulti: function () {
        var data    = this.datasource;
        var len     = data.length;
        var html    = [];
        var i;
        
        for ( i = 0; i < len; i++ ) {
            html.push( this._getOptionHtml( data[ i ], 0 ) );
        }

        this.main.innerHTML = html.join( '' );
        this._selectMulti( this.valueAsRaw );
    },
    
    /**
     * 选中地域（多选）
     * 
     * @private
     * @param {Array} valueAsRaw
     */
    _selectMulti: function ( valueAsRaw ) {
        this.valueAsRaw = valueAsRaw;

        var len = valueAsRaw.length;
        var map = {};
        var key;
        while ( len -- ) {
            map[ valueAsRaw[ len ] ] = 1;
        }

        for ( key in this._dataMap ) {
            this._getOption( key ).checked = ( key in map );
        }

        this._updateMulti();
    },
    
    /**
     * 更新多选地域的视图和选中值
     * 
     * @private
     */
    _updateMulti: function ( data, dontResetValue ) {
        data = data || {children: this.datasource};
        if ( !dontResetValue ) {
            this.valueAsRaw = [];
        }

        var children = data.children;
        var len      = children instanceof Array && children.length;
        var i;
        var item;
        var isChecked = true;
        var isItemChecked;
        var checkbox = data.id && this._getOption( data.id );

        if ( len ) {
            for ( i = 0; i < len; i++ ) {
                isItemChecked = this._updateMulti( children[ i ], 1 );
                isChecked = isChecked && isItemChecked;
            }

            checkbox && ( checkbox.checked = isChecked );
            return isChecked;
        } else {
            isChecked = checkbox.checked;
            isChecked && this.valueAsRaw.push( data.id );
            return isChecked;
        }
    },
    
    /**
     * 多选选项的html模板
     *
     * @private
     */
    _tplOption: '<dt class="{3}"><input type="checkbox" value="{0}" optionId="{0}" id="{2}" onclick="{4}" level="{5}"><label for="{2}">{1}</label></dt>',
    
    /**
     * 获取选项的html
     *
     * @private
     * @param {Object} data 选项数据
     * @param {number} level 选项层级
     * @return {string}
     */
    _getOptionHtml: function ( data, level ) {
        var id              = data.id;
        var optionClass     = [];
        var bodyClass       = this.__getClass( 'option-body' );
        var childrenClass   = this.__getClass( 'option-children' );
        var html            = [];
        var children        = data.children;
        var len             = children instanceof Array && children.length;
        var i;
        
        optionClass.push(
            this.__getClass( 'option' ),
            this.__getClass( 'option-' + id ),
            this.__getClass( 'option-level' + level )
        );

        html.push(
            '<dl class="' + optionClass.join(' ') + '">',
            esui.util.format(
                this._tplOption,
                id,
                data.text,
                this.__getId( 'option_' + id ),
                bodyClass,
                this.__getStrRef() + '._optionClick(this)',
                level
            ) );
        
        if ( len ) {
            html.push( '<dd class="' + childrenClass + '">' );
            for ( i = 0; i < len; i++ ) {
                html.push( this._getOptionHtml( children[ i ], level + 1 ) );
            }
            html.push( '</dd>' );
        }
        html.push( '</dl>' );
        
        return html.join( '' );
    },
    
    /**
     * 多选选项点击的handler
     *
     * @private
     * @param {HTMLInputElement} dom 选项checkbox的dom
     */
    _optionClick: function ( dom, dontRefreshView ) {
        var id          = dom.getAttribute( 'optionId' );
        var data        = this._dataMap[ id ];
        var isChecked   = dom.checked;
        var children    = data.children;
        var len         = children instanceof Array && children.length;
        var item;
        var checkbox;
        
        if ( len ) {
            while ( len-- ) {
                item = children[ len ];
                checkbox = this._getOption( item.id );
                checkbox.checked = isChecked;
                this._optionClick( checkbox, 1 );
            }
        }

        if ( !dontRefreshView ) {
            this._updateMulti();
        }
    },
    
    /**
     * 获取多选选项的checkbox
     *
     * @private
     * @param {string} id 选项标识
     * @return {HTMLInputElement}
     */
    _getOption: function ( id ) {
        return baidu.g( this.__getId( 'option_' + id ) );
    },
    
    /**
     * 初始化数据源
     *
     * @private
     */
    _initDatasource: function ( data ) {
        this.datasource = data || esui.Region.REGION_LIST;
        this._dataMap   = {};
        data = this.datasource;
        walker.call( this, data, {children: data} );

        function walker( data, parent ) {
            var len = data instanceof Array && data.length;
            var i;
            var item;
            
            if ( !len ) {
                return;
            }

            for ( i = 0; i < len; i++ ) {
                item = baidu.object.clone( data[ i ] );
                item.parent = parent;
                this._dataMap[ item.id ] = item;
                walker.call( this, item.children, item );
            }
        }
    },

    /**
     * 单选地域初始化
     *
     * @private
     */
    _initSingle: function () {
        var me = this;
        var options = {
            id          : me.__getId( "region" ),
            datasource  : me._singleDataAdapter(),
            value       : me.valueAsRaw,
            width       : 100
        };
        var sinSelect = esui.util.create( "Select", options );
        sinSelect.appendTo( me.main );
        sinSelect.onchange = me._getSelectChangeHandler();

        me._controlMap.select = sinSelect;
    },
    
    /**
     * 单选模式Select的change handler
     *
     * @private
     * @return {Function}
     */
    _getSelectChangeHandler: function () {
        var me = this;
        return function ( value ) {
            me.valueAsRaw = me.value = value;
        };
    },

    /**
     * 单选模式的数据格式适配器
     *
     * @private
     * @return {Array}
     */
    _singleDataAdapter: function () {
        var result = [];
        walker( {children: this.datasource} );

        function walker( data ) {
            var children = data.children;
            var hasChild = !!children;
            var len, i;
            if ( data.id ) {
                result.push( {
                    name        : data.text, 
                    value       : data.id, 
                    disabled    : hasChild
                } );
            }

            if ( hasChild ) {
                for ( i = 0, len = children.length; i < len; i++ ) {
                    walker( children[ i ] );
                }
            }
        }

        return result;
    }
} 

baidu.inherits( esui.Region, esui.InputControl );


/**
 * 默认地域配置
 *
 * @static
 */
esui.Region.REGION_LIST = [
    {
        id: 'China',
        text: '中国地区',
        children: [
            {
                id: "North",
                text: "华北地区",
                children: [
                    {id: "1", text: "北京"},
                    {id: "3", text: "天津"},
                    {id: "13", text: "河北"},
                    {id: "26", text: "山西"},
                    {id: "22", text: "内蒙古"}
                ]
            },
            {
                id: "NorthEast",
                text: "东北地区",
                children: [
                    {id: "21", text: "辽宁"},
                    {id: "18", text: "吉林"},
                    {id: "15", text: "黑龙江"}
                ]
            },
            {
                id: "East",
                text: "华东地区",
                children: [
                    {id: "2", text: "上海"},
                    {id: "19", text: "江苏"},
                    {id: "32", text: "浙江"},
                    {id: "9", text: "安徽"},
                    {id: "5", text: "福建"},
                    {id: "20", text: "江西"},
                    {id: "25", text: "山东"}
                ]
            },
            {
                id: "Middle",
                text: "华中地区",
                children: [
                    {id: "14", text: "河南"},
                    {id: "16", text: "湖北"},
                    {id: "17", text: "湖南"}
                ]
            },
            {
                id: "South",
                text: "华南地区",
                children: [
                    {id: "4", text: "广东"},
                    {id: "8", text: "海南"},
                    {id: "12", text: "广西"}
                ]
            },
            {
                id: "SouthWest",
                text: "西南地区",
                children: [
                    {id: "33", text: "重庆"},
                    {id: "28", text: "四川"},
                    {id: "10", text: "贵州"},
                    {id: "31", text: "云南"},
                    {id: "29", text: "西藏"}
                ]
            },
            {
                id: "NorthWest",
                text: "西北地区",
                children: [
                    {id: "27", text: "陕西"},
                    {id: "11", text: "甘肃"},
                    {id: "24", text: "青海"},
                    {id: "23", text: "宁夏"},
                    {id: "30", text: "新疆"}
                ]
            },
            {
                id: "Other",
                text: "其他地区",
                children: [
                    {id: "34", text: "香港"},
                    {id: "36", text: "澳门"},
                    {id: "35", text: "台湾"}
                ]
            }
        ]
    },
    {
        id: 'Abroad',
        text: '国外',
        children: [
            {id: '7', text: '日本'},
            {id: '37', text: '其他国家'}
        ]
    }
];
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/Schedule.js
 * desc:    日程控件
 * author:  chenjincai, erik
 */
 
///import esui.InputControl;
///import baidu.lang.inherits;
///import baidu.dom.hasClass;
///import baidu.dom.addClass;
///import baidu.dom.removeClass;

/**
 * 日程控件
 *
 * @param {Object} options 控件初始化参数
 */
esui.Schedule = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'schedule';
    
    // 标识鼠标事件触发自动状态转换
    this._autoState = 0;

    esui.InputControl.call( this, options );
    
    // 初始化视图的值
    this._initValue();

    this.__initOption('helpSelected', null, 'HELP_SELECTED');
    this.__initOption('help', null, 'HELP');
    this.__initOption('dayWords', null, 'DAY_WORDS');
    this.__initOption('shortcut', null, 'SHORTCUT');
}

esui.Schedule.HELP_SELECTED = '投放时间段';
esui.Schedule.HELP = '暂停时间段';
esui.Schedule.DAY_WORDS = [
    '星期一',
    '星期二',
    '星期三',
    '星期四',
    '星期五',
    '星期六',
    '星期日'
];

esui.Schedule.SHORTCUT = function () {
    /**
     * @inner
     */
    function selectByDayStates( dayStates ) {
        var begin = 0;
        var end   = Math.min( dayStates.length, 7 );
        var checkbox;

        for ( ; begin < end; begin++ ) {
            checkbox = baidu.g( this.__getId( 'lineState' + begin ) );
            checkbox.checked = !!dayStates[ begin ];
            this._dayClick( checkbox, true );
        }
    }

    return [
        {
            text: '全部时间',
            func: function () {
                selectByDayStates.call( this, [1,1,1,1,1,1,1] );
                this._refreshView(this);
            }
        },
        {
            text: '工作日',
            func: function () {
                selectByDayStates.call( this, [1,1,1,1,1,0,0] );
                this._refreshView(this);
            }
        },
        {
            text: '周末',
            func: function () {
                selectByDayStates.call( this, [0,0,0,0,0,1,1] );
                this._refreshView(this);
            }
        }
    ];
}();

esui.Schedule.prototype = {
    /**
     * 设置控件的禁用状态
     * 
     * @public
     * @param {boolean} disabled 是否禁用
     */
    setDisabled: function ( disabled ) {
        disabled = !!disabled;
        var stateName = 'disabled';
        var shortcut;
        var bodyHead;
        var i;
        
        this.disabled = disabled;
        if ( disabled ) {
            this.addState( stateName );
        } else {
            this.removeState( stateName );
        }

        disabled = this.getState( stateName );
        shortcut = baidu.g( this.__getId('shortcut') );
        bodyHead = baidu.g( this.__getId('BodyHead') );
        bodyHead.style.display = shortcut.style.display = disabled ? 'none' : '';
        
        for ( i = 0; i < 7; i++ ) {
            baidu.g( this.__getId('lineState' + i) ).disabled = disabled;
        }
    },
    
    /**
     * 设置控件为禁用
     * 
     * @public
     */
    disable: function () {
        this.setDisabled( true );
    },

    /**
     * 设置控件为可用
     * 
     * @public
     */
    enable: function () {
        this.setDisabled( false );
    },
    
    /**
     * 获取选中的时间(数组格式)
     * 
     * @public
     * @return {Array}
     */
    getValueAsArray: function () {
        return this.valueAsArray;
    },
    
    /**
     * 获取选中的时间(字符串格式)
     * 
     * @public
     * @return {string}
     */
    getValue: function () {
        var value = [];
        var valueAsArray = this.valueAsArray;
        var i, j;

        for ( i = 0; i < 7; i++ ) {
            for ( j = 0; j < 24; j++ ) {
                value.push( valueAsArray[ i ][ j ] );
            }
        }

        return value.join( ',' );
    },

    /**
     * 设置选中的时间(数组格式)
     * 
     * @public
     * @param {Array} valueAsArray
     */
    setValueAsArray: function ( valueAsArray ) {
        // 做了不靠谱的简单判断
        if ( valueAsArray instanceof Array 
             && valueAsArray.length == 7
        ) {
            this.valueAsArray = valueAsArray;
            this._refreshView();
        }
    },

    /**
     * 设置选中的时间(字符串格式)
     * 
     * @public
     * @param {string} value
     */
    setValue: function ( value ) {
        var valueAsArray = this._parseValue( value );
        valueAsArray && this.setValueAsArray( valueAsArray );
    },

    /**
     * 渲染控件
     * 
     * @public
     * @param {Object} main 控件挂载的DOM
     */
    render: function () {
        if ( !this.isRendered ) {
            esui.InputControl.prototype.render.call( this );

            this.main.innerHTML = 
                esui.util.format(
                    this._tpl,
                    this.__getClass( 'head' ),
                    this.__getClass( 'body' ),
                    this.__getClass( 'help' ),
                    this.__getClass( 'help-selected' ),
                    this.__getClass( 'help-unselected' ),
                    this.__getClass( 'help-text' ),
                    this.__getClass( 'shortcut' ),
                    this.__getId( 'body' ),
                    this.helpSelected,
                    this.help,
                    this.__getId( 'shortcut' ),
                    this._getShortcutHtml()
                );
            this._initBody();
        }

        this.isRendered = 1;
        this.setDisabled( this.disabled );
        this._refreshView();
    },

    /**
     * 控件主体html模板
     *
     * @private
     */
    _tpl: '<div class="{0}">'
                + '<div class="{2}">'
                    + '<div class="{3}"></div>'
                    + '<div class="{5}">{8}</div>'
                    + '<div class="{4}"></div>'
                    + '<div class="{5}">{9}</div>'
                + '</div>'
                + '<div class="{6}" id="{10}">{11}</div>'
            + '</div>'
        + '<div class="{1}" id="{7}"></div>',
    
    /**
     * 初始化视图的值
     * 
     * @private
     */
    _initValue: function () {
        var value        = this._parseValue( this.value );
        var valueAsArray = this.valueAsArray;
        var i;
        var j;
        var lineValue;

        if ( value ) {
            valueAsArray = value;
        } else if ( !this.valueAsArray ) {
            valueAsArray = [];
            for ( i = 0; i < 7; i++ ) {
                lineValue = [];
                valueAsArray.push( lineValue );
                
                for ( j = 0; j < 24; j++ ) {
                    lineValue.push( 0 );
                }
            }
        }

        this.valueAsArray = valueAsArray;
    },

    /**
     * 将字符串类型的值解析成数组形式
     * 
     * @private
     * @param {string} value
     * @return {Array}
     */
    _parseValue: function ( value ) {
        value = (value || '').split( ',' );

        var valueAsArray = null;
        var i;

        if ( value.length == 24 * 7 ) {
            valueAsArray = [];
            for ( i = 0; i < 7; i++ ) {
                valueAsArray.push( value.slice( i * 24, (i + 1) * 24 ) );
            }
        }

        return valueAsArray;
    },
    
    /**
     * 获取快捷选择区域的html
     *
     * @private
     * @return {string}
     */
    _getShortcutHtml: function () {
        var html        = [];
        var shortcuts   = this.shortcut;
        var len         = shortcuts.length;
        var separation  = '&nbsp;|&nbsp;';
        var clazz       = this.__getClass( 'shortcut-item' );
        var tpl         = '<span class="{0}" onclick="{2}">{1}</span>';
        var i, shortcut;

        for (i = 0; i < len; i++) {
            shortcut = shortcuts[i];
            html.push(
                esui.util.format(
                    tpl,
                    clazz,
                    shortcut.text,
                    this.__getStrCall( '_doShortcut', i )
                ) );
        }
        return html.join( separation );
    },
    
    /**
     * 执行快捷选择的功能
     *
     * @private
     * @param {number} index 快捷选项索引
     */
    _doShortcut: function ( index ) {
        var func = this.shortcut[ index ].func;
        typeof func == 'function' && func.call( this );
    },
    
    /**
     * 初始化控件主体
     *
     * @private
     */
    _initBody: function () {
        var ref          = this.__getStrRef();
        var dayWords     = this.dayWords;
        var html         = [];
        var lineClass    = this.__getClass( 'line' );
        var dayClass     = this.__getClass( 'day' );
        var segClass     = this.__getClass( 'seg' );
        var timeClass    = this.__getClass( 'time' );
        var timeHClass   = this.__getClass( 'timehead' )
        var lineMidHtml  = '</div><div class="' + segClass + '">';
        var headItemTpl  = '<div class="' + timeHClass + '" onmouseover="{2}" onmouseout="{3}" onclick="{4}" time="{1}" id="{0}">&nbsp;</div>';
        var lineEndHtml  = '</div></div>';
        var lineBeginTpl = '<div class="' + lineClass + '" id="{0}">'
                                + '<div class="' + dayClass + '">'
                                + '<input type="checkbox" id="{1}" value="{2}" onclick="{3}">'
                                + '<label for="{1}">{4}</label>';
        var timeTpl = '<div class="' + timeClass + '" onmouseover="{3}" onmouseout="{4}" onclick="{5}" time="{2}" day="{1}" timeitem="1" id="{0}">{2}</div>';

        // 拼装html：头部time列表 
        html.push( '<div class="' + lineClass + '" id="' 
                   , this.__getId( 'BodyHead' ) + '">'
                   , '<div class="' + dayClass + '">&nbsp;'
                   , lineMidHtml );

        for ( j = 0; j < 24; j++ ) {
            if ( j > 0 && j % 6 == 0 ) {
                html.push( lineMidHtml );
            }

            html.push(
                esui.util.format(
                    headItemTpl,
                    this.__getId( 'TimeHead' + j ),
                    j,
                    ref + '._timeHeadOverOut(this,1)',
                    ref + '._timeHeadOverOut(this)',
                    ref + "._timeHeadClick(this)"
                ));
        }
        html.push( lineEndHtml );

        // 拼装html：时间体列表 
        for ( i = 0; i < 7; i++ ) {
            html.push(
                esui.util.format(
                    lineBeginTpl,
                    this.__getId( 'line' + i ),
                    this.__getId( 'lineState' + i ),
                    i,
                    ref + '._dayClick(this)',
                    dayWords[ i ]
                ),
                lineMidHtml
            );
                      
            for ( j = 0; j < 24; j++ ) {
                if ( j > 0 && j % 6 == 0 ) {
                    html.push( lineMidHtml );
                }

                html.push(
                    esui.util.format(
                        timeTpl,
                        this.__getId( 'time_' + i + '_' + j ),
                        i,
                        j,
                        ref + '._timeOverOut(this,1)',
                        ref + '._timeOverOut(this)',
                        ref + "._timeClick(this)"
                    )
                );
            }

            html.push( lineEndHtml );
        }
        
        // html写入
        baidu.g( this.__getId( 'body' ) ).innerHTML = html.join('');
    },
    
    /**
     * “时间”移入移出的处理函数
     *
     * @private
     * @param {HTMLElement} dom 时间的dom元素
     * @param {booleam}     isOver 是否鼠标移入
     */
    _timeOverOut: function ( dom, isOver ) {
        var clazz = this.__getClass( 'time-hover' );
        if ( isOver ) {
            baidu.addClass( dom, clazz );
        } else {
            baidu.removeClass( dom, clazz );
        }
    },
    
    /**
     * “时间头部”移入移出的处理函数
     *
     * @private
     * @param {HTMLElement} dom 头部的dom元素
     * @param {booleam}     isOver 是否鼠标移入
     */
    _timeHeadOverOut: function ( dom, isOver ) {
        var clazz = this.__getClass( 'timehead-hover' );
        if ( isOver ) {
            baidu.addClass( dom, clazz );
        } else {
            baidu.removeClass( dom, clazz );
        }
    },
    
    /**
     * 点击“时间”的处理函数
     *
     * @private
     * @param {HTMLElement} dom 时间的dom元素
     */
    _timeClick: function ( dom ) {
        if ( this.isDisabled() ) {
            return;
        }
        
        var day  = parseInt( dom.getAttribute( 'day' ), 10 ),
            time = parseInt( dom.getAttribute( 'time' ), 10 ),
            isSelected = !baidu.dom.hasClass(
                            dom, 
                            this.__getClass( 'time-selected' ));
        
        this._selectTime( day, time, isSelected );
    },
    
    /**
     * 点击“时间头部”的处理函数
     *
     * @private
     * @param {HTMLElement} dom 头部的dom元素
     */
    _timeHeadClick: function ( dom ) {
        var isSelected = !baidu.dom.hasClass(
                            dom, 
                            this.__getClass( 'timehead-active' ) ),
            time = parseInt( dom.getAttribute( 'time' ), 10 ),
            div;
        
        for ( i = 0; i < 7; i++ ) {
            div = baidu.g( this.__getId('time_' + i + '_' + time) );
            this._selectTime(
                parseInt( div.getAttribute('day'), 10 ), 
                time, 
                isSelected, 
                true
            );
        }           
        
        this._refreshView();
    },
    
    /**
     * 点击“星期”的处理函数
     *
     * @private
     * @param {HTMLElement} dom 星期的checkbox元素
     * @param {boolean}     dontRefresh 是否禁止视图刷新
     */
    _dayClick: function ( dom, dontRefresh ) {
        var me          = this,
            isSelected  = dom.checked,
            divs        = dom.parentNode.parentNode.getElementsByTagName( 'div' ),
            len         = divs.length, div;

        while ( len-- ) {
            div = divs[ len ];
            if ( this._isTimeDom( div ) ) {
                this._selectTime(
                    parseInt( div.getAttribute( 'day' ), 10),
                    parseInt( div.getAttribute( 'time' ), 10),
                    isSelected,
                    true
                );
            }
        }
        
        if ( !dontRefresh ) {
            me._refreshView();
        }
    },

    /**
     * 刷新weektime选择器的视图
     * 
     * @private
     */
    _refreshView: function () {
        var me          = this;
        var disabled    = me.isDisabled();
        var valueAsArr  = me.valueAsArray;
        var headStates  = [];
        var activeHeadClass = me.__getClass( 'timehead-active' );
        var selectedClass   = me.__getClass( 'time-selected' );
        var head    = baidu.g( me.__getId( 'BodyHead' ) ).getElementsByTagName( 'div' );
        var divs    = baidu.g( me.__getId( 'body' ) ).getElementsByTagName( 'div' );
        var divLen  = divs.length;
        var div;
        var divMatch;
        var headDiv;
        var i, j;
        var count = 0;
        var lineValue, lineActive, lineCb;
        var lineEl, lineDivs, time, temp;

        // 初始化头部状态表
        for ( i = 0; i < 24; i++ ) {
            headStates.push( 1 );
        }
        
        // 遍历头部状态
        for ( i = 0; i < 7; i++ ) {
            lineEl      = baidu.g( me.__getId( 'line' + i ) );
            lineDivs    = lineEl.getElementsByTagName( 'div' );
            j           = lineDivs.length;

            while ( j-- ) {
                time = lineDivs[ j ];
                if ( me._isTimeDom( time ) ) {
                    time = parseInt( time.getAttribute( 'time' ), 10 );
                    temp = valueAsArr[ i ][ time ];
                    if ( !temp || temp == '0' ) {
                        headStates[ time ] = 0;
                    }
                }
            }
        }
        
        // 刷新time头部状态
        j = head.length;
        while ( j-- ) {
            div = head[ j ];
            divMatch = /TimeHead([0-9]+)$/.exec( div.id );
            if ( divMatch && divMatch.length == 2 ) {
                if ( headStates[ parseInt( divMatch[ 1 ], 10 ) ] ) {
                    baidu.addClass( div, activeHeadClass );
                } else {
                    baidu.removeClass( div, activeHeadClass );
                }
            }
        }

        // 刷新时间项状态
        while ( divLen-- ) {
            div = divs[ divLen ];
            divMatch = /time_([0-9]+)_([0-9]+)$/.exec( div.id );
            if ( divMatch && divMatch.length == 3 ) {
                time = valueAsArr[ parseInt( divMatch[ 1 ], 10 ) ][ parseInt( divMatch[ 2 ], 10 ) ];
                if ( time && time != '0' ) {
                    baidu.addClass( div, selectedClass );
                } else {
                    baidu.removeClass( div, selectedClass );
                }
            }
        }

        // 刷新checkbox状态
        for ( i = 0; i < 7; i++ ) {
            lineValue = valueAsArr[ i ];
            lineActive = true;
            
            for ( j = 0; j < 24; j++ ) {
                if ( !lineValue[ j ] || lineValue[ j ] == '0' ) {
                    lineActive = false;
                } else {
                    count++;
                }
            }
            
            baidu.g( me.__getId( 'lineState' + i ) ).checked = lineActive;
        }
    },
    

    /**
     * 选中时间
     * 
     * @private
     * @param {Object} day 星期
     * @param {Object} time 时间
     * @param {Object} isSelected 是否选中
     * @param {Object} noRrefresh 是否不刷新视图
     */
    _selectTime: function ( day, time, isSelected, noRrefresh ) {
        var value = this.valueAsArray;
        value[ day ][ time ] = ( isSelected ? 1 : 0 );
        
        if ( !noRrefresh ) {
            this._refreshView();
        }
    },
    
    /**
     * 判断dom元素是否时间元素
     * 
     * @private
     * @param {HTMLElement} dom
     */
    _isTimeDom: function ( dom ) {
        return !!dom.getAttribute( 'timeitem' );
    }
}

baidu.inherits( esui.Schedule, esui.InputControl );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/SideBar.js
 * desc:    左侧导航控件
 * author:  zhaolei, erik, linzhifeng
 */

///import esui.Control;
///import esui.Button;
///import baidu.lang.inherits;

/**
 * 左侧导航控件
 *
 * @param {Object} options 控件初始化参数
 */
esui.SideBar = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = "sidebar";
    
    // 标识鼠标事件触发自动状态转换
    this._autoState = 0;

    esui.Control.call( this, options );

    this.headHeight     = this.headHeight || 37;
    this.marginTop      = this.marginTop || 10;
    this.marginLeft     = this.marginLeft || 10;
    this.marginBottom   = this.marginBottom || 10;

    this.__initOption( 'autoDelay', null, 'AUTO_DELAY' );
    this.__initOption( 'mode', null, 'MODE' );

    this._autoTimer = 0;
    
    // TODO: 永久取消js实现的sidebar动画效果
    // this._motioning = false;
};

esui.SideBar.AUTO_DELAY = 200;      //自动隐藏和自动显示的延迟
esui.SideBar.MODE       = 'fixed';  //初始化状态

esui.SideBar.prototype = {
    // TODO: 永久取消js实现的sidebar动画效果
    // motionStep      : 20,        //动态步伐
    // motionInterval  : 20,        //动态间隔
    
    /**
     * 初始化控制按钮
     *
     * @private
     */
    _initCtrlBtn: function () {
        var me          = this;
        var main        = me.main;
        var controlMap  = me._controlMap;
        var btnAutoHide = esui.util.create( 'Button', {
            id      : me.__getId( 'AutoHide' ),
            skin    : 'autohide'
        } );
        var btnFixed    = esui.util.create( 'Button', {
            id      : me.__getId( 'Fixed' ),
            skin    : 'fixed'
        } );
        
        // 将按钮append到sidebarbar
        btnAutoHide.appendTo( main );
        btnFixed.appendTo( main );
        
        // 持有控件引用
        controlMap.btnAutoHide  = btnAutoHide;
        controlMap.btnFixed     = btnFixed;
        
        // 挂载行为
        btnAutoHide.onclick = this._getAutoHideClickHandler();
        btnFixed.onclick    = this._getFixedClickHandler();
        
        // 初始化按钮的显示
        this._setMode( this.mode );
    },
    
    onmodechange: new Function(),

    /**
     * 获取“固定”按钮的clickhandler
     *
     * @private
     * @return {Function}
     */
    _getFixedClickHandler: function () {
        var me = this;
        return function () {
            me._setMode( 'fixed' );
            me.onmodechange( me.mode );
        };
    },
    
    /**
     * 获取“自动隐藏”按钮的clickhandler
     *
     * @private
     * @return {Function}
     */
    _getAutoHideClickHandler: function () {
        var me = this;
        return function () {
            me._setMode( 'autohide' );
            me.onmodechange( me.mode );
            me._hide();
        };
    },
    
    /**
     * 设置sidebar的显示模式，autohide|fixed
     *
     * @private
     * @param {string} mode
     */
    _setMode: function ( mode ) {
        mode = mode.toLowerCase();

        var autoHideMain    = this._getAutoHideMain();
        var fixedMain       = this._getFixedMain();
        var neighbor        = this._getNeighbor();
        var neighborHideClass = this.__getClass( 'neighbor-hide' );

        if ( mode == 'fixed' ) {
            baidu.hide( fixedMain );
            baidu.show( autoHideMain );
        } else {
            baidu.show( fixedMain );
            baidu.hide( autoHideMain );
        }

        this.mode = mode;
        
        // 更新neighbor视图
        if ( this._isAutoHide() ) {
            baidu.addClass( neighbor, neighborHideClass );
        } else {
            baidu.removeClass( neighbor, neighborHideClass );
            this._hideMat();
        }

        this._repaintNeighbor();
    },
    
    /**
     * 判断当前是否自动隐藏模式
     *
     * @private
     * @return {boolean}
     */
    _isAutoHide: function () {
        return this.mode == 'autohide';
    },

    /**
     * 获取“固定”按钮的控件主元素
     *
     * @private
     * @return {HTMLElement}
     */
    _getFixedMain: function () {
        return this._controlMap.btnFixed.main;
    },
    
    /**
     * 获取“自动隐藏”按钮的控件主元素
     *
     * @private
     * @return {HTMLElement}
     */
    _getAutoHideMain: function () {
        return this._controlMap.btnAutoHide.main;
    },
    
    /**
     * 初始化内容区域
     *
     * @private
     * @return {HTMLElement}
     */
    _initContent: function () {
        var main = this.main;
        var head = baidu.dom.first( main );
        var body;
        
        if ( head ) {
            baidu.addClass( head, this.__getClass( 'head' ) );
            this._headEl = head;
            body = baidu.dom.next( head );
            
            if ( body ) {
                this._bodyEl = body;
                baidu.addClass( body, this.__getClass( 'body' ) );
            }
        }
    },
    
    /**
     * 缓存控件的核心数据
     *
     * @private
     */
    _caching: function () {
        var main        = this.main;
        var parent      = main.parentNode;
        var parentPos   = baidu.dom.getPosition( parent );
        var pos         = baidu.dom.getPosition( main )

        if ( !esui.util.hasValue( this._mOffsetTop ) ) {
            this._mOffsetTop = pos.top - parentPos.top;
            this.top  = pos.top;
            this.left = pos.left; 
        } else {
            this.top = parentPos.top + this._mOffsetTop;
        }
    },

    /**
     * 绘制控件
     * 
     * @public
     * @param {HTMLElement} main 控件主元素
     */
    render: function () {
        var me = this,
            pos;

        
        if ( !me._isRendered ) {
            esui.Control.prototype.render.call( me );
            me._caching();
            
            // 给邻居元素添加控制样式的class
            baidu.addClass( me._getNeighbor(), me.__getClass( 'neighbor' ) );
            
            // 初始化控制按钮，内容区域，mat和minibar
            me._initContent();
            me._renderMat();
            me._renderMiniBar();
            me._initCtrlBtn();
            
            // 挂载resize和scorll的listener
            me.heightReseter = me._getHeightReseter();
            me.topReseter    = me._getTopReseter();
            baidu.on( window, 'resize', me.heightReseter );
            baidu.on( window, 'scroll', me.topReseter );
            
            // 给主元素添加over和out的事件handler
            me.main.onmouseover = me._getMainOverHandler();
            me.main.onmouseout  = me._getMainOutHandler();

            // 初始化高度和位置
            me._resetTop();
            me._resetHeight(); 
            
            // 初始化显示状态
            if ( me._isAutoHide() ) {
                me._hide();
            }

            me._isRendered = 1;
        }
    },
    
    /**
     * 绘制mat区域
     * 
     * @private
     */
    _renderMat: function () {
        var mat = document.createElement( 'div' );

        mat.id          = this.__getId( 'mat' );
        mat.className   = this.__getClass( 'mat' );
        document.body.appendChild( mat );
    },

    /**
     * 刷新控件的显示
     *
     * @public
     */
    refreshView: function () {
        this._caching();
        this.heightReseter();
        this.topReseter();
    },

    /**
     * 获取主元素鼠标移入的handler
     *
     * @private
     * @return {Function}
     */
    _getMainOverHandler: function () {
        var me = this;

        return function () {        
            clearTimeout( me._autoTimer );
        };
    },

    /**
     * 获取主元素鼠标移出的handler
     *
     * @private
     * @return {Function}
     */
    _getMainOutHandler: function () {
        var me = this;

        return function ( event ) {
            if ( me._isAutoHide() ) {
                event = event || window.event;
                var tar = event.relatedTarget || event.toElement;
                if ( !baidu.dom.contains( me.main, tar ) ) {
                    me._autoHideBar();                        
                }                                        
            }
        };
    },

    /**
     * 绘制minibar
     * 
     * @private
     */
    _renderMiniBar:function () {
        var me = this,
            div = document.createElement( 'div' ),
            html = [];
        
        // 构建minibar的html
        // 以主sidebar的标题为标题
        me._headEl && html.push(
            '<div class="' 
            + me.__getClass( 'minibar-text' ) 
            + '">' + me._headEl.innerHTML 
            + '</div>');
        html.push('<div class="' + me.__getClass('minibar-arrow') + '"></div>');
        
        // 初始化minibar
        div.innerHTML   = html.join( '' );
        div.id          = me.__getId( 'MiniBar' );
        div.className   = me.__getClass( 'minibar' );
        div.style.left  = '-10000px';
        div.style.top   = me.top + 'px';

        // 持有引用
        me._miniBar = div;
        
        // 挂载行为
        div.onmouseover = me._getMiniOverHandler();
        div.onmouseout  = me._getMiniOutHandler();
        document.body.appendChild( div );
    },
    
    /**
     * 获取minibar鼠标移入的handler
     *
     * @private
     * @return {Function}
     */
    _getMiniOverHandler: function () {
        var me = this;
        var hoverClass = me.__getClass('minibar-hover');

        return function () {            
            if ( !baidu.dom.hasClass(this, hoverClass ) ){
                baidu.addClass( this, hoverClass );
                me._autoTimer = setTimeout(
                    function () {
                        me._hideMiniBar();
                    }, me.autoDelay );
            }
        };
    },
    
    /**
     * 获取minibar鼠标移出的handler
     *
     * @private
     * @return {Function}
     */
    _getMiniOutHandler: function () {
        var me = this;
        return function () {
            baidu.removeClass( this, me.__getClass( 'minibar-hover' ) );
            clearTimeout( me._autoTimer );
        };
    },

    /**
     * 重设控件高度
     * 
     * @private
     */
    _resetHeight: function () {
        var me          = this,
            page        = baidu.page,
            pos         = baidu.dom.getPosition( me.main ),
            scrollTop   = page.getScrollTop(),
            height      = page.getViewHeight(),
            bodyHeight;

        if ( height ) {
            height = height - pos.top + scrollTop - me.marginTop;
        } else {
            height = 300;
        }   
        if ( height < 0 ){
            height = 300;
        }
        
        bodyHeight      = height - me.headHeight;
        this.bodyHeight = bodyHeight;
        this.height     = height;

        me._getMat().style.height = height + me.marginTop * 2 + 'px';
        me.main.style.height = 
        me._miniBar.style.height = 
            height + 'px';

        me._bodyEl && (me._bodyEl.style.height = bodyHeight + 'px');

        this.onresize();
    },
    
    onresize: new Function(),

    /**
     * 获取重设控件高度的函数
     * 
     * @private
     * @return {Function}
     */
    _getHeightReseter: function () {
        var me = this;
        return function () {
            me._resetHeight();
        };
    },
    
    /**
     * 重设控件位置
     * 
     * @private
     * @return {Function}
     */
    _resetTop: function () {
        var me          = this,
            marginTop   = me.marginTop,
            scrollTop   = baidu.page.getScrollTop(),
            main        = me.main,
            mat         = me._getMat(),
            mini        = me._miniBar,
            top         = me.top, 
            mainPos     = 'absolute',
            miniPos     = 'absolute',
            mainTop, miniTop;
        
        // 2x2的判断，真恶心
        if ( baidu.ie && baidu.ie < 7 ) {
            if ( scrollTop > top - marginTop ) {
                mainTop = miniTop = scrollTop - top + me.top;
            } else {
                mainTop = miniTop = top;
                me._resetHeight();
            }
        } else {
            if ( scrollTop > top - marginTop ) {
                miniPos = mainPos = 'fixed';
                mainTop = miniTop = marginTop;    
            } else {
                mainTop = miniTop = top;
                me._resetHeight();
            }
        }
        
        mat.style.top       = mainTop - me.marginTop + 'px';
        main.style.top      = mainTop + 'px';
        mat.style.position  = main.style.position = mainPos;
        mini.style.top      = miniTop + 'px';
        mini.style.position = miniPos;
        setTimeout(function(){
            //移动过快时修补最后一次调整
            me._resetHeight();
        },200);            
    },
    
    /**
     * 获取重设控件位置的函数
     * 
     * @private
     * @return {Function}
     */
    _getTopReseter: function () {
        var me = this;
        return function () {
            me._resetTop();
        };
    },
    
    /**
     * 隐藏mat区域
     * 
     * @private
     */
    _hideMat: function () {
        this._getMat().style.left = '-10000px';
    },

    /**
     * 显示侧边导航
     * 
     * @private
     */
    _show: function () {
        var me          = this,
            step        = 0,
            endLeft     = 10,
            startLeft   = -220,
            minus       = endLeft - startLeft,
            interval;
                
        /**
         * 完成显示侧边导航的动作
         * @inner
         */
        function finished() {
            me._getMat().style.left = 0;
            me.main.style.left = endLeft + 'px'; 
            // TODO: 永久取消js实现的sidebar动画效果
            // me._motioning = false;
            
            if ( me._isAutoHide() ){
                me._autoHideBar();                
            }
        }
        
        finished();
        return;
        
        // TODO: 永久取消js实现的sidebar动画效果
        /*
        me._motioning = true;        
        interval = setInterval(
            function () {
                step ++;
                
                if (step >= me.motionStep) {
                    clearInterval(interval);
                    finished();
                    return;
                }
                
                var pos = Math.floor(minus * me._tween(step));
                me.main.style.left = startLeft + pos + 'px';
            }, 
            me.motionInterval);  
        */
    },
        
    /**
     * 隐藏侧边导航
     *
     * @private
     */
    _hide: function () {
        var me          = this,
            step        = 0,
            endLeft     = -220,
            startLeft   = 10,
            minus   = endLeft - startLeft,
            interval;
        
        finished();
        return;

        function finished( noMotion ) {
            me._getMat().style.left = '-10000px';
            me.main.style.left     = endLeft + 'px';
            //baidu.addClass(me._getNeighbor(), me.__getClass('neighbor-hide'));
            //me._repaintNeighbor();
            
            // TODO: 永久取消js实现的sidebar动画效果
            // me._motioning = false;
            me._showMiniBar( noMotion );
        };
        
        // TODO: 永久取消js实现的sidebar动画效果
        /*
        me._motioning = true;
        interval = setInterval(
            function () {
                step ++;
                
                if (step >= me.motionStep) {                    
                    clearInterval(interval);
                    finished();
                    return;
                }
                
                var pos = Math.floor(minus * me._tween(step));
                me.main.style.left = startLeft + pos + 'px';
            }, 
            me.motionInterval);        
        */
    },    
    
    /**
     * 自动隐藏
     * 
     * @private
     */
    _autoHideBar : function () {
        var me = this;
        clearTimeout( me._autoTimer );
        me._autoTimer = setTimeout( function () {
            var mPos   = baidu.page.getMousePosition(),
                navPos = baidu.dom.getPosition( me.main ),
                main   = me.main;

            if ( mPos.x > navPos.left + main.offsetWidth 
                 || mPos.y < navPos.top 
                 || mPos.y > navPos.top + main.offsetHight
            ) {
                me._hide();
            }            
        }, me.autoDelay);
    },
    
    /**
     * 显示缩小的bar
     * 
     * @private
     */
    _showMiniBar: function (noMotion) {
        var me          = this,
            step        = 0,
            endLeft     = 0,
            startLeft   = -30,
            minus       = endLeft - startLeft,
            interval;
        
        if ( noMotion ) {
            finish();
            return;
        }

        /**
         * 完成显示minibar的动作
         * 
         * @inner
         */
        function finish() {
            me._miniBar.style.left = endLeft + 'px';

            // TODO: 永久取消js实现的sidebar动画效果
            // me._motioning = false;
        }
        
        finish();
        return;
        
        // TODO: 永久取消js实现的sidebar动画效果
        /*
        me._motioning = true;
        interval = setInterval(
            function () {
                step ++;
                
                if (step >= me.motionStep) {
                    clearInterval(interval);
                    finish();
                    return;
                }
                
                var pos = Math.floor(minus * me._tween(step));
                me._miniBar.style.left = startLeft + pos + 'px';
            }, 
            me.motionInterval);
        */
    },
    
    /**
     * 隐藏缩小的bar
     * 
     * @private
     * @param {Function} onComplete 完成的回调函数
     */
    _hideMiniBar: function () {
        var me          = this,
            step        = 0,
            endLeft     = -30,
            startLeft   = 0,
            minus       = endLeft - startLeft,
            interval;  

        /**
         * 完成隐藏minibar的动作
         * @inner
         */
        function finished() {
            me._miniBar.style.left = endLeft + 'px';
            //baidu.removeClass(me._getNeighbor(), me.__getClass('neighbor-hide'));         
            //me._repaintNeighbor();
            
            // TODO: 永久取消js实现的sidebar动画效果
            // me._motioning = false;
            me._show();
        }

        finished();
        return;
        
        // TODO: 永久取消js实现的sidebar动画效果
        /*
        me._motioning = true;
        interval = setInterval(
            function () {
                step ++;
                
                if (step >= me.motionStep) {
                    clearInterval(interval);
                    finish();
                    return;
                }
                
                var pos = Math.floor(minus * me._tween(step));
                me._miniBar.style.left = startLeft + pos + 'px';
            }, 
            me.motionInterval);       
        */
    },

    /**
     * 重绘邻居元素
     * 
     * @private
     * @desc 重绘内部的控件
     */
    _repaintNeighbor: function () {
        var ctrls = esui.util.getControlsByContainer( this._getNeighbor() ),
            len   = ctrls.length,
            i,
            ctrl,
            key;
            
        for ( i = 0; i < len; i++ ) {
            ctrl = ctrls[ i ];

            if ( ctrl.refreshView ) {
                ctrl.refreshView();
            } else {
                ctrl.render();
            }
        }
    },
    
    /**
     * 获取邻居元素
     * 
     * @private
     * @return {HTMLElement}
     */
    _getNeighbor: function () {
        return baidu.dom.next( this.main );
    },
    
    /**
     * 获取mat元素
     * 
     * @private
     * @return {HTMLElement}
     */
    _getMat: function () {
        return baidu.g( this.__getId( 'mat' ) );
    },

    /**
     * 释放控件
     * 
     * @private
     */
    __dispose: function () {
        var me = this;
        var mat = me._getMat();
            
        baidu.un( window, 'resize' ,me.heightReseter );
        baidu.un( window, 'scroll', me.topReseter );
        document.body.removeChild( me._miniBar );
        document.body.removeChild( mat );

        // 释放dom引用
        me._headEl = null;
        me._bodyEl = null;
        me._miniBar = null;

        esui.Control.prototype.__dispose.call( this );
    }
    
    // TODO: 永久取消js实现的sidebar动画效果
    // ,
    /**
     * 动画函数
     * 
     * @private
     * @param {number} step 步数
     * @return {number} 完成百分比
     
    _tween : function(step) {
        return Math.pow(step/this.motionStep, 2);
    }
    */
};

baidu.inherits( esui.SideBar, esui.Control );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/Tab.js
 * desc:    Tab标签控件
 * author:  zhaolei, erik, wanghuijun
 */

///import esui.Control;
///import baidu.lang.inherits;

/**
 * Tab标签控件
 * 
 * @param {Object} options 控件初始化参数
 */
esui.Tab = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'tab';
    
    // 标识鼠标事件触发自动状态转换
    this._autoState = 0;

    esui.Control.call( this, options );
    
    this.activeIndex    = this.activeIndex || 0;
    this.allowEdit      = !!this.allowEdit;
    this.maxCount       = this.maxCount || esui.Tab.MAX_COUNT || 5;
};

esui.Tab.prototype = {
    /**
     * 渲染控件
     * 
     * @public
     */
    render: function () {
        var me = this;
        esui.Control.prototype.render.call( me );
        
        this.tabs = this.datasource || this.tabs || [];

        // 绘制内容部分
        me._renderTabs();
    },

    _tplItem    : '<li class="{1}"{2}><em>{0}</em>{3}</li>',
    _tplAdd     : '<li class="add" onclick="{0}">+</li>',
    _tplClose   : '<span onclick="{0}"></span>',
    
    /**
     * 绘制标签区
     * 
     * @private
     */
    _renderTabs: function () {
        var me        = this,
            main      = me.main,
            tabs      = me.tabs,
            len       = tabs.length,
            itemClass = me.__getClass( 'item' ),
            html      = [],
            currClass,
            i,
            tab,
            title,
            closeHtml,
            clickHandler;
        
        if ( len == 0 ) {
            main.innerHTML = '';
            return;
        } else if ( len <= me.activeIndex ) {
            me.activeIndex = 0;
        } else if ( me.activeIndex < 0 ) {
            me.activeIndex = 0;
        }
        
        for (i = 0; i < len; i++) {
            tab             = me.tabs[ i ];
            title           = tab.title;
            currClass       = itemClass;
            closeHtml       = '';
            clickHandler    = '';
            
            // 初始化关闭按钮
            if ( me.allowEdit && !tab.stable ) {
                closeHtml = esui.util.format(
                    me.tplClose,
                    me.__getStrCall( '_close', i )
                );
            }

            // 首尾节点增加特殊class
            if ( i == 0 ) { 
                currClass += ' ' + me.__getClass( 'item-first' );
            }
            if ( i == len - 1 ) {
                currClass += ' ' + me.__getClass( 'item-last' );
            }
            
            // 构建tab的样式与行为
            if ( i == me.activeIndex ) {
                currClass += ' ' + me.__getClass( 'item-active' );
            } else {
                clickHandler = ' onclick="' 
                                + me.__getStrCall( '_select', i )
                                + '"';
            }

            // 构建tab项的html
            html.push(
                esui.util.format(
                    me._tplItem, 
                    title, 
                    currClass, 
                    clickHandler, 
                    closeHtml
                ) );
        }

        // 填充tab的html
        main.innerHTML = '<ul>' + html.join('') + '</ul>';
        me._resetPanel();
    },
    
    /**
     * 重置tab对应的panel的显示隐藏状态
     * 
     * @private
     */
    _resetPanel: function () {
        var tabs        = this.tabs;
        var len         = tabs.length;
        var activeIndex = this.activeIndex;
        var i;
        var panel;

        for ( i = 0; i < len; i++ ) {
            panel = tabs[ i ].panel;
            if ( panel ) {
                baidu.g( panel ).style.display = (i == activeIndex ? '' : 'none');
            }
        }
    },

    onchange: new Function(),
    
    /**
     * 选择标签
     * 
     * @private
     * @param {number} index 标签序号
     */
    _select: function ( index ) {
        if ( this.onchange( index, this.tabs[ index ] ) !== false ) {
            this.setActiveIndex( index );
        }
    },
    
    /**
     * 选择标签
     * 
     * @public
     * @param {number} index 标签序号
     */
    setActiveIndex: function ( index ) {
        this.activeIndex = index;
        this._renderTabs();
    },

    onclose: new Function(),
    
    /**
     * 关闭标签
     * 
     * @private
     * @param {number} index 标签序号
     */
    _close: function ( index ) {
        if ( this.onclose( index, this.tabs[ index ] ) !== false ) {
            this.remove( index );
        }
    },
    
    /**
     * 移除标签
     * 
     * @private
     * @param {number} index 标签序号
     */
    remove: function ( index ) {
        var tabs = this.tabs;
        tabs.splice( index, 1 );

        // 重新设置activeIndex
        if ( this.activeIndex >= tabs.length ) {
            this.activeIndex--;
        }
        if ( this.activeIndex < 0 ) {
            this.activeIndex = 0;
        }

        this._renderTabs();
    },
    
    /**
     * 添加标签
     * 
     * @public
     * @param {Object} tab 标签数据
     */
    add: function ( tab ) {
        tab = tab || { title: '新建标签' }
        this.tabs.push( tab );
        this._renderTabs();
    }
};

baidu.inherits( esui.Tab, esui.Control );
/*
 * esui (ECOM Simple UI)
 * Copyright 2011 Baidu Inc. All rights reserved.
 * 
 * path:    esui/TextInput.js
 * desc:    文本输入框控件
 * author:  erik
 */

///import esui.InputControl;
///import baidu.lang.inherits;
///import baidu.dom.addClass;
///import baidu.dom.removeClass;
///import baidu.event.on;
///import baidu.event.un;

/**
 * 文本输入框组件
 * 
 * @param {Object} options 控件初始化参数
 */
esui.TextInput = function ( options ) {
    // 标识鼠标事件触发自动状态转换
    this._autoState = 1;

    esui.InputControl.call( this, options );
    
    // 初始化value
    this.value = this.value || '';

    // 初始化mode
    if ( this.mode && this.mode != 'textarea' && this.mode != 'password' ) {
        this.mode = 'text';
    }
};

esui.TextInput.prototype = {
    /**
     * 设置输入控件的title提示
     * 
     * @public
     * @param {string} title
     */
    setTitle: function ( title ) {
        this.main.setAttribute( 'title', title );
    },
    
    /**
     * 将文本框设置为禁用
     * 
     * @public
     */
    disable: function () {
        this.main.disabled = true;
        esui.InputControl.prototype.disable.call( this );
    },

    /**
     * 将文本框设置为可用
     * 
     * @public
     */
    enable: function () {
        this.main.disabled = false;
        esui.InputControl.prototype.enable.call( this );
    },

    /**
     * 设置控件为只读
     * 
     * @public
     * @param {Object} readOnly
     */
    setReadOnly: function ( readOnly ) {
        readOnly = !!readOnly;
        this.main.readOnly = readOnly;
        this.readOnly = readOnly;
        readOnly ? this.addState('readonly') : this.removeState('readonly');
    },
    
    /**
     * 设置控件的高度
     *
     * @public
     * @param {number} height 高度
     */
    setHeight: function ( height ) {
        this.height = height;
        height && (this.main.style.height = height + 'px');
    },
    
    /**
     * 设置控件的宽度
     *
     * @public
     * @param {number} width 宽度
     */
    setWidth: function ( width ) {
        this.width = width;
        width && (this.main.style.width = width + 'px');
    },
    
    /**
     * 获焦并选中文本
     * 
     * @public
     */
    select: function () {
        this.main.select();
    },

    /**
     * 获取文本输入框的值
     * 
     * @public
     * @return {string}
     */
    getValue: function () {
        var value = this.main.value;
        if ( this._placing ) {
            return '';
        }

        return value;
    },
    
    /**
     * 设置文本输入框的值
     * 
     * @public
     * @param {string} value
     */
    setValue: function ( value ) { 
        value = value || '';

        var main        = this.main;
        var virClass    = this.__getClass( 'virtual' );
        var placeholder = this.placeholder;
        
        // 移除输入事件的处理，设置后再重新挂载
        // ie下setValue会触发propertychange事件
        this._removeInputListener();

        main.value = value;
        if ( value ) {
            this._placing = 0;
            baidu.removeClass( main, virClass );
        } else if ( placeholder ) {
            this._placing = 1;
            main.value = placeholder;
            baidu.addClass( main, virClass );
        }

        // 重新挂载输入事件的处理
        this._addInputListener();
    },

    
    /**
     * 渲染控件
     * 
     * @public
     * @param {Object} main 控件挂载的DOM
     */
    render: function () {
        var me      = this;
        var main    = me.main;
        
        if ( !me._isRendered ) {
            esui.InputControl.prototype.render.call( me );

            // 绑定事件
            main.onkeypress = me._getPressHandler();
            me._addInputListener();
            
            // 移除press状态的自动切换器
            main.onmousedown = null;
            main.onmouseup = null;

            // 挂载获焦和失焦事件处理
            main.onfocus = me._getFocusHandler();
            main.onblur = me._getBlurHandler();

            me._isRendered = 1;
        }

        // 设置readonly和disabled状态
        me.setReadOnly( !!me.readOnly );
        me.setDisabled( !!me.disabled );

        // 绘制宽高
        me.setWidth( me.width );
        me.setHeight( me.height );

        // 刷新输入框的value
        me.setValue( me.value );
    },
    
    /**
     * 添加控件oninput事件的监听器
     * 
     * @private
     */
    _addInputListener: function () {
        var main = this.main;
        var changeHandler = this._changeHandler;

        if ( !changeHandler ) {
            changeHandler = this._getChangeHandler();
            this._changeHandler = changeHandler;
        }
        
        if ( baidu.ie ) {
            main.onpropertychange = changeHandler;
        } else {
            baidu.on( main, 'input', changeHandler );
        }
    },
    
    /**
     * 移除控件oninput事件的监听器
     * 
     * @private
     */
    _removeInputListener: function () {
        var changeHandler = this._changeHandler;
        var main = this.main;

        if ( baidu.ie ) {
            main.onpropertychange = null;
        } else {
            changeHandler && baidu.un( main, 'input', changeHandler );
        }
    },
    
    onfocus: new Function(),

    /**
     * 获取获焦事件处理函数
     * 
     * @private
     * @return {Function}
     */
    _getFocusHandler: function () {
        var me = this;
            
        return function () {
            var main = me.main;
            
            baidu.removeClass( main, me.__getClass( 'virtual' ) );
            if ( me._placing ) {
                main.value = '';
            }

            if ( me.autoSelect ) {
                main.select();
            }

            me.onfocus();
        };
    },
    
    onblur: new Function(),

    /**
     * 获取失焦事件处理函数
     * 
     * @private
     * @return {Function}
     */
    _getBlurHandler: function () {
        var me = this;
            
        return function () {
            if (me.main.value !== me.placeholder) {
                me.setValue( me.main.value );
            }
            me.onblur();
        };
    },
    
    onenter: new Function(),

    /**
     * 获取键盘敲击的事件handler
     * 
     * @private
     * @return {Function}
     */
    _getPressHandler: function () {
        var me = this;
        return function ( e ) {
            e = e || window.event;
            var keyCode = e.keyCode || e.which;
            
            if ( me._type != 'text' ) {
                return;
            }
            
            if ( keyCode == 13 ) {
                return me.onenter();
            }
        };
    },
    
    onchange: new Function(),
    
    /**
     * 获取输入框value发生改变的事件handler
     * 
     * @private
     * @return {Function}
     */
    _getChangeHandler: function() {
        var me = this;
        return function ( e ) {
            if ( baidu.ie ) {
                if ( window.event.propertyName == 'value' ) {
                    me.onchange();
                }
            } else {       
                me.onchange();
            } 
        };
    },
    
    /**
     * 构造控件
     *
     * @protected
     */
    __construct: function () {
        esui.InputControl.prototype.__construct.call( this );
        
        var me      = this;
        var main    = me.main;
        var tagName = main.tagName;
        var tagType = main.getAttribute( 'type' );

        // 判断输入框的mode
        var mode = '';
        switch ( tagName ) {
        case 'TEXTAREA':
            mode = 'textarea';
            break;
        case 'INPUT':
            switch ( tagType ) {
            case 'text':
            case 'password':
                mode = tagType;
                break;
            }
            break;
        }

        if ( !mode ) {
            throw new Error( "esui.TextInput: invalid main element!" );
        }

        me.mode = me.mode || mode;

        // 类型声明，用于生成控件子dom的id和class
        me._type = me.mode == 'textarea' ? 'textarea' : 'text';

        me.value = me.value || main.value;
        me.placeholder = me.placeholder || main.getAttribute( 'placeholder' );
        main.setAttribute( 'placeholder', '' );
    },

    /**
     * 释放控件
     * 
     * @protected
     */
    __dispose: function () {
        // 卸载main的事件
        var main = this.main;
        main.onkeypress = null;
        main.onchange = null;
        main.onfocus = null;
        main.onblur = null;

        this._removeInputListener();
        this._changeHandler = null;

        esui.InputControl.prototype.__dispose.call( this );
    },
    
    /**
     * 创建控件主元素
     *
     * @protected
     * @return {HTMLInputElement}
     */
    __createMain: function () {
        var creater = esui.InputControl.prototype.__createInput;
        var mode    = this.mode;
        mode        = mode || 'text';

        if ( mode == 'text' || mode == 'password' ) {
            return creater.call( this, {
                tagName : 'input',
                name    : this.name,
                type    : mode
            } );
        } else {
            return creater.call( this, {
                tagName : 'textarea',
                name    : this.name
            } );
        }
    }
};

baidu.inherits( esui.TextInput, esui.InputControl );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/Table.js
 * desc:    表格控件
 * author:  erik, wanghuijun, linzhifeng
 * date:    $Date: 2010/12/16 13:04:00 $
 * 
 * 表格级属性：
 * columnResizable：‘true’ or ‘false’，默认为false，为true则开启列宽拖拽改变功能（计划、单元、关键词、创意中已修改为打开状态）
 * followHead：‘true’ or ‘false’，默认为false，为true则开启纵向滚动表头悬停功能，如需添加表格外部元素与表头悬浮同时锁定，可在该元素上添加class：scroll_y_top_fixed，如目前表格上方的操作和总计区域，（计划、单元、关键词、创意中已修改为打开状态）
 * 
 * 列级属性：
 * stable： true’ or ‘false’，默认为false，该值代表该列是否可伸缩，进入页面或屏宽改变时表格将自动计算用户可视区域宽度，并自动伸缩各列，当某列带stable为true时该列则别伸缩。这个值尽量少用，保存整个表格是灵活可伸缩效果最好，大家担心的列宽太窄影响显示的问题可以通过minWidth属性解决。
 * locked： true’ or ‘false’，默认为false，该值指定列锁定，锁定列在出现横向滚动条时不被滚动。
 * minWidth：number，默认自动计算为表头宽度（文字+排序图标），可设定该列被拖拽或被自适应拉伸时的最小宽度
 * resizable： true’ or ‘false’，默认为true，当表格属性columnResizable为true时该值才生效，代表该列是否开启拖拽改变列宽功能
 */

///import esui.Control;
///import esui.Layer;
///import esui.Button;
///import esui.TextInput;
///import baidu.lang.inherits;

/**
 * 表格框控件
 * 
 * @param {Object} options 控件初始化参数
 */
esui.Table = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'table';
    
    // 标识鼠标事件触发自动状态转换
    this._autoState = 0;

    esui.Control.call( this, options );
    
    this.__initOption( 'noDataHtml', null, 'NODATA_HTML' );
    this.__initOption( 'followHead', null, 'FOLLOW_HEAD' );
    this.__initOption( 'sortable', null, 'SORTABLE' );
    this.__initOption( 'columnResizable', null, 'COLUMN_RESIZABLE' );
    this.__initOption( 'rowWidthOffset', null, 'ROW_WIDTH_OFFSET' );
    this.__initOption( 'subrowMutex', null, 'SUBROW_MUTEX' );
    this.__initOption( 'subEntryOpenTip', null, 'SUBENTRY_OPEN_TIP' );
    this.__initOption( 'subEntryCloseTip', null, 'SUBENTRY_CLOSE_TIP' );
    this.__initOption( 'subEntryWidth', null, 'SUBENTRY_WIDTH' );
    this.__initOption( 'breakLine', null, 'BREAK_LINE' );
    
    // 诡异的webkit
    // 表格的单元格不需要考虑边框宽度，直接加齐就行
    // 而且即使table-layout:fixed，单元格宽度也不会从前向后分配
    // 而会以未知策略将剩余宽度分配给单元格
    //
    // 但是在chrome19以上修复了此问题
    // 并且在safari5.1.4上测试未发现问题
    // if ( baidu.browser.isWebkit ) {
    //     this.rowWidthOffset = 0;
    // }

    this._followHeightArr = [0, 0];
    this._followWidthArr = [];
};

esui.Table.NODATA_HTML          = '';
esui.Table.FOLLOW_HEAD          = 0;
esui.Table.SORTABLE             = 0;
esui.Table.COLUMN_RESIZABLE     = 0;
esui.Table.ROW_WIDTH_OFFSET     = -1;
esui.Table.SUBROW_MUTEX         = 1;
esui.Table.SUBENTRY_OPEN_TIP    = '点击展开';
esui.Table.SUBENTRY_CLOSE_TIP   = '点击收起';
esui.Table.SUBENTRY_WIDTH       = 18;
esui.Table.BREAK_LINE           = 0;

esui.Table.prototype = {
    /**
     * 初始化表格的字段
     * 
     * @private
     */
    _initFields: function () {
        if ( !this.fields ) {
            return;
        }
        
        // 避免刷新时重新注入
        var fields  = this.fields,
            _fields = fields.slice( 0 ),
            len     = _fields.length;

        while ( len-- ) {
            if ( !_fields[ len ] ) {
                _fields.splice( len, 1 );
            }
        }
        this._fields = _fields;
        if ( !this.select ) {
            return;
        }
        
        switch ( this.select.toLowerCase() ) {
            case 'multi':
                _fields.unshift( this.FIELD_MULTI_SELECT );
                break;
            case 'single':
                _fields.unshift( this.FIELD_SINGLE_SELECT );
                break;
        }
    },
    
    /**
     * 获取列表体容器素
     * 
     * @public
     * @return {HTMLElement}
     */
    getBody: function () {
        return baidu.g( this.__getId( 'body' ) );
    },
    
    /**
     * 获取列表头容器元素
     * 
     * @public
     * @return {HTMLElement}
     */
    getHead: function () {
        return baidu.g( this.__getId( 'head' ) );
    },

    /**
     * 获取列表尾容器元素
     * 
     * @public
     * @return {HTMLElement}
     */
    getFoot: function () {
        return baidu.g( this.__getId( 'foot' ) );
    },
    
    /**
     * 获取表格内容行的dom元素
     * 
     * @private
     * @param {number} index 行号
     * @return {HTMLElement}
     */
    _getRow: function ( index ) {
        return baidu.g( this.__getId( 'row' ) + index );
    },
    
    /**
     * 获取checkbox选择列表格头部的checkbox表单
     * 
     * @private
     * @return {HTMLElement}
     */
    _getHeadCheckbox: function () {
        return baidu.g( this.__getId( 'selectAll' ) );
    },
    
    /**
     * 获取表格所在区域宽度
     * 
     * @private
     * @return {number}
     */
    _getWidth: function () {  
        // 如果手工设置宽度，不动态计算
        if ( this.width ) {
            return this.width;
        }  
        
        var me = this,
            width,
            rulerDiv = document.createElement( 'div' ),
            parent = me.main.parentNode;
        
        parent.appendChild( rulerDiv );    
        width = rulerDiv.offsetWidth;
        parent.removeChild( rulerDiv );
        
        return width;
    },
    
    /**
     * dom表格起始的html模板
     * 
     * @private
     */
    _tplTablePrefix: '<table cellpadding="0" cellspacing="0" width="{0}" controlTable="{1}">',
    
    /**
     * 缓存控件的核心数据
     *
     * @private
     */
    _caching: function () {
        if ( this.followHead ) {
            this._cachingFollowHead();
        }
    },
    
    /**
     * 缓存表头跟随所用的数据
     *
     * @private
     */
    _cachingFollowHead: function () {
        var me = this;
        var followDoms = me._followDoms;

        if ( !followDoms ) {
            followDoms = [];
            me._followDoms = followDoms;

            var walker = me.main.parentNode.firstChild;
            var dom;
            var i, len;
            var followWidths = me._followWidthArr;
            var followHeights = me._followHeightArr;

            // 缓存表格跟随的dom元素
            while ( walker ) {
                if ( walker.nodeType == 1 
                     && walker.getAttribute( 'followThead' )
                ) {
                    followDoms.push( walker );
                }
                walker = walker.nextSibling;
            }

            function getStyleNum( dom, styleName ) {
                var result = baidu.dom.getStyle( dom, styleName );
                return ( result == '' ? 0 : +( result.replace( 'px','' ) ) );
            }

            // 读取height和width的值缓存
            followHeights[ 0 ] = 0;
            for ( i = 0, len = followDoms.length; i < len; i++ ) {
                dom = followDoms[ i ];
                followWidths[ i ] = getStyleNum( dom, 'padding-left' ) 
                                  + getStyleNum( dom, 'padding-right' )  
                                  + getStyleNum( dom, 'border-left' ) 
                                  + getStyleNum( dom, 'border-right' ); 
                followHeights[ i + 1 ] = followHeights[ i ] + dom.offsetHeight;
            }
            followHeights[ i + 1 ] = followHeights[ i ];
            followHeights.lenght = i + 2;
        }

        // 读取跟随的高度，缓存
        me._followTop = baidu.dom.getPosition( followDoms[ 0 ] || me.main ).top;
    },

    /**
     * 绘制表格
     * 
     * @public
     */
    render: function () {
        var me   = this,
            main = me.main,
            i,
            len;
        
        me._initFields();
        if ( !me._fields ) {
            return;
        }
        
        esui.Control.prototype.render.call( this );

        // 如果未绘制过，初始化列宽
        if ( !me._isInited ) {
            me._initMinColsWidth();
        }

        me._subrowIndex = null;
        me._width = me._getWidth();
        main.style.width = me._width + 'px';
        
        me._initColsWidth();
        
        // 停止编辑功能
        me.stopEdit();

        me._renderHead();   // 绘制表格头
        me._renderBody();   // 绘制列表
        me._renderFoot();   // 绘制表格尾
        
        // 如果未绘制过，初始化resize处理
        if ( !me._isInited ) {
            me._caching();
            me._initResizeHandler();
            me._initTopResetHandler();   
            me._isInited = 1;
        } else {
            // 重绘时触发onselect事件
            switch ( me.select ) {
            case 'multi':
                me.onselect( [] );
                break;
            }
        }
        
        // 如果表格的绘制导致浏览器出现纵向滚动条
        // 需要重新计算各列宽度
        // 妈的，又多一次reflow
        if ( me._width != me._getWidth() ) {
            me._handleResize();
        }
    },
    
    onselect: new Function (),
    
    /**
     * 初始最小列宽
     *
     * @private
     */
    _initMinColsWidth: function() {
        var me      = this,
            fields  = me._fields,
            len     = fields.length,
            result  = [],
            field,
            width,
            i;

        if ( !me.noHead ) {
            for ( i = 0; i < len; i++ ) {
                field = fields[ i ];
                width = field.minWidth;
                if ( !width && !field.breakLine ) {
                    // 20包括排序和外层padding
                    width = field.title.length * 13 + 20;
                }

                result[i] = width;
            }
        } else {
            for ( i = 0; i < len; i++ ) {
                result[i] = 40;
            }
        }

        me._minColsWidth = result;
    },
    
    /**
     * 初始化列宽
     * 
     * @private
     */
    _initColsWidth: function () {
        var me          = this,
            fields      = me._fields,
            len         = fields.length,
            canExpand   = [],
            leaveAverage,
            leftWidth,
            field,
            offset,
            width,
            index,
            maxCanExpandIdx = 0,
            minWidth,
            i;
        
        me._colsWidth = [];
        
        // 减去边框的宽度
        leftWidth = me._width - 1;
        
        maxCanExpandIdx = len;

        // 读取列宽并保存
        for ( i = 0; i < len; i++ ) {
            field = fields[ i ];
            width = field.width;
            
            width = (width ? parseInt( width, 10 ) : 0);
            me._colsWidth.push( width );
            leftWidth -= width;

            if ( !field.stable ) {
                canExpand.push( i );
            }
        }
        
        // 根据当前容器的宽度，计算可拉伸的每列宽度
        len = canExpand.length;                 
        leaveAverage = Math.round( leftWidth / len );
        
        for ( i = 0; i < len; i++ ) {
            index  = canExpand[ i ];
            offset = Math.abs( leftWidth ) < Math.abs( leaveAverage ) ? leftWidth : leaveAverage; 
            leftWidth -= offset;
            me._colsWidth[ index ] += offset;

            //计算最小宽度
            minWidth = me._minColsWidth[ index ];
            if ( minWidth > me._colsWidth[ index ] ) {
                leftWidth += me._colsWidth[ index ] - minWidth;
                me._colsWidth[ index ] = minWidth;
            }
        }
        
        if ( leftWidth < 0 ) {// 如果空间不够分配，需要重新从富裕的列调配空间
            i = 0;
            while ( i < len && leftWidth != 0 ) {
                index    = canExpand[ i ];
                minWidth = me._minColsWidth[ index ];

                if ( minWidth < me._colsWidth[ index ] ) {
                    offset = me._colsWidth[ canExpand[ i ] ] - minWidth;
                    offset = offset > Math.abs( leftWidth ) ? leftWidth : -offset;
                    leftWidth += Math.abs( offset );
                    me._colsWidth[ index ] += offset;
                }
                i++;
            }
        } else if ( leftWidth > 0 ) {// 如果空间富裕，则分配给第一个可调整的列
            me._colsWidth[ canExpand[ 0 ] ] += leftWidth;
        }
        
    },
    
    /**
     * 绘制表格尾
     * 
     * @private
     */
    _renderFoot: function () {
        var me      = this,
            type    = 'foot',
            id      = me.__getId( type ),
            foot    = baidu.g( id );

        if ( !( me.foot instanceof Array ) ) {
            foot && (foot.style.display = 'none');
        } else {
            if ( !foot ) {
                foot = document.createElement( 'div' );
                foot.id = id;
                foot.className = me.__getClass( type );
                foot.setAttribute( 'controlTable', me.id );
                
                me.main.appendChild( foot );
            }    
            
            foot.style.display = '';
            foot.style.width = me._width + 'px';
            foot.innerHTML = me._getFootHtml();
        }
    },
    
    /**
     * 获取表格尾的html
     * 
     * @private
     * @return {string}
     */
    _getFootHtml: function () {
        var html        = [];
        var footArray   = this.foot;
        var len         = footArray.length;
        var fieldIndex  = 0;
        var colsWidth   = this._colsWidth;
        var thCellClass = this.__getClass( 'fcell' );
        var thTextClass = this.__getClass( 'fcell-text' );
        var i, colWidth, j, footInfo, 
            colspan, thClass, contentHtml;
        
        html.push( esui.util.format( this._tplTablePrefix, '100%', this.id ) );
        for ( i = 0; i < len; i++ ) {
            footInfo    = footArray[ i ];
            colWidth    = colsWidth[ fieldIndex ];
            colspan     = footInfo.colspan || 1;
            thClass     = [ thCellClass ];
            contentHtml = footInfo.content;

            if ( 'function' == typeof contentHtml ) {
                contentHtml = contentHtml.call( this );
            }
            contentHtml = contentHtml || '&nbsp;';

            for ( j = 1; j < colspan; j++ ) {
                colWidth += colsWidth[ fieldIndex + j ];
            }
            
            fieldIndex += colspan;
            if ( footInfo.align ) {
                thClass.push( this.__getClass( 'cell-align-' + footInfo.align ) );
            }
            
            colWidth += this.rowWidthOffset; 
            (colWidth < 0) && (colWidth = 0);
            html.push('<th id="' + this._getFootCellId( i ) + '" class="' + thClass.join( ' ' ) + '"',
                        ' style="width:' + colWidth + 'px;',
                        (colWidth ? '' : 'display:none;') + '">',
                        '<div class="' + thTextClass + '">',
                        contentHtml,
                        '</div></th>');
        }

        html.push( '</tr></table>' );
        return html.join( '' );
    },

    /**
     * 绘制表格头
     * 
     * @private
     */
    _renderHead: function () {
        var me      = this,
            type    = 'head',
            id      = me.__getId( type ),
            head    = baidu.g( id );
            
        if ( me.noHead ) {
            return;
        }

        if ( !head ) {
            head = document.createElement( 'div' );
            head.id = id;
            head.className = me.__getClass( type );
            head.setAttribute( 'controlTable', me.id );

            // 绑定拖拽的事件处理
            if ( me.columnResizable ) {
                head.onmousemove = me._getHeadMoveHandler();
                head.onmousedown = me._getDragStartHandler();
            }
            me.main.appendChild( head );
        }    
        
        head.style.width = me._width + 'px';
        head.innerHTML   = me._getHeadHtml();
    },
    
    /**
     * 获取表格头的html
     * 
     * @private
     * @return {string}
     */
    _getHeadHtml: function () {
        // TODO: 使用format性能很低的哈
        var me          = this,
            fields      = this._fields,
            len         = fields.length,
            html        = [],
            thCellClass = me.__getClass( 'hcell' ),
            thTextClass = me.__getClass( 'hcell-text' ),
            breakClass  = me.__getClass( 'cell-break' ),
            sortClass   = me.__getClass( 'hsort' ),
            selClass    = me.__getClass( 'hcell-sel' ),
            tipClass    = me.__getClass( 'hhelp' ),
            i, field, title, canDragBegin, canDragEnd,
            contentHtml,
            orderClass,
            alignClass,
            thClass,
            currentSort,
            sortIconHtml,
            sortable,
            tipHtml;
        
        // 计算最开始可拖拽的单元格
        for ( i = 0; i < len; i++ ) {
            if ( !fields[i].stable ) {
                canDragBegin = i;
                break;
            }
        }
        
        // 计算最后可拖拽的单元格
        for ( i = len - 1; i >= 0; i-- ) {
            if ( !fields[ i ].stable ) {
                canDragEnd = i;
                break;
            }
        }
        
        // 拼装html
        html.push( esui.util.format( me._tplTablePrefix, '100%', me.id ) );//me._totalWidth - 2
        html.push( '<tr>' ); 
        for ( i = 0; i < len; i++ ) {
            thClass     = [ thCellClass ];
            field       = fields[ i ];
            title       = field.title;
            sortable    = (me.sortable && field.sortable);
            currentSort = (sortable 
                            && field.field 
                            && field.field == me.orderBy);
            
            // 小提示图标html
            /*
            tipHtml = '';
            if (!me.noTip && field.tip) {
                tipHtml = ui._format(me._tplTipIcon,
                                    tipClass,
                                    ui.ToolTip.getEventString(field.tip));
            }
            */

            // 计算排序图标样式
            sortIconHtml = '';
            orderClass   = '';
            if ( sortable ) {
                thClass.push( me.__getClass( 'hcell-sort' ) );
                if ( currentSort ) {
                    thClass.push( me.__getClass( 'hcell-' + me.order ) );
                }             
                sortIconHtml = esui.util.format( me._tplSortIcon, sortClass );
            }
            
            // 计算表格对齐样式
            if ( field.align ) {
                thClass.push( me.__getClass( 'cell-align-' + field.align ) );
            }

            // 判断是否breakline模式
            if (esui.Table.BREAK_LINE
                || me.breakLine
                || field.breakLine
            ) {
                thClass.push( breakClass );
            }
            
            // 计算内容html
            if ( typeof title == 'function' ) {
                contentHtml = title.call( me );
            } else {
                contentHtml = title;
            }
            contentHtml = contentHtml || '&nbsp;';
            
                                        
            html.push('<th id="' + this._getTitleCellId( i ) + '" index="' + i + '"',
                        ' class="' + thClass.join( ' ' ) + '"',
                        sortAction(field, i),
                        (i >= canDragBegin && i < canDragEnd ? ' dragright="1"' : ''),
                        (i <= canDragEnd && i > canDragBegin ? ' dragleft="1"' : ''),
                        ' style="width:' + (me._colsWidth[ i ] + me.rowWidthOffset) + 'px;',
                        (me._colsWidth[i] ? '' : 'display:none') + '">',
                        '<div class="' + thTextClass +
                        (field.select ? ' ' + selClass : '') + '">',
                        contentHtml,
                        sortIconHtml,
                        tipHtml,
                        '</div></th>');
        }
        html.push( '</tr></table>' );
        return html.join( '' );
        
        /**
         * 获取表格排序的单元格预定义属性html
         * 
         * @inner
         * @return {string}
         */
        function sortAction( field, index ) {
            if ( me.sortable && field.sortable ) {
                return esui.util.format(
                            ' onmouseover="{0}" onmouseout="{1}" onclick="{2}" sortable="1"',
                            me.__getStrRef() + '._titleOverHandler(this)',
                            me.__getStrRef() + '._titleOutHandler(this)',
                            me.__getStrRef() + '._titleClickHandler(this)');
            }
            
            return '';
        }
    },
    
    _tplSortIcon: '<div class="{0}"></div>',

    // 提示模板，此处还未定实现方式
    _tplTipIcon: '<div class="{0}" {1}></div>', 
    
    /**
     * 获取表格头单元格的id
     * 
     * @private
     * @param {number} index 单元格的序号
     * @return {string}
     */
    _getTitleCellId: function ( index ) {
        return this.__getId( 'titleCell' ) + index;
    },

    /**
     * 获取表格尾单元格的id
     * 
     * @private
     * @param {number} index 单元格的序号
     * @return {string}
     */
    _getFootCellId: function ( index ) {
        return this.__getId( 'footCell' ) + index;
    },
    
    /**
     * 表格头单元格鼠标移入的事件handler
     * 
     * @private
     * @param {HTMLElement} cell 移出的单元格
     */
    _titleOverHandler: function ( cell ) {
        if ( this._isDraging || this._dragReady ) {
            return;
        }
        
        this._sortReady = 1;
        baidu.addClass( cell, this.__getClass( 'hcell-hover' ) );
    },
    
    /**
     * 表格头单元格鼠标移出的事件handler
     * 
     * @private
     * @param {HTMLElement} cell 移出的单元格
     */
    _titleOutHandler: function ( cell ) {
        this._sortReady = 0;
        baidu.removeClass( cell, this.__getClass( 'hcell-hover' ) );
    },
    
    onsort: new Function(),
    
    /**
     * 表格头单元格点击的事件handler
     * 
     * @private
     * @param {HTMLElement} cell 点击的单元格
     */
    _titleClickHandler: function ( cell ) {
        if ( this._sortReady ) { // 避免拖拽触发排序行为
            var me      = this,
                field   = me._fields[ cell.getAttribute( 'index' ) ],
                orderBy = me.orderBy,
                order   = me.order;
            
            if ( orderBy == field.field ) {
                order = (!order || order == 'asc') ? 'desc' : 'asc';
            } else {
                order = 'desc';
            }
            me.onsort( field, order );
            me.order = order;
            me.orderBy = field.field;
            me._renderHead();
        }
    },
    
    /**
     * 获取表格头鼠标移动的事件handler
     * 
     * @private
     * @return {Function}
     */
    _getHeadMoveHandler: function () {
        var me          = this,
            dragClass   = me.__getClass( 'startdrag' ),
            range       = 8; // 可拖拽的单元格边界范围
            
        return function ( e ) {
            if ( me._isDraging ) {
                return;
            }
            
            e = e || window.event;
            var tar     = e.srcElement || e.target,
                page    = baidu.page,
                pageX   = e.pageX || e.clientX + page.getScrollLeft(),
                pos, 
                index,
                sortable;
            
            // 寻找th节点。如果查找不到，退出
            tar = me._findDragCell( tar );
            if ( !tar ) {
                return;
            }
            
            // 获取位置与序号
            pos         = baidu.dom.getPosition( tar );
            index       = tar.getAttribute( 'index' );
            sortable    = tar.getAttribute( 'sortable' );
            
            // 如果允许拖拽，设置鼠标手型样式与当前拖拽点
            if ( tar.getAttribute( 'dragleft' ) 
                 && pageX - pos.left < range
            ) {
                sortable && ( me._titleOutHandler( tar ) ); // 清除可排序列的over样式
                baidu.addClass( this, dragClass );
                me._dragPoint = 'left';
                me._dragReady = 1;
            } else if (tar.getAttribute( 'dragright' ) 
                       && pos.left + tar.offsetWidth - pageX < range
            ) {
                sortable && ( me._titleOutHandler( tar ) ); // 清除可排序列的over样式
                baidu.addClass( this, dragClass );
                me._dragPoint = 'right';
                me._dragReady = 1;
            } else {
                baidu.removeClass( this, dragClass );
                sortable && ( me._titleOverHandler( tar ) ); // 附加可排序列的over样式
                me._dragPoint = '';
                me._dragReady = 0;
            }
        };
    },
    
    /**
     * 查询拖拽相关的表格头单元格
     * 
     * @private
     * @param {HTMLElement} target 触发事件的元素
     * @return {HTMLTHElement}
     */
    _findDragCell: function ( target ) {    
        while ( target.nodeType == 1 ) {
            if ( target.tagName == 'TH' ) {
                return target;
            }
            target = target.parentNode;
        }
        
        return null;
    },
 
    /**
     * 获取表格头鼠标点击拖拽起始的事件handler
     * 
     * @private
     * @return {Function}
     */
    _getDragStartHandler: function () {
        var me = this,
            dragClass = me.__getClass( 'startdrag' );
            
        return function ( e ) {
            e = e || window.event;
            var tar = e.target || e.srcElement;
            
            // 寻找th节点，如果查找不到，退出
            tar = me._findDragCell( tar );
            if ( !tar ) {
                return;
            }
            
            if ( baidu.g( me.__getId( 'head' ) ).className.indexOf( dragClass ) < 0 ) {
                return;
            }            
                        
            // 获取显示区域高度
            me._htmlHeight = document.documentElement.clientHeight;
            
            // 记忆起始拖拽的状态
            me._isDraging = true;
            me._dragIndex = tar.getAttribute( 'index' );
            me._dragStart = e.pageX || e.clientX + baidu.page.getScrollLeft();
            
            // 绑定拖拽事件
            document.onmousemove = me._getDragingHandler();
            document.onmouseup   = me._getDragEndHandler();
            
            // 显示拖拽基准线
            me._showDragMark( me._dragStart );
            
            // 阻止默认行为
            baidu.event.preventDefault( e );
            return false;
        };
    },
    
    /**
     * 获取拖拽中的事件handler
     * 
     * @private
     * @desc 移动拖拽基准线
     * @return {Function}
     */
    _getDragingHandler: function () {
        var me = this;
        return function ( e ) {
            e = e || window.event;
            me._showDragMark( e.pageX || e.clientX + baidu.page.getScrollLeft() );
            baidu.event.preventDefault( e );
            return false;
        };
    },
    
    /**
     * 显示基准线
     * 
     * @private
     */
    _showDragMark: function ( left ) {
        var me      = this,
            mark    = me._getDragMark();
        
        if ( !me.top ) {
            me.top = baidu.dom.getPosition( me.main ).top;
        }    
        
        if ( !mark ) {
            mark = me._createDragMark();
        }
        
        mark.style.top = me.top + 'px';
        mark.style.left = left + 'px';
        mark.style.height = me._htmlHeight - me.top + baidu.page.getScrollTop() + 'px';
    },
    
    /**
     * 隐藏基准线
     * 
     * @private
     */
    _hideDragMark: function () {
        var mark = this._getDragMark();
        mark.style.left = '-10000px';
        mark.style.top = '-10000px';
    },
    
    /**
     * 创建拖拽基准线
     * 
     * @private
     * @return {HTMLElement}
     */
    _createDragMark: function () {
        var mark        = document.createElement( 'div' );
        mark.id         = this.__getId( 'dragMark' );
        mark.className  = this.__getClass( 'mark ');
        mark.style.top  = '-10000px';
        mark.style.left = '-10000px';
        document.body.appendChild( mark );
        
        return mark;
    },
    
    /**
     * 获取基准线的dom元素
     * 
     * @private
     * @return {HTMLElement}
     */
    _getDragMark: function () {
        return baidu.g( this.__getId( 'dragMark' ) );
    },
    
    /**
     * 获取拖拽结束的事件handler
     * 
     * @private
     * @return {Function}
     */
    _getDragEndHandler: function () {
        var me = this;
        return function (e) {
            e = e || window.event;
            var minWidth,
                index = parseInt( me._dragIndex, 10 ),
                pageX = e.pageX || e.clientX + baidu.page.getScrollLeft(),
                offsetX,
                field,
                fields      = me._fields, 
                fieldLen    = fields.length,
                alters      = [], 
                alterWidths = [], 
                alter, 
                alterLen, 
                alterWidth, 
                alterSum    = 0,
                colsWidth   = me._colsWidth,
                leave, i, 
                revise      = 0, 
                totalWidth,
                offsetWidth, 
                currentWidth, 
                roughWidth;

            // 校正拖拽元素
            // 如果是从左边缘拖动的话，拖拽元素应该上一列
            if ( me._dragPoint == 'left' ) {
                index--;
            }
            
            // 校正拖拽列的宽度
            // 不允许小于最小宽度
            minWidth        = me._minColsWidth[ index ];
            offsetX         = pageX - me._dragStart;
            currentWidth    = colsWidth[ index ] + offsetX;
            if ( currentWidth < minWidth ) {
                offsetX += (minWidth - currentWidth);
                currentWidth = minWidth;
            }
            
            //查找宽度允许改变的列
            for ( i = index + 1; i < fieldLen; i++ ) {
                if ( !fields[ i ].stable && colsWidth[i] > 0 ) {
                    alters.push( i );
                    alterWidth = colsWidth[ i ];
                    alterWidths.push( alterWidth );
                    alterSum += alterWidth;
                }
            }

            // 计算允许改变的列每列的宽度
            leave = offsetX;
            alterLen = alters.length;
            for ( i = 0; i < alterLen; i++ ) {
                alter       = alters[ i ];
                alterWidth  = alterWidths[ i ];    //当前列宽
                roughWidth  = offsetX * alterWidth / alterSum; // 变更的列宽
                
                // 校正变更的列宽
                // roughWidth可能存在小数点
                if ( leave > 0 ) {
                    offsetWidth = Math.ceil( roughWidth );
                } else {
                    offsetWidth = Math.floor( roughWidth );
                }
                offsetWidth = (Math.abs( offsetWidth ) < Math.abs( leave ) ? offsetWidth : leave);

                // 校正变更后的列宽
                // 不允许小于最小宽度
                alterWidth -= offsetWidth;
                leave -= offsetWidth;
                minWidth = me._minColsWidth[ alter ];
                if ( alterWidth < minWidth ) {
                    revise += minWidth - alterWidth;
                    alterWidth = minWidth;
                }
                
                colsWidth[ alter ] = alterWidth;
            }

            // 校正拖拽列的宽度
            // 当影响的列如果宽度小于最小宽度，会自动设置成最小宽度
            // 相应地，拖拽列的宽度也会相应减小
            currentWidth -= revise;

            colsWidth[ index ] = currentWidth;

            // 重新绘制每一列
            me._resetColumns();
            
            // 清除拖拽向全局绑定的事件
            document.onmousemove = null;
            document.onmouseup = null;
            
            me._isDraging = false;
            me._hideDragMark();
            
            baidu.event.preventDefault( e );
            return false;
        };
    },
    
    /**
     * 绘制表格主体
     * 
     * @private
     */
    _renderBody: function () {
        var me      = this,
            type    = 'body',
            id      = me.__getId( type ),
            list    = baidu.g( id ),
            style;
            
        if ( !list ) {
            list = document.createElement( 'div' );
            list.id = id;
            list.className = me.__getClass( type );
            
            // 如果设置了表格体高度
            // 表格需要出现横向滚动条
            if ( me.bodyHeight ) {
                style = list.style;
                style.height = me.bodyHeight + 'px';
                style.overflowX = 'hidden';
                style.overflowY = 'auto';
            }
            me.main.appendChild( list );
        }

        list.style.width = me._width + 'px';
        list.innerHTML   = me._getBodyHtml();
    },
    
    /**
     * 获取表格主体的html
     * 
     * @private
     * @return {string}
     */
    _getBodyHtml: function () {
        var data    = this.datasource || [],
            dataLen = data.length,
            html    = [],
            i, j, item, field;
        
        if ( !dataLen ) {
            return this.noDataHtml;
        }
        
        for ( i = 0; i < dataLen; i++ ) {
            item = data[ i ];
            html[ i ] = this._getRowHtml( item, i );
        }
        
        return html.join( '' );
    },
    
    _tplRowPrefix: '<div id="{0}" class="{1}" onmouseover="{2}" onmouseout="{3}" onclick="{4}">',
    
    /**
     * 获取表格体的单元格id
     * 
     * @private
     * @param {number} rowIndex 当前行序号
     * @param {number} fieldIndex 当前字段序号
     * @return {string}
     */
    _getBodyCellId: function ( rowIndex, fieldIndex ) {
        return this.__getId( 'cell' ) + rowIndex + "_" + fieldIndex;
    },
    
    /**
     * 获取表格行的html
     * 
     * @private
     * @param {Object} data 当前行的数据
     * @param {number} index 当前行的序号
     * @return {string}
     */
    _getRowHtml: function ( data, index ) {
        var me = this,
            html = [],
            tdCellClass     = me.__getClass( 'cell' ),
            tdBreakClass    = me.__getClass( 'cell-break' ),
            tdTextClass     = me.__getClass( 'cell-text' ),
            fields          = me._fields,
            fieldLen        = fields.length,
            cellClass,
            colWidth,
            content,
            tdClass,
            textClass,
            alignClass,
            sortClass,
            subrow = me.subrow && me.subrow != 'false',
            subentry,
            subentryHtml,
            contentText,
            contentHtml,
            editable,
            field,
            i;
            
        html.push(
            esui.util.format(
                me._tplRowPrefix,
                me.__getId( 'row' ) + index,
                me.__getClass( 'row' ) + ' ' 
                    + me.__getClass( 'row-' + ((index % 2) ? 'odd' : 'even') ),
                me.__getStrCall( '_rowOverHandler', index ),
                me.__getStrCall( '_rowOutHandler', index ),
                ( me.selectMode == 'line' ? me.__getStrCall( '_rowClickHandler', index ) : '' )
            ),
            esui.util.format( me._tplTablePrefix, '100%', me.id ) );//me._totalWidth - 2

        for ( i = 0; i < fieldLen; i++ ) {
            tdClass     = [ tdCellClass ];
            textClass   = [ tdTextClass ];
            field       = fields[ i ];
            content     = field.content;
            colWidth    = me._colsWidth[ i ];
            subentry    = subrow && field.subEntry;
            editable    = me.editable && field.editable && field.edittype;
            
            // 生成可换行列的样式
            if ( esui.Table.BREAK_LINE 
                 || me.breakLine 
                 || field.breakLine
            ) {
                tdClass.push( tdBreakClass );
            }
            
            // 表格可编辑的样式
            if ( editable ) {
                textClass.push( me.__getClass( 'cell-editable' ) );
            }

            // 生成选择列的样式
            if ( field.select ) {
                textClass.push( me.__getClass( 'cell-sel' ) );
            }
            
            // 计算表格对齐样式
            if ( field.align ) {
                tdClass.push( me.__getClass( 'cell-align-' + field.align ) );
            }
            
            // 计算表格排序样式
            sortClass = ''
            if ( field.field && field.field == me.orderBy ) {
                tdClass.push( me.__getClass( 'cell-sorted' ) );
            }


            // 构造内容html
            contentText = ('function' == typeof content
                    ? content.call( me, data, index, i , textClass)
                    : ( content in data
                    ? typeof data[ content ] === 'string'
                            ? data[ content ] || '-'
                            : data[ content ]
                    : '-')
            );
            contentHtml = '<div class="' + textClass.join( ' ' ) + '">'
                            + contentText
                            + me._getEditEntryHtml( field, index, i )
                            + '</div>';

            subentryHtml = '&nbsp;';
            if ( subentry ) {
                if ( typeof field.isSubEntryShow != 'function'
                     || field.isSubEntryShow.call( me, data, index, i ) !== false
                ) {
                    subentryHtml = me._getSubEntryHtml( index );
                }
                
                tdClass.push( me.__getClass( 'subentryfield' ) );
                contentHtml = '<table width="100%" collpadding="0" collspacing="0">'
                                + '<tr><td width="' + me.subEntryWidth + '" align="right">' + subentryHtml
                                + '</td><td>' + contentHtml + '</td></tr></table>';
            }
            html.push('<td id="' + me._getBodyCellId( index, i ) + '"',
                    'class="' + tdClass.join( ' ' )  + '"',
                    ' style="width:' + ( colWidth + me.rowWidthOffset ) + 'px;',
                    ( colWidth ? '' : 'display:none' ),
                    '" controlTable="' + me.id,
                    '" row="' + index + '" col="' + i + '">',
                    contentHtml,
                    '</td>');
        }
        html.push( '</tr></table></div>' );
        
        // 子行html
        if ( subrow ) {
            html.push( me._getSubrowHtml( index ) );
        }
        
        return html.join( '' );
    },
    
    /**
     * 获取编辑入口元素的html
     *
     * @private
     * @param {Object} field 列配置信息
     * @param {number} rowIndex 行序号
     * @param {number} columnIndex 列序号
     * @return {string}
     */
    _getEditEntryHtml: function ( field, rowIndex, columnIndex ) {
        var edittype = field.edittype;
        if ( this.editable && field.editable && edittype ) {
            return '<div class="' + this.__getClass( 'cell-editentry' ) + '" onclick="' 
                        + this.__getStrCall( 'startEdit', edittype, rowIndex, columnIndex ) 
                        + '"></div>'
        }
        return '';
    },

    /**
     * 表格行鼠标移上的事件handler
     * 
     * @private
     * @param {number} index 表格行序号
     */
    _rowOverHandler: function ( index ) {
        if ( this._isDraging ) {
            return;
        }
        
        var row = this._getRow( index );
        if ( row ) {
            baidu.addClass( row, this.__getClass( 'row-hover' ) );
        }
    },
    
    /**
     * 表格行鼠标移出的事件handler
     * 
     * @private
     * @param {number} index 表格行序号
     */
    _rowOutHandler: function ( index ) {
        var row = this._getRow( index );
        if ( row ) {
            baidu.removeClass( row, this.__getClass( 'row-hover' ) );
        }
    },
    
    /**
     * 阻止行选，用于点击在行的其他元素，不希望被行选时。
     * 
     * @public
     */
    preventLineSelect: function () {
        this._dontSelectLine = 1;
    },
    
    /**
     * 表格行鼠标点击的事件handler
     * 
     * @private
     * @param {number} index 表格行序号
     */
    _rowClickHandler: function ( index ) {
        if ( this.selectMode == 'line' ) {
            if ( this._dontSelectLine ) {
                this._dontSelectLine = false;
                return;
            }
            
            var input;
            
            switch ( this.select ) {
            case 'multi':
                input = baidu.g( this.__getId( 'multiSelect' ) + index );
                // 如果点击的是checkbox，则不做checkbox反向处理
                if ( !esui.util.hasValue( this._preSelectIndex ) ) {
                    input.checked = !input.checked;
                }
                this._selectMulti( index );
                this._preSelectIndex = null;
                break;

            case 'single':
                input = baidu.g( this.__getId( 'singleSelect' ) + index );
                input.checked = true;
                this._selectSingle( index );
                break;
            }
        }
    },
    
    /**
     * subrow入口的html模板
     * 
     * @private
     */
    tplSubEntry: '<div class="{0}" onmouseover="{2}" onmouseout="{3}" onclick="{4}" id="{1}" title="{5}"></div>',
    
    /**
     * 获取子内容区域入口的html
     *
     * @private
     * @return {string}
     */
    _getSubEntryHtml: function( index ) {
        var me = this;
        return esui.util.format(
            me.tplSubEntry,
            me.__getClass( 'subentry' ),
            me._getSubentryId( index ),
            me.__getStrCall( '_entryOver', index ),
            me.__getStrCall( '_entryOut', index ),
            me.__getStrCall( 'fireSubrow', index ),
            me.subEntryOpenTip
        );
    },
    
    /**
     * 获取子内容区域的html
     *
     * @private
     * @return {string}
     */
    _getSubrowHtml: function ( index ) {
        return '<div id="' + this._getSubrowId( index )
                    + '" class="' + this.__getClass( 'subrow' ) + '"'
                    + ' style="display:none"></div>';
    },
    
    /**
     * 获取表格子行的元素
     *
     * @public
     * @param {number} index 行序号
     * @return {HTMLElement}
     */
    getSubrow: function ( index ) {
        return baidu.g( this._getSubrowId( index ) );    
    },
    
    /**
     * 获取表格子行的元素id
     *
     * @private
     * @param {number} index 行序号
     * @return {string}
     */
    _getSubrowId: function ( index ) {
        return this.__getId( 'subrow' ) + index;
    },
    
    /**
     * 获取表格子行入口元素的id
     *
     * @private
     * @param {number} index 行序号
     * @return {string}
     */
    _getSubentryId: function ( index ) {
        return this.__getId( 'subentry' ) + index;
    },
    
    /**
     * 处理子行入口元素鼠标移入的行为
     *
     * @private
     * @param {number} index 入口元素的序号
     */
    _entryOver: function ( index ) {
        var el          = baidu.g( this._getSubentryId( index ) ),
            opened      = /subentry-opened/.test( el.className ),
            classBase   = 'subentry-hover';
            
        if ( opened ) {
            classBase = 'subentry-opened-hover';
        }    
        
        baidu.addClass( el, this.__getClass( classBase ) );
    },
    
    /**
     * 处理子行入口元素鼠标移出的行为
     *
     * @private
     * @param {number} index 入口元素的序号
     */
    _entryOut: function ( index ) {
        var id = this._getSubentryId( index );
        baidu.removeClass( id, this.__getClass( 'subentry-hover' ) );
        baidu.removeClass( id, this.__getClass( 'subentry-opened-hover') );
    },
    
    /**
     * 触发subrow的打开|关闭
     *
     * @public
     * @param {number} index 入口元素的序号
     */
    fireSubrow: function ( index ) {
        var me              = this,
            entryId         = me._getSubentryId( index ),
            datasource      = me.datasource,
            dataLen         = (datasource instanceof Array && datasource.length),
            dataItem;
        
        if ( !dataLen || index >= dataLen ) {
            return;
        }
        
        if ( !baidu.g( entryId ).getAttribute( 'data-subrowopened' ) ) {
            dataItem = datasource[ index ];
            if ( me.onsubrowopen( index, dataItem ) !== false ) {
                me.openSubrow( index );
            }
        } else {
            me._closeSubrow( index );
        }
        
        me._entryOver( index );
    },
    
    /**
     * 关闭子行
     *
     * @private
     * @param {number} index 子行的序号
     */
    _closeSubrow: function ( index ) {
        var me          = this,
            entry       = baidu.g( me._getSubentryId( index ) );
        
        if ( me.onsubrowclose( index, me.datasource[ index ] ) !== false ) {
            me._entryOut( index );
            me._subrowIndex = null;
            
            baidu.removeClass( entry, me.__getClass( 'subentry-opened' ) );
            baidu.removeClass( me._getRow( index ), me.__getClass( 'row-unfolded') );
            
            entry.setAttribute( 'title', me.subEntryOpenTip );
            entry.setAttribute( 'data-subrowopened', '' );
            
            baidu.hide( me._getSubrowId( index ) );
            return true;
        }
        
        return false;
    },
    
    onsubrowopen: new Function(),
    onsubrowclose: new Function(),
    
    /**
     * 打开子行
     *
     * @private
     * @param {number} index 子行的序号
     */
    openSubrow: function ( index ) {
        var me           = this,
            currentIndex = me._subrowIndex,
            entry        = baidu.g( me._getSubentryId( index ) ),
            closeSuccess = 1;
        
        if ( esui.util.hasValue( currentIndex ) ) {
            closeSuccess = me._closeSubrow( currentIndex );
        }
        
        if ( !closeSuccess ) {
            return;
        }

        baidu.addClass( entry, me.__getClass( 'subentry-opened' ) );
        baidu.addClass( me._getRow( index ), me.__getClass( 'row-unfolded' ) );
        entry.setAttribute( 'title', me.subEntryCloseTip );
        entry.setAttribute( 'data-subrowopened', '1' );
        
        baidu.show( me._getSubrowId( index ) );
        
        me.subrowMutex && ( me._subrowIndex = index );
    },
    
    /**
     * 初始化resize的event handler
     * 
     * @private
     */
    _initResizeHandler: function () {
        var me        = this;
        me.viewWidth  = baidu.page.getViewWidth();
        me.viewHeight = baidu.page.getViewHeight();
        
        me._resizeHandler = function () {
            var viewWidth  = baidu.page.getViewWidth(),
                viewHeight = baidu.page.getViewHeight();
                
            if ( viewWidth == me.viewWidth
                 && viewHeight == me.viewHeight
            ) {
                return;
            }
            
            me.viewWidth = viewWidth;
            me.viewHeight = viewHeight;
            me._handleResize();
        };

        // 在dispose的时候会释放的哈
        baidu.on( window, 'resize', me._resizeHandler );
    },
    
    /**
     * 浏览器resize的处理
     *
     * @private
     */
    _handleResize: function () {
        var me      = this,
            head    = me.getHead(),
            foot    = me.getFoot(),
            walker,
            widthStr,
            i;

        me._width = me._getWidth();
        widthStr = me._width + 'px';
        
        // 设置主区域宽度
        me.main.style.width = widthStr;
        me.getBody().style.width = widthStr;
        head && (head.style.width = widthStr);
        foot && (foot.style.width = widthStr);
        
        // 重新绘制每一列  
        me._initColsWidth();
        me._resetColumns();    
        if ( me.followHead ) {
            walker  = me.main.parentNode.firstChild;
            i       = 0;
            while ( walker ) {
                if ( walker.nodeType == 1
                     && walker.getAttribute( 'followThead' )
                ) {
                    walker.style.width = me._width - me._followWidthArr[ i++ ] + 'px';
                }

                walker = walker.nextSibling;
            }
        }    

        me._topReseter && me._topReseter();
    },
    
    /**
     * 纵向锁定初始化
     *
     * @private
     */
    _initTopResetHandler : function() {
        if ( !this.followHead ) {
            return;
        }

        var me = this,
            walker           = me.main.parentNode.firstChild,
            domHead          = me.getHead(),
            followWidths     = me._followWidthArr,
            placeHolderId    = me.__getId( 'TopPlaceholder' ),
            domPlaceholder   = document.createElement( 'div' ),
            i, len, fWidth, temp;
        
        // 占位元素
        // 否则元素浮动后原位置空了将导致页面高度减少，影响滚动条  
        domPlaceholder.id = placeHolderId;
        domPlaceholder.style.width = '100%';
        domPlaceholder.style.display = 'none';

        baidu.dom.insertBefore( domPlaceholder, me.main );
        domPlaceholder = null;
        
        // 写入表头跟随元素的宽度样式
        for ( i = 0, len = me._followDoms.length; i < len; i++ ) {
            me._followDoms[ i ].style.width = me._width - followWidths[ i ] + 'px';
        }
        domHead && ( domHead.style.width = me._width + 'px' );
                
        me._topReseter = function () {
            var scrollTop   = baidu.page.getScrollTop(), 
                fhArr       = me._followHeightArr,
                fhLen       = fhArr.length, 
                posStyle    = '',
                followDoms  = me._followDoms,
                len         = followDoms.length,
                placeHolder = baidu.g( placeHolderId ),
                i = 0, 
                posTop;
            
            function setPos( dom, pos, top ) {
                if ( dom ) {
                    dom.style.top = top + 'px';
                    dom.style.position = pos;
                }
            }

            // 2x2的判断，真恶心
            if ( baidu.ie && baidu.ie < 7 ) {
                if ( scrollTop > me._followTop ) {
                    posStyle = 'absolute';
                    placeHolder.style.height = fhArr[ fhLen - 1 ] + domHead.offsetHeight + 'px';
                    placeHolder.style.display = '';
                    for ( ; i < len; i++ ) {
                        setPos( followDoms[ i ], posStyle, fhArr[ i ] + scrollTop );
                    }

                    setPos( domHead, posStyle, fhArr[ fhLen - 1 ] + scrollTop );
                } else {
                    placeHolder.style.height  = 0;
                    placeHolder.style.display = 'none';
                    posStyle = '';
                    
                    for ( ; i < len; i++ ) {
                        setPos( followDoms[i], posStyle, 0 );
                    }

                    setPos( domHead, posStyle, 0 );
                }
            } else {
                if ( scrollTop > me._followTop ) {
                    placeHolder.style.height = fhArr[ fhLen - 1 ] + domHead.offsetHeight + 'px';
                    placeHolder.style.display = '';
                    posStyle = 'fixed';
                        
                    for ( ; i < len; i++ ) {
                        setPos( followDoms[ i ], posStyle, fhArr[ i ] );
                    }

                    setPos( domHead, posStyle, fhArr[ fhLen - 1 ] );
                } else {
                    placeHolder.style.height  = 0;
                    placeHolder.style.display = 'none';
                    posStyle = '';
                    
                    for ( ; i < len; i++) {
                        setPos( followDoms[i], posStyle, 0 );
                    }

                    setPos( domHead, posStyle, 0 );
                }
            }
            
        };
        baidu.on( window, 'scroll', me._topReseter );    
    },
    
    /**
     * 重新设置表格每个单元格的宽度
     * 
     * @private
     */
    _resetColumns: function () {
        var me          = this,
            datasource  = me.datasource || [],
            colsWidth   = me._colsWidth,
            foot        = me.foot,
            id          = me.id,
            len         = foot instanceof Array && foot.length,
            dLen        = datasource.length,
            tds         = me.getBody().getElementsByTagName( 'td' ),
            tables      = me.main.getElementsByTagName( 'table' ),
            tdsLen      = tds.length,
            index       = 0,
            td,
            width, 
            i, 
            j,
            colIndex,
            item,
            colspan;
        
        // 重新设置表格尾的每列宽度
        if ( len ) {
            colIndex = 0;
            for ( i = 0; i < len; i++ ) {
                item    = foot[ i ];
                width   = colsWidth[ colIndex ];
                colspan = item.colspan || 1;

                for ( j = 1; j < colspan; j++ ) {
                    width += colsWidth[ colIndex + j ];
                }
                colIndex += colspan;

                td = baidu.g( me._getFootCellId( i ) );
                width = Math.max( width + me.rowWidthOffset, 0 );
                
                td.style.width      = width + 'px';
                td.style.display    = width ? '' : 'none';
            }
        }

        // 重新设置表格头的每列宽度
        len = colsWidth.length;
        if ( !me.noHead ) {
            for ( i = 0; i < len; i++ ) {
                width = Math.max( colsWidth[ i ] + me.rowWidthOffset, 0 );

                td = baidu.g( me._getTitleCellId( i ) );
                td.style.width      = width + 'px';
                td.style.display    = width ? '' : 'none';
            }
        }

        // 重新设置表格体的每列宽度
        j = 0;
        for ( i = 0; i < tdsLen; i++ ) {
            td = tds[ i ];
            if ( td.getAttribute( 'controlTable' ) == id ) {
                width = Math.max( colsWidth[ j % len ] + me.rowWidthOffset, 0 );
                td.style.width = width + 'px';
                td.style.display = width ? '' : 'none';
                j++;
            }
        }
    },
    
    /**
     * 第一列的多选框
     * 
     * @private
     */
    FIELD_MULTI_SELECT: {
        width       : 30,
        stable      : true,
        select      : true,
        title       : function () {
            return '<input type="checkbox" id="' 
                    + this.__getId( 'selectAll' ) 
                    + '" onclick="' 
                    + this.__getStrCall( '_toggleSelectAll' ) 
                    + '">';
        },
        
        content: function ( item, index ) {
            return '<input type="checkbox" id="' 
                    + this.__getId( 'multiSelect' ) + index
                    + '" onclick="' + this.__getStrCall( '_rowCheckboxClick', index ) + '">';
        }
    },
    
    /**
     * 第一列的单选框
     * 
     * @private
     */
    FIELD_SINGLE_SELECT: {
        width   : 30,
        stable  : true,
        title   : '&nbsp;',
        select  : true,
        content : function ( item, index ) {
            var id = this.__getId( 'singleSelect' );

            return '<input type="radio" id="' 
                    + id + index
                    + '" name=' + id + ' onclick="' 
                    + this.__getStrCall( '_selectSingle', index ) 
                    + '">';
        }
    },
    
    /**
     * 行的checkbox点击处理函数
     * 
     * @private
     */
    _rowCheckboxClick: function ( index ) {
        if ( this.selectMode != 'line' ) {
            this._selectMulti( index );
        } else {
            this._preSelectIndex = index;
        }
    },
    
    /**
     * 根据checkbox是否全部选中，更新头部以及body的checkbox状态
     * 
     * @private
     * @param {number} index 需要更新的body中checkbox行，不传则更新全部
     */
    _selectMulti: function ( index ) {
        var me = this,
            inputs          = me.getBody().getElementsByTagName( 'input' ),
            i               = 0,
            currentIndex    = 0,
            allChecked      = true,
            len             = inputs.length,
            selectAll       = me._getHeadCheckbox(),
            selected        = [],
            selectedClass   = me.__getClass( 'row-selected' ),
            cbIdPrefix      = me.__getId( 'multiSelect' ),
            updateAll       = !esui.util.hasValue( index ),
            input, inputId, row;
           
        for ( ; i < len; i++ ) {
            input   = inputs[ i ];
            inputId = input.id;

            if ( input.getAttribute( 'type' ) == 'checkbox' 
                 && inputId 
                 && inputId.indexOf( cbIdPrefix ) >= 0
            ) {
                // row = me.getRow(currentIndex); // faster
                if ( updateAll ) {
                    row = input.parentNode;
                    while ( 1 ) {
                        if ( row.tagName == 'DIV' // faster
                             && /^ui-table-row/.test( row.className )
                        ) {
                            break;
                        }
                        row = row.parentNode;
                    }
                }

                if ( !input.checked ) {
                    allChecked = false;
                    // faster
                    updateAll && baidu.removeClass( row, selectedClass ); 
                } else {
                    selected.push( currentIndex );
                    // faster
                    updateAll && baidu.addClass( row, selectedClass );
                }
                currentIndex++;
            }
        }
        

        this.onselect( selected );
        if ( !updateAll ) {
            row = me._getRow( index );
            input = baidu.g( cbIdPrefix + index );
            if ( input.checked ) {
                baidu.addClass( row, selectedClass );
            } else {
                baidu.removeClass( row, selectedClass );
            }
        }

        selectAll.checked = allChecked;
    },
    
    /**
     * 全选/不选 所有的checkbox表单
     * 
     * @private
     */
    _toggleSelectAll: function () {
        this._selectAll( this._getHeadCheckbox().checked );
    },
    
    /**
     * 更新所有checkbox的选择状态
     * 
     * @private
     * @param {boolean} checked 是否选中
     */
    _selectAll: function ( checked ) {
        var inputs          = this.getBody().getElementsByTagName( 'input' ),
            len             = inputs.length,
            i               = 0,
            index           = 0,
            selected        = [],
            selectedClass   = this.__getClass( 'row-selected' ),
            cbIdPrefix      = this.__getId( 'multiSelect' ),
            input, inputId;
            
        for ( ; i < len; i++ ) {
            input = inputs[ i ];
            inputId = input.id;

            if ( input.getAttribute( 'type' ) == 'checkbox' 
                 && inputId 
                 && inputId.indexOf( cbIdPrefix ) >= 0
            ) {
                inputs[ i ].checked = checked;
                
                if ( checked ) {
                    selected.push( index );
                    baidu.addClass( this._getRow( index ), selectedClass );
                } else {
                    baidu.removeClass( this._getRow( index ), selectedClass );
                }
                
                index ++;
            }
        }
        
        this.onselect( selected );
    },
    
    /**
     * 单选选取
     * 
     * @private
     * @param {number} index 选取的序号
     */
    _selectSingle: function ( index ) {
        var selectedClass = this.__getClass( 'row-selected' ),
            selectedIndex = this._selectedIndex;
        
        if (this.onselect(index)) {
            if ( 'number' == typeof selectedIndex ) {
                baidu.removeClass( this._getRow( selectedIndex ), selectedClass );
            }
            
            this._selectedIndex = index;
            baidu.addClass( this._getRow( index ), selectedClass );
        }
    },
    
    /**
     * 重置表头样式
     * 
     * @private
     */
    resetHeadStyle: function () {
        var ths = this.getHead().getElementsByTagName( 'th' ),
            len = ths.length,
            th;
            
        while ( len-- ) {
            th = ths[ len ];
            baidu.removeClass( th.firstChild, this.__getClass( 'thcell_sort' ) );
        }    
    },
    
    /**
     * 更新视图
     *
     * @public
     */
    refreshView: function () {
        this._caching();
        this._handleResize();
    },
    
    onedit: new Function(),

    /**
     * 启动编辑功能
     * 
     * @public
     * @param {string}      type        编辑器类型
     * @param {number}      rowIndex    行序号
     * @param {number}      columnIndex 列序号
     */
    startEdit: function ( type, rowIndex, columnIndex ) {
        if ( this.editable ) {
            var entrance    = baidu.g( this._getBodyCellId( rowIndex, columnIndex ) );
            var tlOffset    = -5;
            var pos         = baidu.dom.getPosition( entrance );
            var field       = this._fields[ columnIndex ];
            
            this._currentEditor = esui.Table.EditorManager.startEdit( this, type, {
                left        : pos.left + tlOffset,
                top         : pos.top + tlOffset,
                rowIndex    : rowIndex,
                columnIndex : columnIndex,
                field       : field,
                value       : this.datasource[ rowIndex ][ field.field ]
            } );
        }
    },
    
    /**
     * 停止编辑功能
     * 
     * @public
     */
    stopEdit: function () {
        if ( this._currentEditor ) {
            this._currentEditor.stop();
            this._currentEditor = null;
        }
    },

    /**
     * 设置单元格的文字
     *
     * @public
     * @param {string} text 要设置的文字
     * @param {string} rowIndex 行序号
     * @param {string} columnIndex 列序号
     * @param {boolean} opt_isEncodeHtml 是否需要进行html转义
     */
    setCellText: function ( text, rowIndex, columnIndex, opt_isEncodeHtml ) {
        if ( opt_isEncodeHtml ) {
            text = baidu.encodeHTML( text );
        }

        text += this._getEditEntryHtml( this._fields[ columnIndex ], rowIndex, columnIndex );
        baidu.g( this._getBodyCellId( rowIndex, columnIndex ) ).firstChild.innerHTML = text;
    },

    /**
     * 释放控件
     * 
     * @private
     */
    __dispose: function () {
        var head = baidu.g( this.__getId('head') ),
            mark = baidu.g( this.__getId('dragMark') );

        if ( head ) {
            head.onmousemove = null;
            head.onmousedown = null;
        }
        
        // 释放表头跟随的元素引用
        this._followDoms = null;
        
        // 停止编辑功能
        this.stopEdit();

        // 移除拖拽基准线
        if ( mark ) {
            document.body.removeChild( mark );
        }

        esui.Control.prototype.__dispose.call( this );
        
        // remove resize事件listener
        if ( this._resizeHandler ) {
            baidu.un( window, 'resize', this._resizeHandler );
            this._resizeHandler = null;
        }

        // remove scroll事件listener
        if ( this._topReseter ) {
            baidu.un( window, 'scroll', this._topReseter );
            this._topReseter = null;
        }
    }
};

baidu.inherits( esui.Table, esui.Control );

/**
 * 表格内容编辑功能的管理器
 *
 * @class
 */
esui.Table.EditorManager = function () {
    var editorMap = {};
    var currentEditor;

    return {
        /**
         * 添加编辑器
         *
         * @public
         * @param {string} type 编辑器类型
         * @param {Object} editor 编辑器对象
         */
        add: function (type, editor) {
            editorMap[type] = editor;
        },
        
        /**
         * 移除编辑器
         *
         * @public
         * @param {string} type 编辑器类型
         */
        remove: function (type) {
            delete editorMap[type];
        },
        
        /**
         * 启动编辑功能
         *
         * @public
         * @param {Object} control 控件对象
         * @param {string} type 编辑器类型
         * @param {Object} options 启动参数表
         */
        startEdit: function (control, type, options) {
            var editor = editorMap[type];
            if (editor) {
                editor.start(control, options);
            }

            return editor;
        }
    };
}();

/**
 * 表格内容编辑器
 *
 * @public
 * @class
 */
esui.Table.Editor = function (options) {
    this.type = 'null';

    for ( var key in options ) {
        this[key] = options[key];
    }

    this.okId = '_ctrlTableEditorOk' + this.type;
    this.cancelId = '_ctrlTableEditorCancel' + this.type;
    this.errorId = '_ctrlTableEditorError' + this.type;
};

esui.Table.Editor.OK_TEXT     = '确定';
esui.Table.Editor.CANCEL_TEXT = '取消';
esui.Table.Editor.prototype   = {
    _idPrefix: '__table_editor__',
    
    /**
     * 浮层内容的模板
     *
     * @public
     */
    tpl: '<div ui="id:{0};type:Button;skin:em">{2}</div><div ui="id:{1};type:Button;">{3}</div>',
    
    /**
     * 初始化表格内容编辑器
     *
     * @public
     */
    init: function () {
        if ( !this._isInit ) {
            var layer = esui.util.create( 'Layer', {
                id: this._idPrefix + this.type,
                retype: 'table-editor ui-table-editor-' + this.type
            } );
            layer.appendTo();
            this.layer = layer;
            
            this.initLayer();
            this._isInit = 1;
        }
    },
    
    /**
     * 初始化编辑器浮层
     *
     * @public
     */
    initLayer: function () {
        this.fillLayer();
        var controlMap = this.initLayerControl();
        this.initButton( controlMap );
    },
    
    /**
     * 初始化浮层的控件
     *
     * @public
     * @return {Object} 初始化的控件集合
     */
    initLayerControl: function () {
        return esui.util.init( this.layer.main );
    },
    
    /**
     * 填充浮层的内容
     *
     * @public
     * @param {Array} extraArgs 浮层模板附加参数
     */
    fillLayer: function ( extraArgs ) {
        extraArgs = extraArgs || [];

        var layerMain = this.layer.main;
        var tpl = this.tpl;

        extraArgs.unshift(
            tpl, 
            this.okId,
            this.cancelId, 
            esui.Table.Editor.OK_TEXT, 
            esui.Table.Editor.CANCEL_TEXT,
            this.errorId );

        layerMain.innerHTML = esui.util.format.apply( window, extraArgs );
    },
    
    /**
     * 初始化浮层的确定和取消按钮行为
     *
     * @public
     * @param {Object} controlMap 初始化的控件集合
     */
    initButton: function ( controlMap ) {
        var okButton = controlMap[ this.okId ];
        var cancelButton = controlMap[ this.cancelId ];

        okButton.onclick = this.getOkHandler();
        cancelButton.onclick = this.getCancelHandler();

        this.okButton = okButton;
        this.cancelButton = cancelButton;

        this.setButtonDisabled( 1 );
    },
    
    /**
     * 设置按钮的disabled状态
     *
     * @public
     * @param {boolean} disabled 按钮的disabled状态
     */
    setButtonDisabled: function ( disabled ) {
        this.okButton.setDisabled( disabled );
        this.cancelButton.setDisabled( disabled );
    },

    /**
     * 获取当前编辑器所编辑的值
     *
     * @public
     * @return {Any} 
     */
    getValue: function () { return null; },
    
    /**
     * 获取确定按钮的点击行为handler
     *
     * @private
     * @return {Function} 
     */
    getOkHandler: function () {
        var me = this;
        return function () {
            me.doOk();
        };
    },

    doOk: function () {
        if ( this.currentTable.onedit(
                this.getValue(), 
                this.currentOptions, 
                this ) !== false 
        ) {
            this.stop();
        }
    },
    
    /**
     * 获取取消按钮的点击行为handler
     *
     * @private
     * @return {Function} 
     */
    getCancelHandler: function () {
        var me = this;
        return function () {
            me.stop();
        };
    },
    
    /**
     * 停止编辑功能
     *
     * @public
     */
    stop: function () {
        this.layer.hide();
        this.setButtonDisabled( 1 );
    },
    
    /**
     * 启动编辑功能
     *
     * @public
     * @param {Object} table 表格控件实例
     * @param {Object} options 启动参数表
     */
    start: function ( table, options ) {
        this.init();
        this.currentTable   = table;
        this.currentOptions = options;
        
        var left = options.left || 0;
        var top  = options.top || 0;
        
        this.unsetError();
        this.setButtonDisabled( 0 );
        this.layer.show( left, top );
        this.setValue && this.setValue( options.value, options );
    },
    
    /**
     * 暂停编辑功能
     *
     * @public
     */
    wait: function () {
        this.setButtonDisabled( 1 );
    },
    
    /**
     * 重启编辑功能
     *
     * @public
     */
    restart: function () {
        this.setButtonDisabled( 0 );
    },

    setError: function ( error ) {
        var errorEl = baidu.g( this.errorId );
        errorEl.innerHTML = error;
        baidu.show( errorEl );
    },

    unsetError: function () {
        baidu.hide( this.errorId );
    }
};

// 初始化内建表格编辑部件 - string类型
esui.Table.EditorManager.add( 'string', 
    new esui.Table.Editor( {
        /**
         * 编辑器类型
         *
         * @public
         */
        type:'string',

        /**
         * 编辑器层内容模板
         *
         * @public
         */
        tpl: '<input type="text" ui="type:TextInput;id:{5}" />'
            + '<div ui="id:{0};type:Button;skin:em">{2}</div>'
            + '<div ui="id:{1};type:Button;">{3}</div>'
            + '<div id="{4}" class="ui-table-editor-error"></div>',
        inputId: '_ctrlTableEditorStringInput',

        /**
         * 初始化编辑器浮层
         *
         * @public
         */
        initLayer: function () {
            this.fillLayer( [ this.inputId ] );
            var controlMap = this.initLayerControl();
            this.inputCtrl = controlMap[ this.inputId ];
            this.inputCtrl.onenter = this.getOkHandler();
            this.initButton( controlMap );
        },
        
        /**
         * 设置当前编辑器的值
         *
         * @public
         * @param {string} value 值内容
         */
        setValue: function ( value ) {
            this.inputCtrl.setValue( value );
        },
        
        /**
         * 获取当前编辑器所编辑的值
         *
         * @public
         * @return {string}
         */
        getValue: function () {
            return this.inputCtrl.getValue();
        },
        getOkHandler: function () {
            var me = this;

            return function () {
                var value = me.inputCtrl.getValue();
                if (me.currentOptions.field.validator) {
                    var err = me.currentOptions.field.validator.call(me.currentTable, value, me.currentTable.datasource[me.currentOptions.rowIndex]);
                    if (err) {
                        me.setError(err);
                        return;
                    }
                }

                me.doOk();
            };
        }
    }));

// 初始化内建表格编辑部件 - int类型
esui.Table.EditorManager.add( 'int', 
    new esui.Table.Editor( {
        /**
         * 编辑器类型
         *
         * @public
         */
        type:'int',

        /**
         * 编辑器层内容模板
         *
         * @public
         */
        tpl: '<input type="text" ui="type:TextInput;id:{5}" />'
            + '<div ui="id:{0};type:Button;skin:em">{2}</div>'
            + '<div ui="id:{1};type:Button;">{3}</div>'
            + '<div id="{4}" class="ui-table-editor-error"></div>',
        inputId: '_ctrlTableEditorIntInput',

        /**
         * 初始化编辑器浮层
         *
         * @public
         */
        initLayer: function () {
            this.fillLayer( [ this.inputId ] );
            var controlMap = this.initLayerControl();
            this.inputCtrl = controlMap[ this.inputId ];
            this.inputCtrl.onenter = this.getOkHandler();
            this.initButton( controlMap );
        },
        
        /**
         * 设置当前编辑器的值
         *
         * @public
         * @param {string} value 值内容
         */
        setValue: function ( value ) {
            this.inputCtrl.setValue( value );
        },
        
        /**
         * 获取当前编辑器所编辑的值
         *
         * @public
         * @return {string}
         */
        getValue: function () {
            return parseInt( this.inputCtrl.getValue(), 10 );
        },

        getOkHandler: function () {
            var me = this;

            return function () {
                var value = me.inputCtrl.getValue();
                if ( !/^-?\d+$/.test( value ) ) {
                    me.setError('请输入正确的整数，谢谢。');
                    return;
                }
                if (me.currentOptions.field.validator) {
                    var err = me.currentOptions.field.validator.call(me.currentTable, value, me.currentTable.datasource[me.currentOptions.rowIndex]);
                    if (err) {
                        me.setError(err);
                        return;
                    }
                }

                me.doOk();
            };
        }
    }));
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/TextLine.js
 * desc:    带行号的文本输入框控件
 * author:  zhouyu, erik
 */

///import esui.InputControl;
///import esui.TextInput;
///import baidu.lang.inherits;
///import baidu.string.trim;

/**
 * 带行号的文本输入框控件
 * 
 * @param {Object} options 参数
 */
esui.TextLine = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'textline';
   
    // 标识鼠标事件触发自动状态转换
    this._autoState = 0;
    
    esui.InputControl.call( this, options );

    this.number = 1;
    
    this._numberId      = this.__getId( 'number' );
    this._textId        = this.__getId( 'text' );
    this._numberInnId   = this._numberId + 'Word';

    this.__initOption( 'height', null, 'HEIGHT' );
};

esui.TextLine.HEIGHT = 200;

esui.TextLine.prototype = {
    /**
     * 渲染控件
     *
     * @public
     */
    render: function () {
        var me = this;

        if ( !me._isRendered ) {
            esui.InputControl.prototype.render.call( me );
            
            me._renderMain();
            me._refreshLine();
            me._bindEvent();
            me._isRendered = 1;
        }
        
        // 绘制宽高
        me.setWidth( me.width );
        me.setHeight( me.height );

        // 写入value
        me.setValue( me.value );
    },
    
    /**
     * 显示行号区域
     *
     * @public
     */
    showNumber: function () {
        this._numberHidden = false;
        baidu.show( this._numberEl );

        this._resetLineWidth();
        this._resetScroll();
    },
    /**
     * 隐藏行号区域
     *
     * @public
     */
    hideNumber: function () {
        this._numberHidden = true;
        baidu.hide( this._numberEl );
        
        this._resetLineWidth();
    },

    /**
     * 设置控件的高度
     *
     * @public
     * @param {number} height 高度
     */
    setHeight: function ( height ) {
        this.height = height;
        
        if ( height ) {
            this._numberEl.style.height = this.main.style.height = height + 'px';
            this._controlMap.text.setHeight( height );
        }
    },

    /**
     * 设置控件的宽度
     *
     * @public
     * @param {number} width 宽度
     */
    setWidth: function ( width ) {
        this.width = width;
        
        if ( width ) {
            this.main.style.width = width + 'px';
            this._resetLineWidth();
        }
    },
    
    /**
     * 绑定事件
     *
     * @private
     */
    _bindEvent: function(){
        var me = this;

        var text = me._getTextCtrl();
        me._lineRefresher   = me._getLineRefresher();
        me._scrollRefresher = me._getScrollReseter();

        text.onchange           = me._lineRefresher;
        text.main.onscroll      = me._scrollRefresher;
        me._numberEl.onscroll   = me._getScrollLineReseter();
    },
    
    /**
     * 获取number行滚动条位置的重置器
     *
     * @private
     * @return {Function}
     */
    _getScrollLineReseter: function () {
        var me = this;
        return function () {
            me._resetScrollByLine();
        };
    },

    /**
     * 获取滚动条位置的重置器
     *
     * @private
     * @return {Function}
     */
    _getScrollReseter: function () {
        var me = this;
        return function () {
            me._resetScroll();
        };
    },
    
    /**
     * 获取行刷新的handler
     *
     * @private
     * @return {Function}
     */
    _getLineRefresher: function () {
        var me = this;

        return function () {
            var textEl = me._getTextEl();
            me._refreshLine();

            (typeof me.onchange == 'function') && me.onchange();
        };
    },
    
    _tpl: '<div id="{0}" class="{2}"><pre style="margin:0;border:0;padding:0;">1</pre></div>'
            + '<span id="{3}" class="{4}" style="left:-10000px;position:absolute;">1</span>'
            + '<textarea ui="type:TextInput;id:{1}"></textarea>',
    

    /**
     * 绘制主区域
     *
     * @private
     */
    _renderMain: function(){
        var me              = this;
        var main            = me.main;
        var numberId        = me._numberId;
        var textId          = me._textId;
        var numberInnId     = me._numberInnId;

        var propMap = {};
        var textCtrl;

        propMap[ textId ] = {
            width   : me.width,
            height  : me.height,
            value   : me.value
        };

        main.innerHTML = esui.util.format(
            me._tpl, 
            numberId, 
            textId,
            me.__getClass( 'number' ),
            numberInnId,
            me.__getClass( 'numberinner' )
        );
        me._controlMap.text = textCtrl = esui.util.init( main, propMap )[ textId ];

        // 移除text控件的hover状态自动触发
        textCtrl.main.onmouseover = null;
        textCtrl.main.onmouseout = null;

        me._numberEl = baidu.g( numberId );
        me._numberEl.style.height = me.height + "px";

        me._numberInnEl = baidu.g( numberInnId );
    },
    
    /**
     * 重置行号，增加内容和keyup时可调用
     *
     * @private
     */
    _refreshLine: function () {
        var me      = this;
        var html    = [];
        var num     = me._getTextCtrl()
                        .getValue()
                        .split( "\n" )
                        .length;
        var i;

        if ( num != me.number ) {
            me.number = num;
            for ( i = 1; i < num + 1; i++ ) {
                html.push( i );
            }

            me._numberInnEl.innerHTML = num + 1;
            
            // chrome下节点太多性能会慢：“1<br>2”是3个节点
            // IE下设置pre的innerHTML中，\n不会换行，很奇怪
            if ( baidu.ie ) {
                me._numberEl.innerHTML = html.join( "<br>" );
            } else {
                me._numberEl.firstChild.innerHTML = html.join( "\n" );
            }
            
            me._resetLineWidth();
        }

        me._resetScroll();
    },
    
    /**
     * 重置行号区域的宽度
     *
     * @private
     */
    _resetLineWidth: function () {
        var width       = Math.max( this._numberInnEl.offsetWidth, 14 );
        var left        = width + 12;
        var textWidth   = this.width - left;
    
        this._numberEl.style.width = width + 18 + 'px';

        if ( this._numberHidden ) {
            left        = 0;
            textWidth   = this.width;
        }

        this._getTextEl().style.left = left + 'px';
        this._getTextCtrl().setWidth( textWidth );
    },

    /**
     * 获取输入框元素
     *
     * @private
     * @return {HTMLElement}
     */
    _getTextEl: function () {
        return this._getTextCtrl().main;
    },

    /**
     * 获取输入框控件
     *
     * @private
     * @return {esui.TextInput}
     */
    _getTextCtrl: function () {
        return this._controlMap.text;
    },

    /**
     * 滚动文本输入框
     */
    _resetScroll: function () {
        var me = this;
        me._numberEl.scrollTop = me._getTextEl().scrollTop;
    },
    
    /**
     * 滚动数字区域
     */
    _resetScrollByLine: function () {
        var me = this;
        me._getTextEl().scrollTop = me._numberEl.scrollTop;
    },
    
    /**
     * 增加内容
     *
     * @public
     * @param {Array} lines
     */
    addLines: function ( lines ) {
        var me      = this;
        var text    = me._controlMap.text;
        var content = lines.join( '\n' );
        var value   = me.getValue();

        if ( value.lenght > 0 ) {
            content = value + '\n' + content;
        }

        text.setValue( content );
    },
    
    /**
     * 设置内容字符串形式
     *
     * @public
     * @param {string} value
     */
    setValue: function ( value ) {
        var text = this._getTextCtrl();
        text.setValue( value );

        this._refreshLine();
    },
    
    /**
     * 获取内容字符串形式
     *
     * @public
     * @return {string}
     */
    getValue: function() {
        var text = this._getTextCtrl();
        return baidu.trim( text.getValue().replace( /\r/g, '' ) );
    },
     
    /**
     * 获取内容数组形式,去重并去除空串内容
     *
     * @public
     * @return {Array}
     */
    getValueAsArray: function () {
        var items       = this.getValue().split( '\n' );
        var len         = items.length;
        var container   = {};
        var result      = [];
        var i;
        var value;
        

        for ( i = 0; i < len; i++ ) {
            value = baidu.trim( items[ i ] );
            if ( value.length === 0 || container[ value ] ) {
                continue;
            }
            container[ value ] = 1;
            result.push( value );
        }

        return result;
    },
    
    /**
     * 释放
     * 
     * @private
     */
    __dispose: function () {
        this._numberInnerEl = null;
        if ( this._numberId ) {
            this._numberId.onscroll = null;
            this._numberId = null;
        }

        var text = this._getTextCtrl();
        text && ( text.main.onscroll = null );

        esui.InputControl.prototype.__dispose.call( this );
    }
}

baidu.inherits( esui.TextLine, esui.InputControl );
/*
 * esui (ECOM Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/Tip.js
 * desc:    提示控件
 * author:  linzhifeng, erik
 */

///import esui.Control;
///import esui.Layer;
///import esui.Button;
///import baidu.lang.inherits;
///import baidu.event.on;
///import baidu.event.un;
///import baidu.dom.getPosition;

/**
 * 提示控件
 */
esui.Tip = function () {
    var LAYER_ID = '__TipLayer',
        TITLE_ID = '__TipLayerTitle',
        CLOSE_ID = '__TipLayerClose',
        ARROW_ID = '__TipLayerArrow',
        BODY_ID  = '__TipLayerBody',
        
        TITLE_CLASS = 'ui-tip-title',
        BODY_CLASS  = 'ui-tip-body',
        ARROW_CLASS = 'ui-tip-arrow',
        
        _layer,
        _isShow,
        _hideTimeout,
        _isInit;

    /**
     * 隐藏提示区
     *
     * @inner
     */
    function _hide() {
        _layer.hide();
        _isShow = false;
        
        var layerMain = _layer.main;
        layerMain.onmouseover = null;
        layerMain.onmouseout  = null;
    }
    
    /**
     * 阻止提示区隐藏
     *
     * @inner
     */
    function _preventHide() {
        if ( _hideTimeout ) {
            clearTimeout( _hideTimeout );
            _hideTimeout = null;
        }
    }
    
    /**
     * 声明Tip的Class
     *
     * @class
     * @public
     */
    function Control( options ) {
        // 类型声明，用于生成控件子dom的id和class
        this._type = 'tip-entrance';
        
        // 标识鼠标事件触发自动状态转换
        this._autoState = 0;
        
        esui.Control.call( this, options );
        
        // 提示层的行为模式，over|click|auto
        this.mode = this.mode || 'over';

        if ( this.hideDelay ) {
            this.hideDelay = parseInt( this.hideDelay, 10 );
        }
        if ( this.disabled ) {
            this.addState( 'disabled', 1 );
        }
    }
    
    Control.prototype = {
        /**
         * 渲染控件
         *
         * @public
         */
        render: function () {
            var me = this;
            var mode = me.mode;
            var main = me.main;
            var showFunc = me._getDoShow();

            if ( !me._isRendered ) {
                esui.Control.prototype.render.call( me );
                
                switch ( mode )
                {
                case 'over':
                case 'click':
                    if ( mode == 'over' ) {
                        main.onmouseover = showFunc;
                    } else {
                        main.onclick = showFunc;
                        main.style.cursor = 'pointer';
                    }
                    if (!me.disableMouseout) {
                        main.onmouseout = me._getOutHandler();
                    }
                    break;
                case 'auto':
                    showFunc();
                    break;
                }
                
                me._isRendered = 1;
            }
        },
        
        /**
         * 获取显示提示区域的handler
         *
         * @private
         */
        _getDoShow: function () {
            var me = this;

            return function () {
                // 判断tip的可用性
                if ( me.isDisabled() ) {
                    return;
                }
                
                // 构造提示的title和content
                var title   = me.title;
                var content = me.content;
                if ( typeof title == 'function' ) {
                    title = title.call( me );
                }
                if ( typeof content == 'function' ) {
                    content = content.call( me );
                }
                
                // 显示tip
                _show( me.main, {
                    title       : title,
                    content     : content,
                    arrow       : me.arrow,
                    closeButton : me.closeButton,
                    width       : me.width,
                    disableout  : me.disableMouseout,
                    hideDelay   : me.hideDelay,
                    mode        : me.mode
                } );
            };
        },
        
        /**
         * 获取鼠标移出的handler
         *
         * @private
         */
        _getOutHandler: function () {
            var me = this;

            return function () {
                Control.hide( me.hideDelay );
            };
        }
    };
    
    // 从控件基类派生
    baidu.inherits( Control, esui.Control );
    
    /**
     * 显示提示
     *
     * @inner
     * @param {HTMLElement} entrance 入口元素
     * @param {Object}      tipInfo 提示信息
     */
    function _show( entrance, tipInfo ) {
        if ( !tipInfo || !entrance ) {
            return;
        }

        !_isInit && Control._init();
        
        // 阻止浮动层的隐藏
        if ( _isShow ) {
            _preventHide();
        }
        
        // 填入标题与内容
        baidu.g( BODY_ID ).innerHTML = tipInfo.content;
        var title = tipInfo.title;
        if ( title ) {
            baidu.g( TITLE_ID ).innerHTML = title;
            baidu.show( TITLE_ID );
        } else {
            baidu.hide( TITLE_ID );
        }

        var layerMain = _layer.main;
        var newWidth = tipInfo.width || 300;
        layerMain.style.width = newWidth + 'px';

        // 预初始化各种变量
        var arrow       = tipInfo.arrow, // 1|tr|rt|rb|br|bl|lb|lt|tl
            closeBtn    = tipInfo.closeButton,
            pos         = baidu.dom.getPosition( entrance ),
            mainLeft    = pos.left,
            mainTop     = pos.top,
            mainWidth   = entrance.offsetWidth,
            mainHeight  = entrance.offsetHeight,
            viewWidth   = baidu.page.getViewWidth(),
            viewHeight  = baidu.page.getViewHeight(),
            scrollLeft  = baidu.page.getScrollLeft(),
            scrollTop   = baidu.page.getScrollTop(),
            closeMain   = esui.util.get( CLOSE_ID ).main,
            layerWidth  = layerMain.offsetWidth,
            layerHeight = layerMain.offsetHeight,
            offsetX     = 5,
            offsetY     = 0,
            temp        = 0,
            arrowClass  = ARROW_CLASS,
            layerLeft,
            layerTop,
            tLeft,
            tRight,
            tTop,
            tBottom,
            lLeft,
            lRight,
            lTop,
            lBottom;
        
        if ( !esui.util.hasValue( arrow ) ) {
            arrow = Control.ARROW;
        }

        // Yijun
        if ( !esui.util.hasValue( closeBtn ) ) {
            closeBtn = Control.CLOSE_BUTTON;
        } else {
            closeBtn = closeBtn == 0 || closeBtn == false ? false: true;
        }
        closeMain.style.display = closeBtn ? '' : 'none';

        if ( arrow ) {
            temp    = 1;
            arrow   = String( arrow ).toLowerCase();
            offsetX = 20;
            offsetY = 14;
            tLeft   = mainLeft + mainWidth - offsetX;
            tRight  = mainLeft + offsetX - layerWidth;
            tTop    = mainTop + mainHeight + offsetY;
            tBottom = mainTop - offsetY - layerHeight;
            lLeft   = mainLeft + mainWidth + offsetX;
            lTop    = mainTop + mainHeight - offsetY;
            lBottom = mainTop + offsetY - layerHeight;
            lRight  = mainLeft - offsetX - layerWidth;

            // 计算手工设置arrow时的位置
            switch ( arrow ) {
            case 'tr':
                layerLeft = tRight;
                layerTop = tTop;
                break;
            case 'tl':
                layerLeft = tLeft;
                layerTop = tTop;
                break;
            case 'bl':
                layerLeft = tLeft;
                layerTop = tBottom;
                break;
            case 'br':
                layerLeft = tRight;
                layerTop = tBottom;
                break;
            case 'lt':
                layerLeft = lLeft;
                layerTop = lTop;
                break;
            case 'lb':
                layerLeft = lLeft;
                layerTop = lBottom;
                break;
            case 'rb':
                layerLeft = lRight;
                layerTop = lBottom;
                break;
            case 'rt':
                layerLeft = lRight;
                layerTop = lTop;
                break;
            default:
                temp = 0;
                offsetX = - offsetX;
                break;
            }
        } 
        
        // 计算自适应的位置
        if ( !temp ) {
            layerTop = mainTop + mainHeight + offsetY;
            arrow && ( arrow = 't' );
            if ( layerTop + layerHeight > viewHeight + scrollTop ) {
                if ( ( temp = mainTop - offsetY - layerHeight ) > 0 ) {
                    layerTop = temp;
                    arrow && ( arrow = 'b' );
                }
            }

            layerLeft = mainLeft + mainWidth + offsetX;
            arrow && ( arrow += 'l' );
            if ( layerLeft + layerWidth > viewWidth + scrollLeft ) {
                if ( ( temp = mainLeft - offsetX - layerWidth ) > 0 ) {
                    layerLeft = temp;
                    arrow && ( arrow = arrow.substr( 0, 1 ) + 'r' );
                }
            }
        }
    
        arrow && ( arrowClass += ' ' + ARROW_CLASS + '-' + arrow );
        baidu.g( ARROW_ID ).className = arrowClass;
        
        // 绑定浮出层行为
        if ( tipInfo.mode != 'auto' ) {
            layerMain.onmouseover = _preventHide;
            if (!tipInfo.disableout) {
                layerMain.onmouseout = _getHider( tipInfo.hideDelay );
            }
        }

        // 显示提示层
        _isShow = true;
        _layer.show( layerLeft, layerTop );
    };
    
    /**
     * 隐藏提示
     *
     * @static
     * @public
     * @param {number} delay 延迟隐藏时间
     */
    Control.hide = function ( delay ) {
        delay = delay || Control.HIDE_DELAY;
        _hideTimeout = setTimeout( _hide, delay );
    };
    
    Control.HIDE_DELAY = 300;
    
    /**
     * 显示提示
     *
     * @static
     * @public
     * @param {HTMLElement} entrance 入口元素
     * @param {Object}      tipInfo 提示信息
     */
    Control.show = _show;

    /**
     * 获取隐藏提示的函数
     *
     * @inner
     * @param {number} delay 延迟隐藏时间
     */
    function _getHider( delay ) {
        return function () {
            Control.hide( delay );
        };
    }
    
    /**
     * 初始化提示层
     *
     * @static
     * @private
     */
    Control._init = function () {
        if ( _isInit ) {
            return;
        }

        _isInit = 1;
        _layer = esui.util.create( 'Layer', {
                id      : LAYER_ID,
                retype  : 'tip',
                width   : 300
            } );
        _layer.appendTo();

        var layerMain = _layer.main,
            title = document.createElement( 'h3' ),
            body  = document.createElement( 'div' ),
            arrow = document.createElement( 'div' ),
            close = esui.util.create( 'Button', {
                id      : CLOSE_ID,
                skin    : 'layerclose'
            } );

        // 初始化提示标题
        title.id        = TITLE_ID;
        title.className = TITLE_CLASS;
        layerMain.appendChild( title );
        
        // 初始化提示体
        body.id         = BODY_ID;
        body.className  = BODY_CLASS;
        layerMain.appendChild( body );
        
        // 初始化箭头
        arrow.id = ARROW_ID;
        arrow.className = ARROW_CLASS;
        layerMain.appendChild(arrow);
        
        // 初始化关闭按钮
        close.appendTo( layerMain );
        close.onclick = _hide;
    };

    Control.ARROW = 0;
    Control.CLOSE_BUTTON = 0;
    return Control;
}();

baidu.on( window, 'load', esui.Tip._init );
/*
 * ESUI (Enterprise Simple UI)
 * Copyright 2010 Baidu Inc. All rights reserved.
 * 
 * path:    esui/TreeView.js
 * desc:    树结构显示控件
 * author:  chenjincai, linzhifeng, erik
 */


///import esui.Control;
///import baidu.lang.inherits;

/**
 * 树状控件
 * 
 * @param {Object} options 控件初始化参数
 */
esui.TreeView = function ( options ) {
    // 类型声明，用于生成控件子dom的id和class
    this._type = 'treeview';

    // 标识鼠标事件触发自动状态转换
    this._autoState = 0;

    esui.Control.call( this, options );

    // 是否点击展开的参数初始化
    this.__initOption('clickExpand', null, 'CLICK_EXPAND');
    
    // 是否选中展开的参数初始化
    this.__initOption('expandSelected', null, 'EXPAND_SELECTED');
   
    // 是否收起状态参数初始化
    this.__initOption('collapsed', null, 'COLLAPSED');
    
    // id与节点数据的内部表
    this._dataMap = {};
};

esui.TreeView.COLLAPSED = 0;

// 配置点击是否展开
esui.TreeView.CLICK_EXPAND = 1;

// 配置是否展开选中的节点
esui.TreeView.EXPAND_SELECTED = 0;

esui.TreeView.prototype = {
    /**
     * 渲染控件
     *
     * @protected
     */ 
    render: function () {
        var me = this;
        
        if ( !me._isRendered ) {
            esui.Control.prototype.render.call( me );
            me.width && (me.main.style.width = me.width + 'px');
            me._isRendered = 1;
        }

        me.main.innerHTML = me._getMainHtml();
    },
    
    /**
     * 获取主区域的html
     *
     * @private
     * @return {string}
     */
    _getMainHtml: function () {
        return this.datasource && this._getNodeHtml( this.datasource, !!this.collapsed, 0 );
    },
    
    /**
     * 获取子节点的html
     *
     * @private
     * @param {Array}   children 子列表数据
     * @param {boolean} hideChildren 是否隐藏子列表
     * @param {number}  level 当前节点层级
     * @return {string}
     */
    _getChildsHtml: function ( children, hideChildren, level ) {
        var me = this,
            htmlArr = [],
            i,
            len;

        for ( i = 0, len = children.length; i < len; i++ ) {
            htmlArr.push(
                '<li>' 
                + me._getNodeHtml( children[i], hideChildren, level + 1 ) 
                + '</li>' );
        }

        return htmlArr.join( '' );
    },

    /**
     * 节点的html模板
     * 
     * @private
     */
    _tplNode: '<div type="{0}" value="{4}" id="{2}" class="{1}" isExpanded="{8}" '
                + 'level="{9}" onclick="{10}" onmouseover="{11}" onmouseout="{12}">'
                    + '<div class="{5}" onclick="{13}">&nbsp;</div>'
                    + '<div class="{6}">&nbsp;</div>'
                    + '<div class="{7}">{3}'
                + '</div></div>',
    
    /**
     * 获取节点的html
     *
     * @private
     * @param {Object}  dataItem 数据项
     * @param {boolean} hideChildren 是否隐藏子列表
     * @param {number}  level 节点层级
     * @return {string}
     */
    _getNodeHtml: function ( dataItem, hideChildren, level ) {
        var levelNum = level;
        level = this._getLevelTag( level );

        var me = this,
            type            = dataItem.type,
            children        = me.getChildren( dataItem ),
            hasChildren     = children && children.length > 0,
            itemId          = me.getItemId( dataItem ),
            typeClass       = me.__getClass( 'node-type' ),
            iconClass       = me.__getClass( 'node-icon' ),
            clazz           = me._getNodeClass( 'node', level ),
            childClazz      = me._getNodeClass( 'children', level ),
            nodeId          = me.__getId( 'node' + itemId ),
            itemHTML        = me.getItemHtml( dataItem ),
            ref             = me.__getStrRef(),    
            childDisplay    = '',
            _hideChildren   = hideChildren,
            nodeType,
            html;
        
        
        this._dataMap[ itemId ] = dataItem;

        // 节点基础类型解析
        if ( hasChildren ) {
            nodeType = 'branch';
        } else {
            nodeType = 'leaf';
        }
        clazz += ' ' + me.__getClass( 'node-' + nodeType );
        if ( level == 'root' ) {
            _hideChildren = false;
        }
        
        // 节点用户定义类型解析
        if ( type ) {
            typeClass += ' ' + me.__getClass( 'node-type-' + type );
        }
        
        // 根据子节点数据判断当前节点和子节点的显示状态
        if ( _hideChildren ) {
            if ( hasChildren ) {
                childDisplay = ' style="display:none";';
            }
        } else {
            clazz += ' ' + me.__getClass( 'node-expanded' );
        }

        html = esui.util.format(
                me._tplNode,
                nodeType,
                clazz,
                nodeId,
                itemHTML,
                itemId,
                iconClass,
                typeClass,
                me.__getClass( 'node-text' ),
                _hideChildren ? '' : '1',
                levelNum,
                ref + '._nodeClickHandler(this)',
                ref + '._nodeOverHandler(this)',
                ref + '._nodeOutHandler(this)',
                ref + '._iconClickHandler(this)'
            );
        
        // 构造子节点的html
        if ( hasChildren ) {
            html += esui.util.format(
                '<ul id="{2}" value="{4}" class="{3}"{1}>{0}</ul>',
                me.getChildrenHtml( children, hideChildren, levelNum ),
                childDisplay,
                me.__getId( 'children' + itemId ),
                childClazz,
                itemId
            );
        }

        return html;
    },
    
    /**
     * 获取节点的样式class
     *
     * @private
     * @param {string}  part 节点的部分，node|children
     * @param {number}  level 节点层级
     * @return {string}
     */
    _getNodeClass: function( part, level ) {
        return this.__getClass( part ) + ' ' 
               + this.__getClass( part + '-' + level );
    },
    
    /**
     * 获取节点层级的文本标识
     *
     * @private
     * @param {number} level 节点层级
     * @return {string}
     */
    _getLevelTag: function ( level ) {
        if ( level === 0 ) {
            level = 'root';
        } else {
            level = "level" + level;
        }

        return level;
    },

    /**
     * 节点mouseover的handler
     *
     * @private
     */
    _nodeOverHandler: function ( node ) {
        if ( this.isDisabled() ) {
            return;
        }

        baidu.addClass( node, this.__getClass( 'node-hover' ) );
    },
    
    /**
     * 节点mouseout的handler
     *
     * @private
     */
    _nodeOutHandler: function ( node ) {
        if ( this.isDisabled() ) {
            return;
        }

        baidu.removeClass( node, this.__getClass( 'node-hover' ) );
    },
    
    /**
     * 展开图标点击的handler
     *
     * @private
     */
    _iconClickHandler: function ( iconElement ) {
        if ( this.isDisabled() ) {
            return;
        }

        var node = iconElement.parentNode;
        this._toggle( node );
        this._isPreventClick = 1;
    },
    
    /**
     * 节点点击的handler
     *
     * @private
     */
    _nodeClickHandler: function ( node ) {
        if ( this.isDisabled() ) {
            return;
        }

        var value = node.getAttribute( 'value' ),
            item  = this._dataMap[ value ];
        
        if ( !this._isPreventClick 
             && this.onchange( value, item ) !== false
         ) {
            this.select( value );
            if ( this.expandSelected ) {
                !node.getAttribute( 'isExpanded' ) && this._expand( node );
            } else if ( this.clickExpand ) {
                this._toggle( node );
            }
        }

        this._isPreventClick = 0;
    },
    
    onchange: new Function(),
    
    /**
     * 选中节点
     * 
     * @public
     * @param {string} id 节点id
     */
    select: function ( id ) {
        if ( this._selected == id ) {
            return;
        }
        
        var selectedClass = this.__getClass( 'node-selected' ),
            selectedNode = baidu.g( this.__getId( 'node' + this._selected ) );
        
        // 移除现有选中节点的样式
        selectedNode && baidu.removeClass( selectedNode, selectedClass );

        // 选择节点
        this._selected = id;
        baidu.addClass( this.__getId( 'node' + id ), selectedClass );
    },

    /**
     * 折叠展开操作
     * 
     * @private
     * @param {HTMLElement} node
     */
    _toggle: function ( node ) {
        if ( node.getAttribute( 'isExpanded' ) ) {
            this._collapse( node );
        } else {
            this._expand( node );
        }
    },
    
    /**
     * 折叠操作
     * 
     * @private
     * @param {HTMLElement} node
     */
    _collapse: function ( node ) {
        var value = node.getAttribute( 'value' );

        if ( this.oncollapse( value ) !== false ) {
            this.collapse( value );
        }
    },
    
    /**
     * 展开操作
     * 
     * @private
     * @param {HTMLElement} node
     */
    _expand: function ( node ) {
        var value = node.getAttribute( 'value' );

        if ( this.onexpand( value ) !== false ) {
            this.expand( value );
        }
    },

    oncollapse: new Function(),
    onexpand: new Function(),

    /**
     * 展开操作
     * 
     * @public
     * @param {string} id
     */
    expand: function ( id ) {
        var node        = baidu.g( this.__getId( 'node' + id ) );
        var childWrap   = baidu.g( this.__getId( 'children' + id ) );

        if ( node ) {
            node.setAttribute( 'isExpanded', '1' );
            childWrap && (childWrap.style.display = '');
            baidu.addClass( node, this.__getClass( 'node-expanded' ) );
        }
    },
    
    /**
     * 折叠操作
     *
     * @public
     * @param {string} id
     */
    collapse: function ( id ) {
        var node        = baidu.g( this.__getId( 'node' + id ) );
        var childWrap   = baidu.g( this.__getId( 'children' + id ) );
        
        if ( node ) {
            node.setAttribute( 'isExpanded', '' );
            childWrap && (childWrap.style.display = 'none');
            baidu.removeClass( node, this.__getClass( 'node-expanded' ) );
        }
    },
    
    /**
     * 重绘节点本身
     *
     * @public
     * @param {Object} dataItem
     */
    repaintNodeText: function( dataItem ) {
        var me          = this,
            itemId      = me.getItemId( dataItem ),
            itemHtml    = me.getItemHtml( dataItem ),
            nodeEl      = baidu.g( me.__getId( 'node' + itemId ) );
        
        if ( itemHtml ){
            nodeEl.lastChild.innerHTML = itemHtml;
        }
    },

    /**
     * 重绘节点及其子树
     *
     * @public
     * @param {Object} dataItem
     */    
    repaintNode: function ( dataItem ) {
        var me          = this,
            itemId      = me.getItemId( dataItem ),
            children    = me.getChildren( dataItem ),
            nodeEl      = baidu.g( me.__getId( 'node' + itemId ) ),
            childrenId  = me.__getId( 'children' + itemId ),
            childrenEl  = baidu.g( childrenId ),
            leafClass   = me.__getClass( 'node-leaf' ),
            branchClass = me.__getClass( 'node-branch' ),
            level       = parseInt( nodeEl.getAttribute( 'level' ), 10 );
        
        // 刷新节点文字
        this.repaintNodeText( dataItem );
        
        // 绘制子节点
        if ( children instanceof Array && children.length ) {
            // 创建子节点容器元素
            if ( !childrenEl ) {
                childrenEl = document.createElement( 'ul' );
                childrenEl.id = childrenId;
                childrenEl.style.display = nodeEl.getAttribute( 'isExpanded' ) ? '' : 'none';
                childrenEl.className = me._getNodeClass( 'children', this._getLevelTag( level ) );
                nodeEl.parentNode.insertBefore( childrenEl, nodeEl.nextSibling );
            }

            childrenEl.innerHTML = me.getChildrenHtml( children, 1, level );
            baidu.addClass( nodeEl, branchClass );
            baidu.removeClass( nodeEl, leafClass );
            nodeEl.setAttribute( 'type', 'branch' );
        } else {
            baidu.removeClass( nodeEl, branchClass );
            baidu.addClass( nodeEl, leafClass );
            nodeEl.setAttribute( 'type', 'leaf' );
        }
    },

    /**
     * 获取单条节点的子节点html
     *
     * @public
     * @return {Array}
     */
    getChildrenHtml: function ( children, hideChildren, level ) {
        return this._getChildsHtml( children, hideChildren, level );
    },

    /**
     * 获取单条节点的子节点数据
     *
     * @public
     * @param {Object} item 当前节点的数据项
     * @return {Array}
     */
    getChildren: function ( item ) {
        return item.children || [];
    },

    /**
     * 获取单条节点的html
     *
     * @public
     * @param {Object} item 当前节点的数据项
     * @return {Array}
     */
    getItemHtml: function ( item ) {
        return item.text;
    },
    
    /**
     * 获取单条节点的唯一id
     *
     * @public
     * @param {Object} item 当前节点的数据项
     * @return {string}
     */
    getItemId: function ( item ) {
        if ( esui.util.hasValue( item.id ) ) {
            return item.id;
        }

        return esui.util.getGUID();
    }
}

baidu.inherits( esui.TreeView, esui.Control );
/*!
 * jQuery JavaScript Library v1.8.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: Thu Sep 20 2012 21:13:05 GMT-0400 (Eastern Daylight Time)
 */
(function( window, undefined ) {
  var
  // A central reference to the root jQuery(document)
    rootjQuery,

  // The deferred used on DOM ready
    readyList,

  // Use the correct document accordingly with window argument (sandbox)
    document = window.document,
    location = window.location,
    navigator = window.navigator,

  // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,

  // Map over the $ in case of overwrite
    _$ = window.$,

  // Save a reference to some core methods
    core_push = Array.prototype.push,
    core_slice = Array.prototype.slice,
    core_indexOf = Array.prototype.indexOf,
    core_toString = Object.prototype.toString,
    core_hasOwn = Object.prototype.hasOwnProperty,
    core_trim = String.prototype.trim,

  // Define a local copy of jQuery
    jQuery = function( selector, context ) {
      // The jQuery object is actually just the init constructor 'enhanced'
      return new jQuery.fn.init( selector, context, rootjQuery );
    },

  // Used for matching numbers
    core_pnum = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,

  // Used for detecting and trimming whitespace
    core_rnotwhite = /\S/,
    core_rspace = /\s+/,

  // Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

  // A simple way to check for HTML strings
  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

  // Match a standalone tag
    rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

  // JSON RegExp
    rvalidchars = /^[\],:{}\s]*$/,
    rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
    rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
    rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,

  // Matches dashed string for camelizing
    rmsPrefix = /^-ms-/,
    rdashAlpha = /-([\da-z])/gi,

  // Used by jQuery.camelCase as callback to replace()
    fcamelCase = function( all, letter ) {
      return ( letter + "" ).toUpperCase();
    },

  // The ready event handler and self cleanup method
    DOMContentLoaded = function() {
      if ( document.addEventListener ) {
        document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
        jQuery.ready();
      } else if ( document.readyState === "complete" ) {
        // we're here because readyState === "complete" in oldIE
        // which is good enough for us to call the dom ready!
        document.detachEvent( "onreadystatechange", DOMContentLoaded );
        jQuery.ready();
      }
    },

  // [[Class]] -> type pairs
    class2type = {};

  jQuery.fn = jQuery.prototype = {
    constructor: jQuery,
    init: function( selector, context, rootjQuery ) {
      var match, elem, ret, doc;

      // Handle $(""), $(null), $(undefined), $(false)
      if ( !selector ) {
        return this;
      }

      // Handle $(DOMElement)
      if ( selector.nodeType ) {
        this.context = this[0] = selector;
        this.length = 1;
        return this;
      }

      // Handle HTML strings
      if ( typeof selector === "string" ) {
        if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
          // Assume that strings that start and end with <> are HTML and skip the regex check
          match = [ null, selector, null ];

        } else {
          match = rquickExpr.exec( selector );
        }

        // Match html or make sure no context is specified for #id
        if ( match && (match[1] || !context) ) {

          // HANDLE: $(html) -> $(array)
          if ( match[1] ) {
            context = context instanceof jQuery ? context[0] : context;
            doc = ( context && context.nodeType ? context.ownerDocument || context : document );

            // scripts is true for back-compat
            selector = jQuery.parseHTML( match[1], doc, true );
            if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
              this.attr.call( selector, context, true );
            }

            return jQuery.merge( this, selector );

            // HANDLE: $(#id)
          } else {
            elem = document.getElementById( match[2] );

            // Check parentNode to catch when Blackberry 4.6 returns
            // nodes that are no longer in the document #6963
            if ( elem && elem.parentNode ) {
              // Handle the case where IE and Opera return items
              // by name instead of ID
              if ( elem.id !== match[2] ) {
                return rootjQuery.find( selector );
              }

              // Otherwise, we inject the element directly into the jQuery object
              this.length = 1;
              this[0] = elem;
            }

            this.context = document;
            this.selector = selector;
            return this;
          }

          // HANDLE: $(expr, $(...))
        } else if ( !context || context.jquery ) {
          return ( context || rootjQuery ).find( selector );

          // HANDLE: $(expr, context)
          // (which is just equivalent to: $(context).find(expr)
        } else {
          return this.constructor( context ).find( selector );
        }

        // HANDLE: $(function)
        // Shortcut for document ready
      } else if ( jQuery.isFunction( selector ) ) {
        return rootjQuery.ready( selector );
      }

      if ( selector.selector !== undefined ) {
        this.selector = selector.selector;
        this.context = selector.context;
      }

      return jQuery.makeArray( selector, this );
    },

    // Start with an empty selector
    selector: "",

    // The current version of jQuery being used
    jquery: "1.8.2",

    // The default length of a jQuery object is 0
    length: 0,

    // The number of elements contained in the matched element set
    size: function() {
      return this.length;
    },

    toArray: function() {
      return core_slice.call( this );
    },

    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function( num ) {
      return num == null ?

        // Return a 'clean' array
        this.toArray() :

        // Return just the object
        ( num < 0 ? this[ this.length + num ] : this[ num ] );
    },

    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function( elems, name, selector ) {

      // Build a new jQuery matched element set
      var ret = jQuery.merge( this.constructor(), elems );

      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;

      ret.context = this.context;

      if ( name === "find" ) {
        ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
      } else if ( name ) {
        ret.selector = this.selector + "." + name + "(" + selector + ")";
      }

      // Return the newly-formed element set
      return ret;
    },

    // Execute a callback for every element in the matched set.
    // (You can seed the arguments with an array of args, but this is
    // only used internally.)
    each: function( callback, args ) {
      return jQuery.each( this, callback, args );
    },

    ready: function( fn ) {
      // Add the callback
      jQuery.ready.promise().done( fn );

      return this;
    },

    eq: function( i ) {
      i = +i;
      return i === -1 ?
        this.slice( i ) :
        this.slice( i, i + 1 );
    },

    first: function() {
      return this.eq( 0 );
    },

    last: function() {
      return this.eq( -1 );
    },

    slice: function() {
      return this.pushStack( core_slice.apply( this, arguments ),
        "slice", core_slice.call(arguments).join(",") );
    },

    map: function( callback ) {
      return this.pushStack( jQuery.map(this, function( elem, i ) {
        return callback.call( elem, i, elem );
      }));
    },

    end: function() {
      return this.prevObject || this.constructor(null);
    },

    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: core_push,
    sort: [].sort,
    splice: [].splice
  };

// Give the init function the jQuery prototype for later instantiation
  jQuery.fn.init.prototype = jQuery.fn;

  jQuery.extend = jQuery.fn.extend = function() {
    var options, name, src, copy, copyIsArray, clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false;

    // Handle a deep copy situation
    if ( typeof target === "boolean" ) {
      deep = target;
      target = arguments[1] || {};
      // skip the boolean and the target
      i = 2;
    }

    // Handle case when target is a string or something (possible in deep copy)
    if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
      target = {};
    }

    // extend jQuery itself if only one argument is passed
    if ( length === i ) {
      target = this;
      --i;
    }

    for ( ; i < length; i++ ) {
      // Only deal with non-null/undefined values
      if ( (options = arguments[ i ]) != null ) {
        // Extend the base object
        for ( name in options ) {
          src = target[ name ];
          copy = options[ name ];

          // Prevent never-ending loop
          if ( target === copy ) {
            continue;
          }

          // Recurse if we're merging plain objects or arrays
          if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
            if ( copyIsArray ) {
              copyIsArray = false;
              clone = src && jQuery.isArray(src) ? src : [];

            } else {
              clone = src && jQuery.isPlainObject(src) ? src : {};
            }

            // Never move original objects, clone them
            target[ name ] = jQuery.extend( deep, clone, copy );

            // Don't bring in undefined values
          } else if ( copy !== undefined ) {
            target[ name ] = copy;
          }
        }
      }
    }

    // Return the modified object
    return target;
  };

  jQuery.extend({
    noConflict: function( deep ) {
      if ( window.$ === jQuery ) {
        window.$ = _$;
      }

      if ( deep && window.jQuery === jQuery ) {
        window.jQuery = _jQuery;
      }

      return jQuery;
    },

    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,

    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,

    // Hold (or release) the ready event
    holdReady: function( hold ) {
      if ( hold ) {
        jQuery.readyWait++;
      } else {
        jQuery.ready( true );
      }
    },

    // Handle when the DOM is ready
    ready: function( wait ) {

      // Abort if there are pending holds or we're already ready
      if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
        return;
      }

      // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
      if ( !document.body ) {
        return setTimeout( jQuery.ready, 1 );
      }

      // Remember that the DOM is ready
      jQuery.isReady = true;

      // If a normal DOM Ready event fired, decrement, and wait if need be
      if ( wait !== true && --jQuery.readyWait > 0 ) {
        return;
      }

      // If there are functions bound, to execute
      readyList.resolveWith( document, [ jQuery ] );

      // Trigger any bound ready events
      if ( jQuery.fn.trigger ) {
        jQuery( document ).trigger("ready").off("ready");
      }
    },

    // See test/unit/core.js for details concerning isFunction.
    // Since version 1.3, DOM methods and functions like alert
    // aren't supported. They return false on IE (#2968).
    isFunction: function( obj ) {
      return jQuery.type(obj) === "function";
    },

    isArray: Array.isArray || function( obj ) {
      return jQuery.type(obj) === "array";
    },

    isWindow: function( obj ) {
      return obj != null && obj == obj.window;
    },

    isNumeric: function( obj ) {
      return !isNaN( parseFloat(obj) ) && isFinite( obj );
    },

    type: function( obj ) {
      return obj == null ?
        String( obj ) :
        class2type[ core_toString.call(obj) ] || "object";
    },

    isPlainObject: function( obj ) {
      // Must be an Object.
      // Because of IE, we also have to check the presence of the constructor property.
      // Make sure that DOM nodes and window objects don't pass through, as well
      if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
        return false;
      }

      try {
        // Not own constructor property must be Object
        if ( obj.constructor &&
          !core_hasOwn.call(obj, "constructor") &&
          !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
          return false;
        }
      } catch ( e ) {
        // IE8,9 Will throw exceptions on certain host objects #9897
        return false;
      }

      // Own properties are enumerated firstly, so to speed up,
      // if last one is own, then all properties are own.

      var key;
      for ( key in obj ) {}

      return key === undefined || core_hasOwn.call( obj, key );
    },

    isEmptyObject: function( obj ) {
      var name;
      for ( name in obj ) {
        return false;
      }
      return true;
    },

    error: function( msg ) {
      throw new Error( msg );
    },

    // data: string of html
    // context (optional): If specified, the fragment will be created in this context, defaults to document
    // scripts (optional): If true, will include scripts passed in the html string
    parseHTML: function( data, context, scripts ) {
      var parsed;
      if ( !data || typeof data !== "string" ) {
        return null;
      }
      if ( typeof context === "boolean" ) {
        scripts = context;
        context = 0;
      }
      context = context || document;

      // Single tag
      if ( (parsed = rsingleTag.exec( data )) ) {
        return [ context.createElement( parsed[1] ) ];
      }

      parsed = jQuery.buildFragment( [ data ], context, scripts ? null : [] );
      return jQuery.merge( [],
        (parsed.cacheable ? jQuery.clone( parsed.fragment ) : parsed.fragment).childNodes );
    },

    parseJSON: function( data ) {
      if ( !data || typeof data !== "string") {
        return null;
      }

      // Make sure leading/trailing whitespace is removed (IE can't handle it)
      data = jQuery.trim( data );

      // Attempt to parse using the native JSON parser first
      if ( window.JSON && window.JSON.parse ) {
        return window.JSON.parse( data );
      }

      // Make sure the incoming data is actual JSON
      // Logic borrowed from http://json.org/json2.js
      if ( rvalidchars.test( data.replace( rvalidescape, "@" )
        .replace( rvalidtokens, "]" )
        .replace( rvalidbraces, "")) ) {

        return ( new Function( "return " + data ) )();

      }
      jQuery.error( "Invalid JSON: " + data );
    },

    // Cross-browser xml parsing
    parseXML: function( data ) {
      var xml, tmp;
      if ( !data || typeof data !== "string" ) {
        return null;
      }
      try {
        if ( window.DOMParser ) { // Standard
          tmp = new DOMParser();
          xml = tmp.parseFromString( data , "text/xml" );
        } else { // IE
          xml = new ActiveXObject( "Microsoft.XMLDOM" );
          xml.async = "false";
          xml.loadXML( data );
        }
      } catch( e ) {
        xml = undefined;
      }
      if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
        jQuery.error( "Invalid XML: " + data );
      }
      return xml;
    },

    noop: function() {},

    // Evaluates a script in a global context
    // Workarounds based on findings by Jim Driscoll
    // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
    globalEval: function( data ) {
      if ( data && core_rnotwhite.test( data ) ) {
        // We use execScript on Internet Explorer
        // We use an anonymous function so that context is window
        // rather than jQuery in Firefox
        ( window.execScript || function( data ) {
          window[ "eval" ].call( window, data );
        } )( data );
      }
    },

    // Convert dashed to camelCase; used by the css and data modules
    // Microsoft forgot to hump their vendor prefix (#9572)
    camelCase: function( string ) {
      return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
    },

    nodeName: function( elem, name ) {
      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    },

    // args is for internal usage only
    each: function( obj, callback, args ) {
      var name,
        i = 0,
        length = obj.length,
        isObj = length === undefined || jQuery.isFunction( obj );

      if ( args ) {
        if ( isObj ) {
          for ( name in obj ) {
            if ( callback.apply( obj[ name ], args ) === false ) {
              break;
            }
          }
        } else {
          for ( ; i < length; ) {
            if ( callback.apply( obj[ i++ ], args ) === false ) {
              break;
            }
          }
        }

        // A special, fast, case for the most common use of each
      } else {
        if ( isObj ) {
          for ( name in obj ) {
            if ( callback.call( obj[ name ], name, obj[ name ] ) === false ) {
              break;
            }
          }
        } else {
          for ( ; i < length; ) {
            if ( callback.call( obj[ i ], i, obj[ i++ ] ) === false ) {
              break;
            }
          }
        }
      }

      return obj;
    },

    // Use native String.trim function wherever possible
    trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
      function( text ) {
        return text == null ?
          "" :
          core_trim.call( text );
      } :

      // Otherwise use our own trimming functionality
      function( text ) {
        return text == null ?
          "" :
          ( text + "" ).replace( rtrim, "" );
      },

    // results is for internal usage only
    makeArray: function( arr, results ) {
      var type,
        ret = results || [];

      if ( arr != null ) {
        // The window, strings (and functions) also have 'length'
        // Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
        type = jQuery.type( arr );

        if ( arr.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( arr ) ) {
          core_push.call( ret, arr );
        } else {
          jQuery.merge( ret, arr );
        }
      }

      return ret;
    },

    inArray: function( elem, arr, i ) {
      var len;

      if ( arr ) {
        if ( core_indexOf ) {
          return core_indexOf.call( arr, elem, i );
        }

        len = arr.length;
        i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

        for ( ; i < len; i++ ) {
          // Skip accessing in sparse arrays
          if ( i in arr && arr[ i ] === elem ) {
            return i;
          }
        }
      }

      return -1;
    },

    merge: function( first, second ) {
      var l = second.length,
        i = first.length,
        j = 0;

      if ( typeof l === "number" ) {
        for ( ; j < l; j++ ) {
          first[ i++ ] = second[ j ];
        }

      } else {
        while ( second[j] !== undefined ) {
          first[ i++ ] = second[ j++ ];
        }
      }

      first.length = i;

      return first;
    },

    grep: function( elems, callback, inv ) {
      var retVal,
        ret = [],
        i = 0,
        length = elems.length;
      inv = !!inv;

      // Go through the array, only saving the items
      // that pass the validator function
      for ( ; i < length; i++ ) {
        retVal = !!callback( elems[ i ], i );
        if ( inv !== retVal ) {
          ret.push( elems[ i ] );
        }
      }

      return ret;
    },

    // arg is for internal usage only
    map: function( elems, callback, arg ) {
      var value, key,
        ret = [],
        i = 0,
        length = elems.length,
      // jquery objects are treated as arrays
        isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;

      // Go through the array, translating each of the items to their
      if ( isArray ) {
        for ( ; i < length; i++ ) {
          value = callback( elems[ i ], i, arg );

          if ( value != null ) {
            ret[ ret.length ] = value;
          }
        }

        // Go through every key on the object,
      } else {
        for ( key in elems ) {
          value = callback( elems[ key ], key, arg );

          if ( value != null ) {
            ret[ ret.length ] = value;
          }
        }
      }

      // Flatten any nested arrays
      return ret.concat.apply( [], ret );
    },

    // A global GUID counter for objects
    guid: 1,

    // Bind a function to a context, optionally partially applying any
    // arguments.
    proxy: function( fn, context ) {
      var tmp, args, proxy;

      if ( typeof context === "string" ) {
        tmp = fn[ context ];
        context = fn;
        fn = tmp;
      }

      // Quick check to determine if target is callable, in the spec
      // this throws a TypeError, but we will just return undefined.
      if ( !jQuery.isFunction( fn ) ) {
        return undefined;
      }

      // Simulated bind
      args = core_slice.call( arguments, 2 );
      proxy = function() {
        return fn.apply( context, args.concat( core_slice.call( arguments ) ) );
      };

      // Set the guid of unique handler to the same of original handler, so it can be removed
      proxy.guid = fn.guid = fn.guid || jQuery.guid++;

      return proxy;
    },

    // Multifunctional method to get and set values of a collection
    // The value/s can optionally be executed if it's a function
    access: function( elems, fn, key, value, chainable, emptyGet, pass ) {
      var exec,
        bulk = key == null,
        i = 0,
        length = elems.length;

      // Sets many values
      if ( key && typeof key === "object" ) {
        for ( i in key ) {
          jQuery.access( elems, fn, i, key[i], 1, emptyGet, value );
        }
        chainable = 1;

        // Sets one value
      } else if ( value !== undefined ) {
        // Optionally, function values get executed if exec is true
        exec = pass === undefined && jQuery.isFunction( value );

        if ( bulk ) {
          // Bulk operations only iterate when executing function values
          if ( exec ) {
            exec = fn;
            fn = function( elem, key, value ) {
              return exec.call( jQuery( elem ), value );
            };

            // Otherwise they run against the entire set
          } else {
            fn.call( elems, value );
            fn = null;
          }
        }

        if ( fn ) {
          for (; i < length; i++ ) {
            fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
          }
        }

        chainable = 1;
      }

      return chainable ?
        elems :

        // Gets
        bulk ?
          fn.call( elems ) :
          length ? fn( elems[0], key ) : emptyGet;
    },

    now: function() {
      return ( new Date() ).getTime();
    }
  });

  jQuery.ready.promise = function( obj ) {
    if ( !readyList ) {

      readyList = jQuery.Deferred();

      // Catch cases where $(document).ready() is called after the browser event has already occurred.
      // we once tried to use readyState "interactive" here, but it caused issues like the one
      // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
      if ( document.readyState === "complete" ) {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        setTimeout( jQuery.ready, 1 );

        // Standards-based browsers support DOMContentLoaded
      } else if ( document.addEventListener ) {
        // Use the handy event callback
        document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

        // A fallback to window.onload, that will always work
        window.addEventListener( "load", jQuery.ready, false );

        // If IE event model is used
      } else {
        // Ensure firing before onload, maybe late but safe also for iframes
        document.attachEvent( "onreadystatechange", DOMContentLoaded );

        // A fallback to window.onload, that will always work
        window.attachEvent( "onload", jQuery.ready );

        // If IE and not a frame
        // continually check to see if the document is ready
        var top = false;

        try {
          top = window.frameElement == null && document.documentElement;
        } catch(e) {}

        if ( top && top.doScroll ) {
          (function doScrollCheck() {
            if ( !jQuery.isReady ) {

              try {
                // Use the trick by Diego Perini
                // http://javascript.nwbox.com/IEContentLoaded/
                top.doScroll("left");
              } catch(e) {
                return setTimeout( doScrollCheck, 50 );
              }

              // and execute any waiting functions
              jQuery.ready();
            }
          })();
        }
      }
    }
    return readyList.promise( obj );
  };

// Populate the class2type map
  jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
    class2type[ "[object " + name + "]" ] = name.toLowerCase();
  });

// All jQuery objects should point back to these
  rootjQuery = jQuery(document);
// String to Object options format cache
  var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
  function createOptions( options ) {
    var object = optionsCache[ options ] = {};
    jQuery.each( options.split( core_rspace ), function( _, flag ) {
      object[ flag ] = true;
    });
    return object;
  }

  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */
  jQuery.Callbacks = function( options ) {

    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ?
      ( optionsCache[ options ] || createOptions( options ) ) :
      jQuery.extend( {}, options );

    var // Last fire value (for non-forgettable lists)
      memory,
    // Flag to know if list was already fired
      fired,
    // Flag to know if list is currently firing
      firing,
    // First callback to fire (used internally by add and fireWith)
      firingStart,
    // End of the loop when firing
      firingLength,
    // Index of currently firing callback (modified by remove if needed)
      firingIndex,
    // Actual callback list
      list = [],
    // Stack of fire calls for repeatable lists
      stack = !options.once && [],
    // Fire callbacks
      fire = function( data ) {
        memory = options.memory && data;
        fired = true;
        firingIndex = firingStart || 0;
        firingStart = 0;
        firingLength = list.length;
        firing = true;
        for ( ; list && firingIndex < firingLength; firingIndex++ ) {
          if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
            memory = false; // To prevent further calls using add
            break;
          }
        }
        firing = false;
        if ( list ) {
          if ( stack ) {
            if ( stack.length ) {
              fire( stack.shift() );
            }
          } else if ( memory ) {
            list = [];
          } else {
            self.disable();
          }
        }
      },
    // Actual Callbacks object
      self = {
        // Add a callback or a collection of callbacks to the list
        add: function() {
          if ( list ) {
            // First, we save the current length
            var start = list.length;
            (function add( args ) {
              jQuery.each( args, function( _, arg ) {
                var type = jQuery.type( arg );
                if ( type === "function" && ( !options.unique || !self.has( arg ) ) ) {
                  list.push( arg );
                } else if ( arg && arg.length && type !== "string" ) {
                  // Inspect recursively
                  add( arg );
                }
              });
            })( arguments );
            // Do we need to add the callbacks to the
            // current firing batch?
            if ( firing ) {
              firingLength = list.length;
              // With memory, if we're not firing then
              // we should call right away
            } else if ( memory ) {
              firingStart = start;
              fire( memory );
            }
          }
          return this;
        },
        // Remove a callback from the list
        remove: function() {
          if ( list ) {
            jQuery.each( arguments, function( _, arg ) {
              var index;
              while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
                list.splice( index, 1 );
                // Handle firing indexes
                if ( firing ) {
                  if ( index <= firingLength ) {
                    firingLength--;
                  }
                  if ( index <= firingIndex ) {
                    firingIndex--;
                  }
                }
              }
            });
          }
          return this;
        },
        // Control if a given callback is in the list
        has: function( fn ) {
          return jQuery.inArray( fn, list ) > -1;
        },
        // Remove all callbacks from the list
        empty: function() {
          list = [];
          return this;
        },
        // Have the list do nothing anymore
        disable: function() {
          list = stack = memory = undefined;
          return this;
        },
        // Is it disabled?
        disabled: function() {
          return !list;
        },
        // Lock the list in its current state
        lock: function() {
          stack = undefined;
          if ( !memory ) {
            self.disable();
          }
          return this;
        },
        // Is it locked?
        locked: function() {
          return !stack;
        },
        // Call all callbacks with the given context and arguments
        fireWith: function( context, args ) {
          args = args || [];
          args = [ context, args.slice ? args.slice() : args ];
          if ( list && ( !fired || stack ) ) {
            if ( firing ) {
              stack.push( args );
            } else {
              fire( args );
            }
          }
          return this;
        },
        // Call all the callbacks with the given arguments
        fire: function() {
          self.fireWith( this, arguments );
          return this;
        },
        // To know if the callbacks have already been called at least once
        fired: function() {
          return !!fired;
        }
      };

    return self;
  };
  jQuery.extend({

    Deferred: function( func ) {
      var tuples = [
          // action, add listener, listener list, final state
          [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
          [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
          [ "notify", "progress", jQuery.Callbacks("memory") ]
        ],
        state = "pending",
        promise = {
          state: function() {
            return state;
          },
          always: function() {
            deferred.done( arguments ).fail( arguments );
            return this;
          },
          then: function( /* fnDone, fnFail, fnProgress */ ) {
            var fns = arguments;
            return jQuery.Deferred(function( newDefer ) {
              jQuery.each( tuples, function( i, tuple ) {
                var action = tuple[ 0 ],
                  fn = fns[ i ];
                // deferred[ done | fail | progress ] for forwarding actions to newDefer
                deferred[ tuple[1] ]( jQuery.isFunction( fn ) ?
                  function() {
                    var returned = fn.apply( this, arguments );
                    if ( returned && jQuery.isFunction( returned.promise ) ) {
                      returned.promise()
                        .done( newDefer.resolve )
                        .fail( newDefer.reject )
                        .progress( newDefer.notify );
                    } else {
                      newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
                    }
                  } :
                  newDefer[ action ]
                );
              });
              fns = null;
            }).promise();
          },
          // Get a promise for this deferred
          // If obj is provided, the promise aspect is added to the object
          promise: function( obj ) {
            return obj != null ? jQuery.extend( obj, promise ) : promise;
          }
        },
        deferred = {};

      // Keep pipe for back-compat
      promise.pipe = promise.then;

      // Add list-specific methods
      jQuery.each( tuples, function( i, tuple ) {
        var list = tuple[ 2 ],
          stateString = tuple[ 3 ];

        // promise[ done | fail | progress ] = list.add
        promise[ tuple[1] ] = list.add;

        // Handle state
        if ( stateString ) {
          list.add(function() {
            // state = [ resolved | rejected ]
            state = stateString;

            // [ reject_list | resolve_list ].disable; progress_list.lock
          }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
        }

        // deferred[ resolve | reject | notify ] = list.fire
        deferred[ tuple[0] ] = list.fire;
        deferred[ tuple[0] + "With" ] = list.fireWith;
      });

      // Make the deferred a promise
      promise.promise( deferred );

      // Call given func if any
      if ( func ) {
        func.call( deferred, deferred );
      }

      // All done!
      return deferred;
    },

    // Deferred helper
    when: function( subordinate /* , ..., subordinateN */ ) {
      var i = 0,
        resolveValues = core_slice.call( arguments ),
        length = resolveValues.length,

      // the count of uncompleted subordinates
        remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

      // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
        deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

      // Update function for both resolve and progress values
        updateFunc = function( i, contexts, values ) {
          return function( value ) {
            contexts[ i ] = this;
            values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
            if( values === progressValues ) {
              deferred.notifyWith( contexts, values );
            } else if ( !( --remaining ) ) {
              deferred.resolveWith( contexts, values );
            }
          };
        },

        progressValues, progressContexts, resolveContexts;

      // add listeners to Deferred subordinates; treat others as resolved
      if ( length > 1 ) {
        progressValues = new Array( length );
        progressContexts = new Array( length );
        resolveContexts = new Array( length );
        for ( ; i < length; i++ ) {
          if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
            resolveValues[ i ].promise()
              .done( updateFunc( i, resolveContexts, resolveValues ) )
              .fail( deferred.reject )
              .progress( updateFunc( i, progressContexts, progressValues ) );
          } else {
            --remaining;
          }
        }
      }

      // if we're not waiting on anything, resolve the master
      if ( !remaining ) {
        deferred.resolveWith( resolveContexts, resolveValues );
      }

      return deferred.promise();
    }
  });
  jQuery.support = (function() {

    var support,
      all,
      a,
      select,
      opt,
      input,
      fragment,
      eventName,
      i,
      isSupported,
      clickFn,
      div = document.createElement("div");

    // Preliminary tests
    div.setAttribute( "className", "t" );
    div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

    all = div.getElementsByTagName("*");
    a = div.getElementsByTagName("a")[ 0 ];
    a.style.cssText = "top:1px;float:left;opacity:.5";

    // Can't get basic test support
    if ( !all || !all.length ) {
      return {};
    }

    // First batch of supports tests
    select = document.createElement("select");
    opt = select.appendChild( document.createElement("option") );
    input = div.getElementsByTagName("input")[ 0 ];

    support = {
      // IE strips leading whitespace when .innerHTML is used
      leadingWhitespace: ( div.firstChild.nodeType === 3 ),

      // Make sure that tbody elements aren't automatically inserted
      // IE will insert them into empty tables
      tbody: !div.getElementsByTagName("tbody").length,

      // Make sure that link elements get serialized correctly by innerHTML
      // This requires a wrapper element in IE
      htmlSerialize: !!div.getElementsByTagName("link").length,

      // Get the style information from getAttribute
      // (IE uses .cssText instead)
      style: /top/.test( a.getAttribute("style") ),

      // Make sure that URLs aren't manipulated
      // (IE normalizes it by default)
      hrefNormalized: ( a.getAttribute("href") === "/a" ),

      // Make sure that element opacity exists
      // (IE uses filter instead)
      // Use a regex to work around a WebKit issue. See #5145
      opacity: /^0.5/.test( a.style.opacity ),

      // Verify style float existence
      // (IE uses styleFloat instead of cssFloat)
      cssFloat: !!a.style.cssFloat,

      // Make sure that if no value is specified for a checkbox
      // that it defaults to "on".
      // (WebKit defaults to "" instead)
      checkOn: ( input.value === "on" ),

      // Make sure that a selected-by-default option has a working selected property.
      // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
      optSelected: opt.selected,

      // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
      getSetAttribute: div.className !== "t",

      // Tests for enctype support on a form(#6743)
      enctype: !!document.createElement("form").enctype,

      // Makes sure cloning an html5 element does not cause problems
      // Where outerHTML is undefined, this still works
      html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

      // jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
      boxModel: ( document.compatMode === "CSS1Compat" ),

      // Will be defined later
      submitBubbles: true,
      changeBubbles: true,
      focusinBubbles: false,
      deleteExpando: true,
      noCloneEvent: true,
      inlineBlockNeedsLayout: false,
      shrinkWrapBlocks: false,
      reliableMarginRight: true,
      boxSizingReliable: true,
      pixelPosition: false
    };

    // Make sure checked status is properly cloned
    input.checked = true;
    support.noCloneChecked = input.cloneNode( true ).checked;

    // Make sure that the options inside disabled selects aren't marked as disabled
    // (WebKit marks them as disabled)
    select.disabled = true;
    support.optDisabled = !opt.disabled;

    // Test to see if it's possible to delete an expando from an element
    // Fails in Internet Explorer
    try {
      delete div.test;
    } catch( e ) {
      support.deleteExpando = false;
    }

    if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
      div.attachEvent( "onclick", clickFn = function() {
        // Cloning a node shouldn't copy over any
        // bound event handlers (IE does this)
        support.noCloneEvent = false;
      });
      div.cloneNode( true ).fireEvent("onclick");
      div.detachEvent( "onclick", clickFn );
    }

    // Check if a radio maintains its value
    // after being appended to the DOM
    input = document.createElement("input");
    input.value = "t";
    input.setAttribute( "type", "radio" );
    support.radioValue = input.value === "t";

    input.setAttribute( "checked", "checked" );

    // #11217 - WebKit loses check when the name is after the checked attribute
    input.setAttribute( "name", "t" );

    div.appendChild( input );
    fragment = document.createDocumentFragment();
    fragment.appendChild( div.lastChild );

    // WebKit doesn't clone checked state correctly in fragments
    support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

    // Check if a disconnected checkbox will retain its checked
    // value of true after appended to the DOM (IE6/7)
    support.appendChecked = input.checked;

    fragment.removeChild( input );
    fragment.appendChild( div );

    // Technique from Juriy Zaytsev
    // http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
    // We only care about the case where non-standard event systems
    // are used, namely in IE. Short-circuiting here helps us to
    // avoid an eval call (in setAttribute) which can cause CSP
    // to go haywire. See: https://developer.mozilla.org/en/Security/CSP
    if ( div.attachEvent ) {
      for ( i in {
        submit: true,
        change: true,
        focusin: true
      }) {
        eventName = "on" + i;
        isSupported = ( eventName in div );
        if ( !isSupported ) {
          div.setAttribute( eventName, "return;" );
          isSupported = ( typeof div[ eventName ] === "function" );
        }
        support[ i + "Bubbles" ] = isSupported;
      }
    }

    // Run tests that need a body at doc ready
    jQuery(function() {
      var container, div, tds, marginDiv,
        divReset = "padding:0;margin:0;border:0;display:block;overflow:hidden;",
        body = document.getElementsByTagName("body")[0];

      if ( !body ) {
        // Return for frameset docs that don't have a body
        return;
      }

      container = document.createElement("div");
      container.style.cssText = "visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px";
      body.insertBefore( container, body.firstChild );

      // Construct the test element
      div = document.createElement("div");
      container.appendChild( div );

      // Check if table cells still have offsetWidth/Height when they are set
      // to display:none and there are still other visible table cells in a
      // table row; if so, offsetWidth/Height are not reliable for use when
      // determining if an element has been hidden directly using
      // display:none (it is still safe to use offsets if a parent element is
      // hidden; don safety goggles and see bug #4512 for more information).
      // (only IE 8 fails this test)
      div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
      tds = div.getElementsByTagName("td");
      tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
      isSupported = ( tds[ 0 ].offsetHeight === 0 );

      tds[ 0 ].style.display = "";
      tds[ 1 ].style.display = "none";

      // Check if empty table cells still have offsetWidth/Height
      // (IE <= 8 fail this test)
      support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

      // Check box-sizing and margin behavior
      div.innerHTML = "";
      div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
      support.boxSizing = ( div.offsetWidth === 4 );
      support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

      // NOTE: To any future maintainer, we've window.getComputedStyle
      // because jsdom on node.js will break without it.
      if ( window.getComputedStyle ) {
        support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
        support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

        // Check if div with explicit width and no margin-right incorrectly
        // gets computed margin-right based on width of container. For more
        // info see bug #3333
        // Fails in WebKit before Feb 2011 nightlies
        // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
        marginDiv = document.createElement("div");
        marginDiv.style.cssText = div.style.cssText = divReset;
        marginDiv.style.marginRight = marginDiv.style.width = "0";
        div.style.width = "1px";
        div.appendChild( marginDiv );
        support.reliableMarginRight =
          !parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
      }

      if ( typeof div.style.zoom !== "undefined" ) {
        // Check if natively block-level elements act like inline-block
        // elements when setting their display to 'inline' and giving
        // them layout
        // (IE < 8 does this)
        div.innerHTML = "";
        div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
        support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

        // Check if elements with layout shrink-wrap their children
        // (IE 6 does this)
        div.style.display = "block";
        div.style.overflow = "visible";
        div.innerHTML = "<div></div>";
        div.firstChild.style.width = "5px";
        support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

        container.style.zoom = 1;
      }

      // Null elements to avoid leaks in IE
      body.removeChild( container );
      container = div = tds = marginDiv = null;
    });

    // Null elements to avoid leaks in IE
    fragment.removeChild( div );
    all = a = select = opt = input = fragment = div = null;

    return support;
  })();
  var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
    rmultiDash = /([A-Z])/g;

  jQuery.extend({
    cache: {},

    deletedIds: [],

    // Remove at next major release (1.9/2.0)
    uuid: 0,

    // Unique for each copy of jQuery on the page
    // Non-digits removed to match rinlinejQuery
    expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

    // The following elements throw uncatchable exceptions if you
    // attempt to add expando properties to them.
    noData: {
      "embed": true,
      // Ban all objects except for Flash (which handle expandos)
      "object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
      "applet": true
    },

    hasData: function( elem ) {
      elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
      return !!elem && !isEmptyDataObject( elem );
    },

    data: function( elem, name, data, pvt /* Internal Use Only */ ) {
      if ( !jQuery.acceptData( elem ) ) {
        return;
      }

      var thisCache, ret,
        internalKey = jQuery.expando,
        getByName = typeof name === "string",

      // We have to handle DOM nodes and JS objects differently because IE6-7
      // can't GC object references properly across the DOM-JS boundary
        isNode = elem.nodeType,

      // Only DOM nodes need the global jQuery cache; JS object data is
      // attached directly to the object so GC can occur automatically
        cache = isNode ? jQuery.cache : elem,

      // Only defining an ID for JS objects if its cache already exists allows
      // the code to shortcut on the same path as a DOM node with no cache
        id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

      // Avoid doing any more work than we need to when trying to get data on an
      // object that has no data at all
      if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
        return;
      }

      if ( !id ) {
        // Only DOM nodes need a new unique ID for each element since their data
        // ends up in the global cache
        if ( isNode ) {
          elem[ internalKey ] = id = jQuery.deletedIds.pop() || jQuery.guid++;
        } else {
          id = internalKey;
        }
      }

      if ( !cache[ id ] ) {
        cache[ id ] = {};

        // Avoids exposing jQuery metadata on plain JS objects when the object
        // is serialized using JSON.stringify
        if ( !isNode ) {
          cache[ id ].toJSON = jQuery.noop;
        }
      }

      // An object can be passed to jQuery.data instead of a key/value pair; this gets
      // shallow copied over onto the existing cache
      if ( typeof name === "object" || typeof name === "function" ) {
        if ( pvt ) {
          cache[ id ] = jQuery.extend( cache[ id ], name );
        } else {
          cache[ id ].data = jQuery.extend( cache[ id ].data, name );
        }
      }

      thisCache = cache[ id ];

      // jQuery data() is stored in a separate object inside the object's internal data
      // cache in order to avoid key collisions between internal data and user-defined
      // data.
      if ( !pvt ) {
        if ( !thisCache.data ) {
          thisCache.data = {};
        }

        thisCache = thisCache.data;
      }

      if ( data !== undefined ) {
        thisCache[ jQuery.camelCase( name ) ] = data;
      }

      // Check for both converted-to-camel and non-converted data property names
      // If a data property was specified
      if ( getByName ) {

        // First Try to find as-is property data
        ret = thisCache[ name ];

        // Test for null|undefined property data
        if ( ret == null ) {

          // Try to find the camelCased property
          ret = thisCache[ jQuery.camelCase( name ) ];
        }
      } else {
        ret = thisCache;
      }

      return ret;
    },

    removeData: function( elem, name, pvt /* Internal Use Only */ ) {
      if ( !jQuery.acceptData( elem ) ) {
        return;
      }

      var thisCache, i, l,

        isNode = elem.nodeType,

      // See jQuery.data for more information
        cache = isNode ? jQuery.cache : elem,
        id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

      // If there is already no cache entry for this object, there is no
      // purpose in continuing
      if ( !cache[ id ] ) {
        return;
      }

      if ( name ) {

        thisCache = pvt ? cache[ id ] : cache[ id ].data;

        if ( thisCache ) {

          // Support array or space separated string names for data keys
          if ( !jQuery.isArray( name ) ) {

            // try the string as a key before any manipulation
            if ( name in thisCache ) {
              name = [ name ];
            } else {

              // split the camel cased version by spaces unless a key with the spaces exists
              name = jQuery.camelCase( name );
              if ( name in thisCache ) {
                name = [ name ];
              } else {
                name = name.split(" ");
              }
            }
          }

          for ( i = 0, l = name.length; i < l; i++ ) {
            delete thisCache[ name[i] ];
          }

          // If there is no data left in the cache, we want to continue
          // and let the cache object itself get destroyed
          if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
            return;
          }
        }
      }

      // See jQuery.data for more information
      if ( !pvt ) {
        delete cache[ id ].data;

        // Don't destroy the parent cache unless the internal data object
        // had been the only thing left in it
        if ( !isEmptyDataObject( cache[ id ] ) ) {
          return;
        }
      }

      // Destroy the cache
      if ( isNode ) {
        jQuery.cleanData( [ elem ], true );

        // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
      } else if ( jQuery.support.deleteExpando || cache != cache.window ) {
        delete cache[ id ];

        // When all else fails, null
      } else {
        cache[ id ] = null;
      }
    },

    // For internal use only.
    _data: function( elem, name, data ) {
      return jQuery.data( elem, name, data, true );
    },

    // A method for determining if a DOM node can handle the data expando
    acceptData: function( elem ) {
      var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

      // nodes accept data unless otherwise specified; rejection can be conditional
      return !noData || noData !== true && elem.getAttribute("classid") === noData;
    }
  });

  jQuery.fn.extend({
    data: function( key, value ) {
      var parts, part, attr, name, l,
        elem = this[0],
        i = 0,
        data = null;

      // Gets all values
      if ( key === undefined ) {
        if ( this.length ) {
          data = jQuery.data( elem );

          if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
            attr = elem.attributes;
            for ( l = attr.length; i < l; i++ ) {
              name = attr[i].name;

              if ( !name.indexOf( "data-" ) ) {
                name = jQuery.camelCase( name.substring(5) );

                dataAttr( elem, name, data[ name ] );
              }
            }
            jQuery._data( elem, "parsedAttrs", true );
          }
        }

        return data;
      }

      // Sets multiple values
      if ( typeof key === "object" ) {
        return this.each(function() {
          jQuery.data( this, key );
        });
      }

      parts = key.split( ".", 2 );
      parts[1] = parts[1] ? "." + parts[1] : "";
      part = parts[1] + "!";

      return jQuery.access( this, function( value ) {

        if ( value === undefined ) {
          data = this.triggerHandler( "getData" + part, [ parts[0] ] );

          // Try to fetch any internally stored data first
          if ( data === undefined && elem ) {
            data = jQuery.data( elem, key );
            data = dataAttr( elem, key, data );
          }

          return data === undefined && parts[1] ?
            this.data( parts[0] ) :
            data;
        }

        parts[1] = value;
        this.each(function() {
          var self = jQuery( this );

          self.triggerHandler( "setData" + part, parts );
          jQuery.data( this, key, value );
          self.triggerHandler( "changeData" + part, parts );
        });
      }, null, value, arguments.length > 1, null, false );
    },

    removeData: function( key ) {
      return this.each(function() {
        jQuery.removeData( this, key );
      });
    }
  });

  function dataAttr( elem, key, data ) {
    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if ( data === undefined && elem.nodeType === 1 ) {

      var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

      data = elem.getAttribute( name );

      if ( typeof data === "string" ) {
        try {
          data = data === "true" ? true :
            data === "false" ? false :
              data === "null" ? null :
                // Only convert to a number if it doesn't change the string
                +data + "" === data ? +data :
                  rbrace.test( data ) ? jQuery.parseJSON( data ) :
                    data;
        } catch( e ) {}

        // Make sure we set the data so it isn't changed later
        jQuery.data( elem, key, data );

      } else {
        data = undefined;
      }
    }

    return data;
  }

// checks a cache object for emptiness
  function isEmptyDataObject( obj ) {
    var name;
    for ( name in obj ) {

      // if the public data object is empty, the private is still empty
      if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
        continue;
      }
      if ( name !== "toJSON" ) {
        return false;
      }
    }

    return true;
  }
  jQuery.extend({
    queue: function( elem, type, data ) {
      var queue;

      if ( elem ) {
        type = ( type || "fx" ) + "queue";
        queue = jQuery._data( elem, type );

        // Speed up dequeue by getting out quickly if this is just a lookup
        if ( data ) {
          if ( !queue || jQuery.isArray(data) ) {
            queue = jQuery._data( elem, type, jQuery.makeArray(data) );
          } else {
            queue.push( data );
          }
        }
        return queue || [];
      }
    },

    dequeue: function( elem, type ) {
      type = type || "fx";

      var queue = jQuery.queue( elem, type ),
        startLength = queue.length,
        fn = queue.shift(),
        hooks = jQuery._queueHooks( elem, type ),
        next = function() {
          jQuery.dequeue( elem, type );
        };

      // If the fx queue is dequeued, always remove the progress sentinel
      if ( fn === "inprogress" ) {
        fn = queue.shift();
        startLength--;
      }

      if ( fn ) {

        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if ( type === "fx" ) {
          queue.unshift( "inprogress" );
        }

        // clear up the last queue stop function
        delete hooks.stop;
        fn.call( elem, next, hooks );
      }

      if ( !startLength && hooks ) {
        hooks.empty.fire();
      }
    },

    // not intended for public consumption - generates a queueHooks object, or returns the current one
    _queueHooks: function( elem, type ) {
      var key = type + "queueHooks";
      return jQuery._data( elem, key ) || jQuery._data( elem, key, {
        empty: jQuery.Callbacks("once memory").add(function() {
          jQuery.removeData( elem, type + "queue", true );
          jQuery.removeData( elem, key, true );
        })
      });
    }
  });

  jQuery.fn.extend({
    queue: function( type, data ) {
      var setter = 2;

      if ( typeof type !== "string" ) {
        data = type;
        type = "fx";
        setter--;
      }

      if ( arguments.length < setter ) {
        return jQuery.queue( this[0], type );
      }

      return data === undefined ?
        this :
        this.each(function() {
          var queue = jQuery.queue( this, type, data );

          // ensure a hooks for this queue
          jQuery._queueHooks( this, type );

          if ( type === "fx" && queue[0] !== "inprogress" ) {
            jQuery.dequeue( this, type );
          }
        });
    },
    dequeue: function( type ) {
      return this.each(function() {
        jQuery.dequeue( this, type );
      });
    },
    // Based off of the plugin by Clint Helfers, with permission.
    // http://blindsignals.com/index.php/2009/07/jquery-delay/
    delay: function( time, type ) {
      time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
      type = type || "fx";

      return this.queue( type, function( next, hooks ) {
        var timeout = setTimeout( next, time );
        hooks.stop = function() {
          clearTimeout( timeout );
        };
      });
    },
    clearQueue: function( type ) {
      return this.queue( type || "fx", [] );
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function( type, obj ) {
      var tmp,
        count = 1,
        defer = jQuery.Deferred(),
        elements = this,
        i = this.length,
        resolve = function() {
          if ( !( --count ) ) {
            defer.resolveWith( elements, [ elements ] );
          }
        };

      if ( typeof type !== "string" ) {
        obj = type;
        type = undefined;
      }
      type = type || "fx";

      while( i-- ) {
        tmp = jQuery._data( elements[ i ], type + "queueHooks" );
        if ( tmp && tmp.empty ) {
          count++;
          tmp.empty.add( resolve );
        }
      }
      resolve();
      return defer.promise( obj );
    }
  });
  var nodeHook, boolHook, fixSpecified,
    rclass = /[\t\r\n]/g,
    rreturn = /\r/g,
    rtype = /^(?:button|input)$/i,
    rfocusable = /^(?:button|input|object|select|textarea)$/i,
    rclickable = /^a(?:rea|)$/i,
    rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
    getSetAttribute = jQuery.support.getSetAttribute;

  jQuery.fn.extend({
    attr: function( name, value ) {
      return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
    },

    removeAttr: function( name ) {
      return this.each(function() {
        jQuery.removeAttr( this, name );
      });
    },

    prop: function( name, value ) {
      return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
    },

    removeProp: function( name ) {
      name = jQuery.propFix[ name ] || name;
      return this.each(function() {
        // try/catch handles cases where IE balks (such as removing a property on window)
        try {
          this[ name ] = undefined;
          delete this[ name ];
        } catch( e ) {}
      });
    },

    addClass: function( value ) {
      var classNames, i, l, elem,
        setClass, c, cl;

      if ( jQuery.isFunction( value ) ) {
        return this.each(function( j ) {
          jQuery( this ).addClass( value.call(this, j, this.className) );
        });
      }

      if ( value && typeof value === "string" ) {
        classNames = value.split( core_rspace );

        for ( i = 0, l = this.length; i < l; i++ ) {
          elem = this[ i ];

          if ( elem.nodeType === 1 ) {
            if ( !elem.className && classNames.length === 1 ) {
              elem.className = value;

            } else {
              setClass = " " + elem.className + " ";

              for ( c = 0, cl = classNames.length; c < cl; c++ ) {
                if ( setClass.indexOf( " " + classNames[ c ] + " " ) < 0 ) {
                  setClass += classNames[ c ] + " ";
                }
              }
              elem.className = jQuery.trim( setClass );
            }
          }
        }
      }

      return this;
    },

    removeClass: function( value ) {
      var removes, className, elem, c, cl, i, l;

      if ( jQuery.isFunction( value ) ) {
        return this.each(function( j ) {
          jQuery( this ).removeClass( value.call(this, j, this.className) );
        });
      }
      if ( (value && typeof value === "string") || value === undefined ) {
        removes = ( value || "" ).split( core_rspace );

        for ( i = 0, l = this.length; i < l; i++ ) {
          elem = this[ i ];
          if ( elem.nodeType === 1 && elem.className ) {

            className = (" " + elem.className + " ").replace( rclass, " " );

            // loop over each item in the removal list
            for ( c = 0, cl = removes.length; c < cl; c++ ) {
              // Remove until there is nothing to remove,
              while ( className.indexOf(" " + removes[ c ] + " ") >= 0 ) {
                className = className.replace( " " + removes[ c ] + " " , " " );
              }
            }
            elem.className = value ? jQuery.trim( className ) : "";
          }
        }
      }

      return this;
    },

    toggleClass: function( value, stateVal ) {
      var type = typeof value,
        isBool = typeof stateVal === "boolean";

      if ( jQuery.isFunction( value ) ) {
        return this.each(function( i ) {
          jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
        });
      }

      return this.each(function() {
        if ( type === "string" ) {
          // toggle individual class names
          var className,
            i = 0,
            self = jQuery( this ),
            state = stateVal,
            classNames = value.split( core_rspace );

          while ( (className = classNames[ i++ ]) ) {
            // check each className given, space separated list
            state = isBool ? state : !self.hasClass( className );
            self[ state ? "addClass" : "removeClass" ]( className );
          }

        } else if ( type === "undefined" || type === "boolean" ) {
          if ( this.className ) {
            // store className if set
            jQuery._data( this, "__className__", this.className );
          }

          // toggle whole className
          this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
        }
      });
    },

    hasClass: function( selector ) {
      var className = " " + selector + " ",
        i = 0,
        l = this.length;
      for ( ; i < l; i++ ) {
        if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
          return true;
        }
      }

      return false;
    },

    val: function( value ) {
      var hooks, ret, isFunction,
        elem = this[0];

      if ( !arguments.length ) {
        if ( elem ) {
          hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

          if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
            return ret;
          }

          ret = elem.value;

          return typeof ret === "string" ?
            // handle most common string cases
            ret.replace(rreturn, "") :
            // handle cases where value is null/undef or number
            ret == null ? "" : ret;
        }

        return;
      }

      isFunction = jQuery.isFunction( value );

      return this.each(function( i ) {
        var val,
          self = jQuery(this);

        if ( this.nodeType !== 1 ) {
          return;
        }

        if ( isFunction ) {
          val = value.call( this, i, self.val() );
        } else {
          val = value;
        }

        // Treat null/undefined as ""; convert numbers to string
        if ( val == null ) {
          val = "";
        } else if ( typeof val === "number" ) {
          val += "";
        } else if ( jQuery.isArray( val ) ) {
          val = jQuery.map(val, function ( value ) {
            return value == null ? "" : value + "";
          });
        }

        hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

        // If set returns undefined, fall back to normal setting
        if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
          this.value = val;
        }
      });
    }
  });

  jQuery.extend({
    valHooks: {
      option: {
        get: function( elem ) {
          // attributes.value is undefined in Blackberry 4.7 but
          // uses .value. See #6932
          var val = elem.attributes.value;
          return !val || val.specified ? elem.value : elem.text;
        }
      },
      select: {
        get: function( elem ) {
          var value, i, max, option,
            index = elem.selectedIndex,
            values = [],
            options = elem.options,
            one = elem.type === "select-one";

          // Nothing was selected
          if ( index < 0 ) {
            return null;
          }

          // Loop through all the selected options
          i = one ? index : 0;
          max = one ? index + 1 : options.length;
          for ( ; i < max; i++ ) {
            option = options[ i ];

            // Don't return options that are disabled or in a disabled optgroup
            if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
              (!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {

              // Get the specific value for the option
              value = jQuery( option ).val();

              // We don't need an array for one selects
              if ( one ) {
                return value;
              }

              // Multi-Selects return an array
              values.push( value );
            }
          }

          // Fixes Bug #2551 -- select.val() broken in IE after form.reset()
          if ( one && !values.length && options.length ) {
            return jQuery( options[ index ] ).val();
          }

          return values;
        },

        set: function( elem, value ) {
          var values = jQuery.makeArray( value );

          jQuery(elem).find("option").each(function() {
            this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
          });

          if ( !values.length ) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    },

    // Unused in 1.8, left in so attrFn-stabbers won't die; remove in 1.9
    attrFn: {},

    attr: function( elem, name, value, pass ) {
      var ret, hooks, notxml,
        nType = elem.nodeType;

      // don't get/set attributes on text, comment and attribute nodes
      if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
        return;
      }

      if ( pass && jQuery.isFunction( jQuery.fn[ name ] ) ) {
        return jQuery( elem )[ name ]( value );
      }

      // Fallback to prop when attributes are not supported
      if ( typeof elem.getAttribute === "undefined" ) {
        return jQuery.prop( elem, name, value );
      }

      notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

      // All attributes are lowercase
      // Grab necessary hook if one is defined
      if ( notxml ) {
        name = name.toLowerCase();
        hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
      }

      if ( value !== undefined ) {

        if ( value === null ) {
          jQuery.removeAttr( elem, name );
          return;

        } else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
          return ret;

        } else {
          elem.setAttribute( name, value + "" );
          return value;
        }

      } else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
        return ret;

      } else {

        ret = elem.getAttribute( name );

        // Non-existent attributes return null, we normalize to undefined
        return ret === null ?
          undefined :
          ret;
      }
    },

    removeAttr: function( elem, value ) {
      var propName, attrNames, name, isBool,
        i = 0;

      if ( value && elem.nodeType === 1 ) {

        attrNames = value.split( core_rspace );

        for ( ; i < attrNames.length; i++ ) {
          name = attrNames[ i ];

          if ( name ) {
            propName = jQuery.propFix[ name ] || name;
            isBool = rboolean.test( name );

            // See #9699 for explanation of this approach (setting first, then removal)
            // Do not do this for boolean attributes (see #10870)
            if ( !isBool ) {
              jQuery.attr( elem, name, "" );
            }
            elem.removeAttribute( getSetAttribute ? name : propName );

            // Set corresponding property to false for boolean attributes
            if ( isBool && propName in elem ) {
              elem[ propName ] = false;
            }
          }
        }
      }
    },

    attrHooks: {
      type: {
        set: function( elem, value ) {
          // We can't allow the type property to be changed (since it causes problems in IE)
          if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
            jQuery.error( "type property can't be changed" );
          } else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
            // Setting the type on a radio button after the value resets the value in IE6-9
            // Reset value to it's default in case type is set after value
            // This is for element creation
            var val = elem.value;
            elem.setAttribute( "type", value );
            if ( val ) {
              elem.value = val;
            }
            return value;
          }
        }
      },
      // Use the value property for back compat
      // Use the nodeHook for button elements in IE6/7 (#1954)
      value: {
        get: function( elem, name ) {
          if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
            return nodeHook.get( elem, name );
          }
          return name in elem ?
            elem.value :
            null;
        },
        set: function( elem, value, name ) {
          if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
            return nodeHook.set( elem, value, name );
          }
          // Does not return so that setAttribute is also used
          elem.value = value;
        }
      }
    },

    propFix: {
      tabindex: "tabIndex",
      readonly: "readOnly",
      "for": "htmlFor",
      "class": "className",
      maxlength: "maxLength",
      cellspacing: "cellSpacing",
      cellpadding: "cellPadding",
      rowspan: "rowSpan",
      colspan: "colSpan",
      usemap: "useMap",
      frameborder: "frameBorder",
      contenteditable: "contentEditable"
    },

    prop: function( elem, name, value ) {
      var ret, hooks, notxml,
        nType = elem.nodeType;

      // don't get/set properties on text, comment and attribute nodes
      if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
        return;
      }

      notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

      if ( notxml ) {
        // Fix name and attach hooks
        name = jQuery.propFix[ name ] || name;
        hooks = jQuery.propHooks[ name ];
      }

      if ( value !== undefined ) {
        if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
          return ret;

        } else {
          return ( elem[ name ] = value );
        }

      } else {
        if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
          return ret;

        } else {
          return elem[ name ];
        }
      }
    },

    propHooks: {
      tabIndex: {
        get: function( elem ) {
          // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
          // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
          var attributeNode = elem.getAttributeNode("tabindex");

          return attributeNode && attributeNode.specified ?
            parseInt( attributeNode.value, 10 ) :
            rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
              0 :
              undefined;
        }
      }
    }
  });

// Hook for boolean attributes
  boolHook = {
    get: function( elem, name ) {
      // Align boolean attributes with corresponding properties
      // Fall back to attribute presence where some booleans are not supported
      var attrNode,
        property = jQuery.prop( elem, name );
      return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
        name.toLowerCase() :
        undefined;
    },
    set: function( elem, value, name ) {
      var propName;
      if ( value === false ) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr( elem, name );
      } else {
        // value is true since we know at this point it's type boolean and not false
        // Set boolean attributes to the same name and set the DOM property
        propName = jQuery.propFix[ name ] || name;
        if ( propName in elem ) {
          // Only set the IDL specifically if it already exists on the element
          elem[ propName ] = true;
        }

        elem.setAttribute( name, name.toLowerCase() );
      }
      return name;
    }
  };

// IE6/7 do not support getting/setting some attributes with get/setAttribute
  if ( !getSetAttribute ) {

    fixSpecified = {
      name: true,
      id: true,
      coords: true
    };

    // Use this for any attribute in IE6/7
    // This fixes almost every IE6/7 issue
    nodeHook = jQuery.valHooks.button = {
      get: function( elem, name ) {
        var ret;
        ret = elem.getAttributeNode( name );
        return ret && ( fixSpecified[ name ] ? ret.value !== "" : ret.specified ) ?
          ret.value :
          undefined;
      },
      set: function( elem, value, name ) {
        // Set the existing or create a new attribute node
        var ret = elem.getAttributeNode( name );
        if ( !ret ) {
          ret = document.createAttribute( name );
          elem.setAttributeNode( ret );
        }
        return ( ret.value = value + "" );
      }
    };

    // Set width and height to auto instead of 0 on empty string( Bug #8150 )
    // This is for removals
    jQuery.each([ "width", "height" ], function( i, name ) {
      jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
        set: function( elem, value ) {
          if ( value === "" ) {
            elem.setAttribute( name, "auto" );
            return value;
          }
        }
      });
    });

    // Set contenteditable to false on removals(#10429)
    // Setting to empty string throws an error as an invalid value
    jQuery.attrHooks.contenteditable = {
      get: nodeHook.get,
      set: function( elem, value, name ) {
        if ( value === "" ) {
          value = "false";
        }
        nodeHook.set( elem, value, name );
      }
    };
  }


// Some attributes require a special call on IE
  if ( !jQuery.support.hrefNormalized ) {
    jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
      jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
        get: function( elem ) {
          var ret = elem.getAttribute( name, 2 );
          return ret === null ? undefined : ret;
        }
      });
    });
  }

  if ( !jQuery.support.style ) {
    jQuery.attrHooks.style = {
      get: function( elem ) {
        // Return undefined in the case of empty string
        // Normalize to lowercase since IE uppercases css property names
        return elem.style.cssText.toLowerCase() || undefined;
      },
      set: function( elem, value ) {
        return ( elem.style.cssText = value + "" );
      }
    };
  }

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
  if ( !jQuery.support.optSelected ) {
    jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
      get: function( elem ) {
        var parent = elem.parentNode;

        if ( parent ) {
          parent.selectedIndex;

          // Make sure that it also works with optgroups, see #5701
          if ( parent.parentNode ) {
            parent.parentNode.selectedIndex;
          }
        }
        return null;
      }
    });
  }

// IE6/7 call enctype encoding
  if ( !jQuery.support.enctype ) {
    jQuery.propFix.enctype = "encoding";
  }

// Radios and checkboxes getter/setter
  if ( !jQuery.support.checkOn ) {
    jQuery.each([ "radio", "checkbox" ], function() {
      jQuery.valHooks[ this ] = {
        get: function( elem ) {
          // Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
          return elem.getAttribute("value") === null ? "on" : elem.value;
        }
      };
    });
  }
  jQuery.each([ "radio", "checkbox" ], function() {
    jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
      set: function( elem, value ) {
        if ( jQuery.isArray( value ) ) {
          return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
        }
      }
    });
  });
  var rformElems = /^(?:textarea|input|select)$/i,
    rtypenamespace = /^([^\.]*|)(?:\.(.+)|)$/,
    rhoverHack = /(?:^|\s)hover(\.\S+|)\b/,
    rkeyEvent = /^key/,
    rmouseEvent = /^(?:mouse|contextmenu)|click/,
    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    hoverHack = function( events ) {
      return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
    };

  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */
  jQuery.event = {

    add: function( elem, types, handler, data, selector ) {

      var elemData, eventHandle, events,
        t, tns, type, namespaces, handleObj,
        handleObjIn, handlers, special;

      // Don't attach events to noData or text/comment nodes (allow plain objects tho)
      if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
        return;
      }

      // Caller can pass in an object of custom data in lieu of the handler
      if ( handler.handler ) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }

      // Make sure that the handler has a unique ID, used to find/remove it later
      if ( !handler.guid ) {
        handler.guid = jQuery.guid++;
      }

      // Init the element's event structure and main handler, if this is the first
      events = elemData.events;
      if ( !events ) {
        elemData.events = events = {};
      }
      eventHandle = elemData.handle;
      if ( !eventHandle ) {
        elemData.handle = eventHandle = function( e ) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
            jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
            undefined;
        };
        // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
        eventHandle.elem = elem;
      }

      // Handle multiple events separated by a space
      // jQuery(...).bind("mouseover mouseout", fn);
      types = jQuery.trim( hoverHack(types) ).split( " " );
      for ( t = 0; t < types.length; t++ ) {

        tns = rtypenamespace.exec( types[t] ) || [];
        type = tns[1];
        namespaces = ( tns[2] || "" ).split( "." ).sort();

        // If event changes its type, use the special event handlers for the changed type
        special = jQuery.event.special[ type ] || {};

        // If selector defined, determine special event api type, otherwise given type
        type = ( selector ? special.delegateType : special.bindType ) || type;

        // Update special based on newly reset type
        special = jQuery.event.special[ type ] || {};

        // handleObj is passed to all event handlers
        handleObj = jQuery.extend({
          type: type,
          origType: tns[1],
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
          namespace: namespaces.join(".")
        }, handleObjIn );

        // Init the event handler queue if we're the first
        handlers = events[ type ];
        if ( !handlers ) {
          handlers = events[ type ] = [];
          handlers.delegateCount = 0;

          // Only use addEventListener/attachEvent if the special events handler returns false
          if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
            // Bind the global event handler to the element
            if ( elem.addEventListener ) {
              elem.addEventListener( type, eventHandle, false );

            } else if ( elem.attachEvent ) {
              elem.attachEvent( "on" + type, eventHandle );
            }
          }
        }

        if ( special.add ) {
          special.add.call( elem, handleObj );

          if ( !handleObj.handler.guid ) {
            handleObj.handler.guid = handler.guid;
          }
        }

        // Add to the element's handler list, delegates in front
        if ( selector ) {
          handlers.splice( handlers.delegateCount++, 0, handleObj );
        } else {
          handlers.push( handleObj );
        }

        // Keep track of which events have ever been used, for event optimization
        jQuery.event.global[ type ] = true;
      }

      // Nullify elem to prevent memory leaks in IE
      elem = null;
    },

    global: {},

    // Detach an event or set of events from an element
    remove: function( elem, types, handler, selector, mappedTypes ) {

      var t, tns, type, origType, namespaces, origCount,
        j, events, special, eventType, handleObj,
        elemData = jQuery.hasData( elem ) && jQuery._data( elem );

      if ( !elemData || !(events = elemData.events) ) {
        return;
      }

      // Once for each type.namespace in types; type may be omitted
      types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
      for ( t = 0; t < types.length; t++ ) {
        tns = rtypenamespace.exec( types[t] ) || [];
        type = origType = tns[1];
        namespaces = tns[2];

        // Unbind all events (on this namespace, if provided) for the element
        if ( !type ) {
          for ( type in events ) {
            jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
          }
          continue;
        }

        special = jQuery.event.special[ type ] || {};
        type = ( selector? special.delegateType : special.bindType ) || type;
        eventType = events[ type ] || [];
        origCount = eventType.length;
        namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

        // Remove matching events
        for ( j = 0; j < eventType.length; j++ ) {
          handleObj = eventType[ j ];

          if ( ( mappedTypes || origType === handleObj.origType ) &&
            ( !handler || handler.guid === handleObj.guid ) &&
            ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
            ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
            eventType.splice( j--, 1 );

            if ( handleObj.selector ) {
              eventType.delegateCount--;
            }
            if ( special.remove ) {
              special.remove.call( elem, handleObj );
            }
          }
        }

        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if ( eventType.length === 0 && origCount !== eventType.length ) {
          if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
            jQuery.removeEvent( elem, type, elemData.handle );
          }

          delete events[ type ];
        }
      }

      // Remove the expando if it's no longer used
      if ( jQuery.isEmptyObject( events ) ) {
        delete elemData.handle;

        // removeData also checks for emptiness and clears the expando if empty
        // so use it instead of delete
        jQuery.removeData( elem, "events", true );
      }
    },

    // Events that are safe to short-circuit if no handlers are attached.
    // Native DOM events should not be added, they may have inline handlers.
    customEvent: {
      "getData": true,
      "setData": true,
      "changeData": true
    },

    trigger: function( event, data, elem, onlyHandlers ) {
      // Don't do events on text and comment nodes
      if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
        return;
      }

      // Event object or event type
      var cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType,
        type = event.type || event,
        namespaces = [];

      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
        return;
      }

      if ( type.indexOf( "!" ) >= 0 ) {
        // Exclusive events trigger only for the exact event (no namespaces)
        type = type.slice(0, -1);
        exclusive = true;
      }

      if ( type.indexOf( "." ) >= 0 ) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }

      if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
        // No jQuery handlers for this event type, and it can't have inline handlers
        return;
      }

      // Caller can pass in an Event, Object, or just an event type string
      event = typeof event === "object" ?
        // jQuery.Event object
        event[ jQuery.expando ] ? event :
          // Object literal
          new jQuery.Event( type, event ) :
        // Just the event type (string)
        new jQuery.Event( type );

      event.type = type;
      event.isTrigger = true;
      event.exclusive = exclusive;
      event.namespace = namespaces.join( "." );
      event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
      ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";

      // Handle a global trigger
      if ( !elem ) {

        // TODO: Stop taunting the data cache; remove global events and always attach to document
        cache = jQuery.cache;
        for ( i in cache ) {
          if ( cache[ i ].events && cache[ i ].events[ type ] ) {
            jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
          }
        }
        return;
      }

      // Clean up the event in case it is being reused
      event.result = undefined;
      if ( !event.target ) {
        event.target = elem;
      }

      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data != null ? jQuery.makeArray( data ) : [];
      data.unshift( event );

      // Allow special events to draw outside the lines
      special = jQuery.event.special[ type ] || {};
      if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
        return;
      }

      // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
      eventPath = [[ elem, special.bindType || type ]];
      if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

        bubbleType = special.delegateType || type;
        cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
        for ( old = elem; cur; cur = cur.parentNode ) {
          eventPath.push([ cur, bubbleType ]);
          old = cur;
        }

        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if ( old === (elem.ownerDocument || document) ) {
          eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
        }
      }

      // Fire handlers on the event path
      for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {

        cur = eventPath[i][0];
        event.type = eventPath[i][1];

        handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
        if ( handle ) {
          handle.apply( cur, data );
        }
        // Note that this is a bare JS function and not a jQuery handler
        handle = ontype && cur[ ontype ];
        if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
          event.preventDefault();
        }
      }
      event.type = type;

      // If nobody prevented the default action, do it now
      if ( !onlyHandlers && !event.isDefaultPrevented() ) {

        if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
          !(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

          // Call a native DOM method on the target with the same name name as the event.
          // Can't use an .isFunction() check here because IE6/7 fails that test.
          // Don't do default actions on window, that's where global variables be (#6170)
          // IE<9 dies on focus/blur to hidden element (#1486)
          if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {

            // Don't re-trigger an onFOO event when we call its FOO() method
            old = elem[ ontype ];

            if ( old ) {
              elem[ ontype ] = null;
            }

            // Prevent re-triggering of the same event, since we already bubbled it above
            jQuery.event.triggered = type;
            elem[ type ]();
            jQuery.event.triggered = undefined;

            if ( old ) {
              elem[ ontype ] = old;
            }
          }
        }
      }

      return event.result;
    },

    dispatch: function( event ) {

      // Make a writable jQuery.Event from the native event object
      event = jQuery.event.fix( event || window.event );

      var i, j, cur, ret, selMatch, matched, matches, handleObj, sel, related,
        handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
        delegateCount = handlers.delegateCount,
        args = core_slice.call( arguments ),
        run_all = !event.exclusive && !event.namespace,
        special = jQuery.event.special[ event.type ] || {},
        handlerQueue = [];

      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[0] = event;
      event.delegateTarget = this;

      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
        return;
      }

      // Determine handlers that should run if there are delegated events
      // Avoid non-left-click bubbling in Firefox (#3861)
      if ( delegateCount && !(event.button && event.type === "click") ) {

        for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {

          // Don't process clicks (ONLY) on disabled elements (#6911, #8165, #11382, #11764)
          if ( cur.disabled !== true || event.type !== "click" ) {
            selMatch = {};
            matches = [];
            for ( i = 0; i < delegateCount; i++ ) {
              handleObj = handlers[ i ];
              sel = handleObj.selector;

              if ( selMatch[ sel ] === undefined ) {
                selMatch[ sel ] = handleObj.needsContext ?
                  jQuery( sel, this ).index( cur ) >= 0 :
                  jQuery.find( sel, this, null, [ cur ] ).length;
              }
              if ( selMatch[ sel ] ) {
                matches.push( handleObj );
              }
            }
            if ( matches.length ) {
              handlerQueue.push({ elem: cur, matches: matches });
            }
          }
        }
      }

      // Add the remaining (directly-bound) handlers
      if ( handlers.length > delegateCount ) {
        handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
      }

      // Run delegates first; they may want to stop propagation beneath us
      for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
        matched = handlerQueue[ i ];
        event.currentTarget = matched.elem;

        for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
          handleObj = matched.matches[ j ];

          // Triggered event must either 1) be non-exclusive and have no namespace, or
          // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
          if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {

            event.data = handleObj.data;
            event.handleObj = handleObj;

            ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
              .apply( matched.elem, args );

            if ( ret !== undefined ) {
              event.result = ret;
              if ( ret === false ) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }

      // Call the postDispatch hook for the mapped type
      if ( special.postDispatch ) {
        special.postDispatch.call( this, event );
      }

      return event.result;
    },

    // Includes some event props shared by KeyEvent and MouseEvent
    // *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
    props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

    fixHooks: {},

    keyHooks: {
      props: "char charCode key keyCode".split(" "),
      filter: function( event, original ) {

        // Add which for key events
        if ( event.which == null ) {
          event.which = original.charCode != null ? original.charCode : original.keyCode;
        }

        return event;
      }
    },

    mouseHooks: {
      props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
      filter: function( event, original ) {
        var eventDoc, doc, body,
          button = original.button,
          fromElement = original.fromElement;

        // Calculate pageX/Y if missing and clientX/Y available
        if ( event.pageX == null && original.clientX != null ) {
          eventDoc = event.target.ownerDocument || document;
          doc = eventDoc.documentElement;
          body = eventDoc.body;

          event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
          event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
        }

        // Add relatedTarget, if necessary
        if ( !event.relatedTarget && fromElement ) {
          event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
        }

        // Add which for click: 1 === left; 2 === middle; 3 === right
        // Note: button is not normalized, so don't use it
        if ( !event.which && button !== undefined ) {
          event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
        }

        return event;
      }
    },

    fix: function( event ) {
      if ( event[ jQuery.expando ] ) {
        return event;
      }

      // Create a writable copy of the event object and normalize some properties
      var i, prop,
        originalEvent = event,
        fixHook = jQuery.event.fixHooks[ event.type ] || {},
        copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

      event = jQuery.Event( originalEvent );

      for ( i = copy.length; i; ) {
        prop = copy[ --i ];
        event[ prop ] = originalEvent[ prop ];
      }

      // Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
      if ( !event.target ) {
        event.target = originalEvent.srcElement || document;
      }

      // Target should not be a text node (#504, Safari)
      if ( event.target.nodeType === 3 ) {
        event.target = event.target.parentNode;
      }

      // For mouse/key events, metaKey==false if it's undefined (#3368, #11328; IE6/7/8)
      event.metaKey = !!event.metaKey;

      return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
    },

    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },

      focus: {
        delegateType: "focusin"
      },
      blur: {
        delegateType: "focusout"
      },

      beforeunload: {
        setup: function( data, namespaces, eventHandle ) {
          // We only want to do this special case on windows
          if ( jQuery.isWindow( this ) ) {
            this.onbeforeunload = eventHandle;
          }
        },

        teardown: function( namespaces, eventHandle ) {
          if ( this.onbeforeunload === eventHandle ) {
            this.onbeforeunload = null;
          }
        }
      }
    },

    simulate: function( type, elem, event, bubble ) {
      // Piggyback on a donor event to simulate a different one.
      // Fake originalEvent to avoid donor's stopPropagation, but if the
      // simulated event prevents default then we do the same on the donor.
      var e = jQuery.extend(
        new jQuery.Event(),
        event,
        { type: type,
          isSimulated: true,
          originalEvent: {}
        }
      );
      if ( bubble ) {
        jQuery.event.trigger( e, null, elem );
      } else {
        jQuery.event.dispatch.call( elem, e );
      }
      if ( e.isDefaultPrevented() ) {
        event.preventDefault();
      }
    }
  };

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
  jQuery.event.handle = jQuery.event.dispatch;

  jQuery.removeEvent = document.removeEventListener ?
    function( elem, type, handle ) {
      if ( elem.removeEventListener ) {
        elem.removeEventListener( type, handle, false );
      }
    } :
    function( elem, type, handle ) {
      var name = "on" + type;

      if ( elem.detachEvent ) {

        // #8545, #7054, preventing memory leaks for custom events in IE6-8 –
        // detachEvent needed property on element, by name of that event, to properly expose it to GC
        if ( typeof elem[ name ] === "undefined" ) {
          elem[ name ] = null;
        }

        elem.detachEvent( name, handle );
      }
    };

  jQuery.Event = function( src, props ) {
    // Allow instantiation without the 'new' keyword
    if ( !(this instanceof jQuery.Event) ) {
      return new jQuery.Event( src, props );
    }

    // Event object
    if ( src && src.type ) {
      this.originalEvent = src;
      this.type = src.type;

      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
        src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

      // Event type
    } else {
      this.type = src;
    }

    // Put explicitly provided properties onto the event object
    if ( props ) {
      jQuery.extend( this, props );
    }

    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || jQuery.now();

    // Mark it as fixed
    this[ jQuery.expando ] = true;
  };

  function returnFalse() {
    return false;
  }
  function returnTrue() {
    return true;
  }

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  jQuery.Event.prototype = {
    preventDefault: function() {
      this.isDefaultPrevented = returnTrue;

      var e = this.originalEvent;
      if ( !e ) {
        return;
      }

      // if preventDefault exists run it on the original event
      if ( e.preventDefault ) {
        e.preventDefault();

        // otherwise set the returnValue property of the original event to false (IE)
      } else {
        e.returnValue = false;
      }
    },
    stopPropagation: function() {
      this.isPropagationStopped = returnTrue;

      var e = this.originalEvent;
      if ( !e ) {
        return;
      }
      // if stopPropagation exists run it on the original event
      if ( e.stopPropagation ) {
        e.stopPropagation();
      }
      // otherwise set the cancelBubble property of the original event to true (IE)
      e.cancelBubble = true;
    },
    stopImmediatePropagation: function() {
      this.isImmediatePropagationStopped = returnTrue;
      this.stopPropagation();
    },
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse
  };

// Create mouseenter/leave events using mouseover/out and event-time checks
  jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  }, function( orig, fix ) {
    jQuery.event.special[ orig ] = {
      delegateType: fix,
      bindType: fix,

      handle: function( event ) {
        var ret,
          target = this,
          related = event.relatedTarget,
          handleObj = event.handleObj,
          selector = handleObj.selector;

        // For mousenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window
        if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply( this, arguments );
          event.type = fix;
        }
        return ret;
      }
    };
  });

// IE submit delegation
  if ( !jQuery.support.submitBubbles ) {

    jQuery.event.special.submit = {
      setup: function() {
        // Only need this for delegated form submit events
        if ( jQuery.nodeName( this, "form" ) ) {
          return false;
        }

        // Lazy-add a submit handler when a descendant form may potentially be submitted
        jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
          // Node name check avoids a VML-related crash in IE (#9807)
          var elem = e.target,
            form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
          if ( form && !jQuery._data( form, "_submit_attached" ) ) {
            jQuery.event.add( form, "submit._submit", function( event ) {
              event._submit_bubble = true;
            });
            jQuery._data( form, "_submit_attached", true );
          }
        });
        // return undefined since we don't need an event listener
      },

      postDispatch: function( event ) {
        // If form was submitted by the user, bubble the event up the tree
        if ( event._submit_bubble ) {
          delete event._submit_bubble;
          if ( this.parentNode && !event.isTrigger ) {
            jQuery.event.simulate( "submit", this.parentNode, event, true );
          }
        }
      },

      teardown: function() {
        // Only need this for delegated form submit events
        if ( jQuery.nodeName( this, "form" ) ) {
          return false;
        }

        // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
        jQuery.event.remove( this, "._submit" );
      }
    };
  }

// IE change delegation and checkbox/radio fix
  if ( !jQuery.support.changeBubbles ) {

    jQuery.event.special.change = {

      setup: function() {

        if ( rformElems.test( this.nodeName ) ) {
          // IE doesn't fire change on a check/radio until blur; trigger it on click
          // after a propertychange. Eat the blur-change in special.change.handle.
          // This still fires onchange a second time for check/radio after blur.
          if ( this.type === "checkbox" || this.type === "radio" ) {
            jQuery.event.add( this, "propertychange._change", function( event ) {
              if ( event.originalEvent.propertyName === "checked" ) {
                this._just_changed = true;
              }
            });
            jQuery.event.add( this, "click._change", function( event ) {
              if ( this._just_changed && !event.isTrigger ) {
                this._just_changed = false;
              }
              // Allow triggered, simulated change events (#11500)
              jQuery.event.simulate( "change", this, event, true );
            });
          }
          return false;
        }
        // Delegated event; lazy-add a change handler on descendant inputs
        jQuery.event.add( this, "beforeactivate._change", function( e ) {
          var elem = e.target;

          if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "_change_attached" ) ) {
            jQuery.event.add( elem, "change._change", function( event ) {
              if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
                jQuery.event.simulate( "change", this.parentNode, event, true );
              }
            });
            jQuery._data( elem, "_change_attached", true );
          }
        });
      },

      handle: function( event ) {
        var elem = event.target;

        // Swallow native change events from checkbox/radio, we already triggered them above
        if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
          return event.handleObj.handler.apply( this, arguments );
        }
      },

      teardown: function() {
        jQuery.event.remove( this, "._change" );

        return !rformElems.test( this.nodeName );
      }
    };
  }

// Create "bubbling" focus and blur events
  if ( !jQuery.support.focusinBubbles ) {
    jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

      // Attach a single capturing handler while someone wants focusin/focusout
      var attaches = 0,
        handler = function( event ) {
          jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
        };

      jQuery.event.special[ fix ] = {
        setup: function() {
          if ( attaches++ === 0 ) {
            document.addEventListener( orig, handler, true );
          }
        },
        teardown: function() {
          if ( --attaches === 0 ) {
            document.removeEventListener( orig, handler, true );
          }
        }
      };
    });
  }

  jQuery.fn.extend({

    on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
      var origFn, type;

      // Types can be a map of types/handlers
      if ( typeof types === "object" ) {
        // ( types-Object, selector, data )
        if ( typeof selector !== "string" ) { // && selector != null
          // ( types-Object, data )
          data = data || selector;
          selector = undefined;
        }
        for ( type in types ) {
          this.on( type, selector, data, types[ type ], one );
        }
        return this;
      }

      if ( data == null && fn == null ) {
        // ( types, fn )
        fn = selector;
        data = selector = undefined;
      } else if ( fn == null ) {
        if ( typeof selector === "string" ) {
          // ( types, selector, fn )
          fn = data;
          data = undefined;
        } else {
          // ( types, data, fn )
          fn = data;
          data = selector;
          selector = undefined;
        }
      }
      if ( fn === false ) {
        fn = returnFalse;
      } else if ( !fn ) {
        return this;
      }

      if ( one === 1 ) {
        origFn = fn;
        fn = function( event ) {
          // Can use an empty set, since event contains the info
          jQuery().off( event );
          return origFn.apply( this, arguments );
        };
        // Use same guid so caller can remove using origFn
        fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
      }
      return this.each( function() {
        jQuery.event.add( this, types, fn, data, selector );
      });
    },
    one: function( types, selector, data, fn ) {
      return this.on( types, selector, data, fn, 1 );
    },
    off: function( types, selector, fn ) {
      var handleObj, type;
      if ( types && types.preventDefault && types.handleObj ) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery( types.delegateTarget ).off(
          handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
          handleObj.selector,
          handleObj.handler
        );
        return this;
      }
      if ( typeof types === "object" ) {
        // ( types-object [, selector] )
        for ( type in types ) {
          this.off( type, selector, types[ type ] );
        }
        return this;
      }
      if ( selector === false || typeof selector === "function" ) {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if ( fn === false ) {
        fn = returnFalse;
      }
      return this.each(function() {
        jQuery.event.remove( this, types, fn, selector );
      });
    },

    bind: function( types, data, fn ) {
      return this.on( types, null, data, fn );
    },
    unbind: function( types, fn ) {
      return this.off( types, null, fn );
    },

    live: function( types, data, fn ) {
      jQuery( this.context ).on( types, this.selector, data, fn );
      return this;
    },
    die: function( types, fn ) {
      jQuery( this.context ).off( types, this.selector || "**", fn );
      return this;
    },

    delegate: function( selector, types, data, fn ) {
      return this.on( types, selector, data, fn );
    },
    undelegate: function( selector, types, fn ) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
    },

    trigger: function( type, data ) {
      return this.each(function() {
        jQuery.event.trigger( type, data, this );
      });
    },
    triggerHandler: function( type, data ) {
      if ( this[0] ) {
        return jQuery.event.trigger( type, data, this[0], true );
      }
    },

    toggle: function( fn ) {
      // Save reference to arguments for access in closure
      var args = arguments,
        guid = fn.guid || jQuery.guid++,
        i = 0,
        toggler = function( event ) {
          // Figure out which function to execute
          var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
          jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

          // Make sure that clicks stop
          event.preventDefault();

          // and execute the function
          return args[ lastToggle ].apply( this, arguments ) || false;
        };

      // link all the functions, so any of them can unbind this click handler
      toggler.guid = guid;
      while ( i < args.length ) {
        args[ i++ ].guid = guid;
      }

      return this.click( toggler );
    },

    hover: function( fnOver, fnOut ) {
      return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
    }
  });

  jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
    "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
    "change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

    // Handle event binding
    jQuery.fn[ name ] = function( data, fn ) {
      if ( fn == null ) {
        fn = data;
        data = null;
      }

      return arguments.length > 0 ?
        this.on( name, null, data, fn ) :
        this.trigger( name );
    };

    if ( rkeyEvent.test( name ) ) {
      jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
    }

    if ( rmouseEvent.test( name ) ) {
      jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
    }
  });
  /*!
   * Sizzle CSS Selector Engine
   * Copyright 2012 jQuery Foundation and other contributors
   * Released under the MIT license
   * http://sizzlejs.com/
   */
  (function( window, undefined ) {

    var cachedruns,
      assertGetIdNotName,
      Expr,
      getText,
      isXML,
      contains,
      compile,
      sortOrder,
      hasDuplicate,
      outermostContext,

      baseHasDuplicate = true,
      strundefined = "undefined",

      expando = ( "sizcache" + Math.random() ).replace( ".", "" ),

      Token = String,
      document = window.document,
      docElem = document.documentElement,
      dirruns = 0,
      done = 0,
      pop = [].pop,
      push = [].push,
      slice = [].slice,
    // Use a stripped-down indexOf if a native one is unavailable
      indexOf = [].indexOf || function( elem ) {
        var i = 0,
          len = this.length;
        for ( ; i < len; i++ ) {
          if ( this[i] === elem ) {
            return i;
          }
        }
        return -1;
      },

    // Augment a function for special use by Sizzle
      markFunction = function( fn, value ) {
        fn[ expando ] = value == null || value;
        return fn;
      },

      createCache = function() {
        var cache = {},
          keys = [];

        return markFunction(function( key, value ) {
          // Only keep the most recent entries
          if ( keys.push( key ) > Expr.cacheLength ) {
            delete cache[ keys.shift() ];
          }

          return (cache[ key ] = value);
        }, cache );
      },

      classCache = createCache(),
      tokenCache = createCache(),
      compilerCache = createCache(),

    // Regex

    // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
      whitespace = "[\\x20\\t\\r\\n\\f]",
    // http://www.w3.org/TR/css3-syntax/#characters
      characterEncoding = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",

    // Loosely modeled on CSS identifier characters
    // An unquoted value should be a CSS identifier (http://www.w3.org/TR/css3-selectors/#attribute-selectors)
    // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
      identifier = characterEncoding.replace( "w", "w#" ),

    // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
      operators = "([*^$|!~]?=)",
      attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
        "*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

    // Prefer arguments not in parens/brackets,
    //   then attribute selectors and non-pseudos (denoted by :),
    //   then anything else
    // These preferences are here to reduce the number of selectors
    //   needing tokenize in the PSEUDO preFilter
      pseudos = ":(" + characterEncoding + ")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + attributes + ")|[^:]|\\\\.)*|.*))\\)|)",

    // For matchExpr.POS and matchExpr.needsContext
      pos = ":(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
        "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)",

    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
      rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

      rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
      rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
      rpseudo = new RegExp( pseudos ),

    // Easily-parseable/retrievable ID or TAG or CLASS selectors
      rquickExpr = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,

      rnot = /^:not/,
      rsibling = /[\x20\t\r\n\f]*[+~]/,
      rendsWithNot = /:not\($/,

      rheader = /h\d/i,
      rinputs = /input|select|textarea|button/i,

      rbackslash = /\\(?!\\)/g,

      matchExpr = {
        "ID": new RegExp( "^#(" + characterEncoding + ")" ),
        "CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
        "NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
        "TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
        "ATTR": new RegExp( "^" + attributes ),
        "PSEUDO": new RegExp( "^" + pseudos ),
        "POS": new RegExp( pos, "i" ),
        "CHILD": new RegExp( "^:(only|nth|first|last)-child(?:\\(" + whitespace +
          "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
          "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
        // For use in libraries implementing .is()
        "needsContext": new RegExp( "^" + whitespace + "*[>+~]|" + pos, "i" )
      },

    // Support

    // Used for testing something on an element
      assert = function( fn ) {
        var div = document.createElement("div");

        try {
          return fn( div );
        } catch (e) {
          return false;
        } finally {
          // release memory in IE
          div = null;
        }
      },

    // Check if getElementsByTagName("*") returns only elements
      assertTagNameNoComments = assert(function( div ) {
        div.appendChild( document.createComment("") );
        return !div.getElementsByTagName("*").length;
      }),

    // Check if getAttribute returns normalized href attributes
      assertHrefNotNormalized = assert(function( div ) {
        div.innerHTML = "<a href='#'></a>";
        return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
          div.firstChild.getAttribute("href") === "#";
      }),

    // Check if attributes should be retrieved by attribute nodes
      assertAttributes = assert(function( div ) {
        div.innerHTML = "<select></select>";
        var type = typeof div.lastChild.getAttribute("multiple");
        // IE8 returns a string for some attributes even when not present
        return type !== "boolean" && type !== "string";
      }),

    // Check if getElementsByClassName can be trusted
      assertUsableClassName = assert(function( div ) {
        // Opera can't find a second classname (in 9.6)
        div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
        if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
          return false;
        }

        // Safari 3.2 caches class attributes and doesn't catch changes
        div.lastChild.className = "e";
        return div.getElementsByClassName("e").length === 2;
      }),

    // Check if getElementById returns elements by name
    // Check if getElementsByName privileges form controls or returns elements by ID
      assertUsableName = assert(function( div ) {
        // Inject content
        div.id = expando + 0;
        div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
        docElem.insertBefore( div, docElem.firstChild );

        // Test
        var pass = document.getElementsByName &&
          // buggy browsers will return fewer than the correct 2
          document.getElementsByName( expando ).length === 2 +
            // buggy browsers will return more than the correct 0
            document.getElementsByName( expando + 0 ).length;
        assertGetIdNotName = !document.getElementById( expando );

        // Cleanup
        docElem.removeChild( div );

        return pass;
      });

// If slice is not available, provide a backup
    try {
      slice.call( docElem.childNodes, 0 )[0].nodeType;
    } catch ( e ) {
      slice = function( i ) {
        var elem,
          results = [];
        for ( ; (elem = this[i]); i++ ) {
          results.push( elem );
        }
        return results;
      };
    }

    function Sizzle( selector, context, results, seed ) {
      results = results || [];
      context = context || document;
      var match, elem, xml, m,
        nodeType = context.nodeType;

      if ( !selector || typeof selector !== "string" ) {
        return results;
      }

      if ( nodeType !== 1 && nodeType !== 9 ) {
        return [];
      }

      xml = isXML( context );

      if ( !xml && !seed ) {
        if ( (match = rquickExpr.exec( selector )) ) {
          // Speed-up: Sizzle("#ID")
          if ( (m = match[1]) ) {
            if ( nodeType === 9 ) {
              elem = context.getElementById( m );
              // Check parentNode to catch when Blackberry 4.6 returns
              // nodes that are no longer in the document #6963
              if ( elem && elem.parentNode ) {
                // Handle the case where IE, Opera, and Webkit return items
                // by name instead of ID
                if ( elem.id === m ) {
                  results.push( elem );
                  return results;
                }
              } else {
                return results;
              }
            } else {
              // Context is not a document
              if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
                contains( context, elem ) && elem.id === m ) {
                results.push( elem );
                return results;
              }
            }

            // Speed-up: Sizzle("TAG")
          } else if ( match[2] ) {
            push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
            return results;

            // Speed-up: Sizzle(".CLASS")
          } else if ( (m = match[3]) && assertUsableClassName && context.getElementsByClassName ) {
            push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
            return results;
          }
        }
      }

      // All others
      return select( selector.replace( rtrim, "$1" ), context, results, seed, xml );
    }

    Sizzle.matches = function( expr, elements ) {
      return Sizzle( expr, null, null, elements );
    };

    Sizzle.matchesSelector = function( elem, expr ) {
      return Sizzle( expr, null, null, [ elem ] ).length > 0;
    };

// Returns a function to use in pseudos for input types
    function createInputPseudo( type ) {
      return function( elem ) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === type;
      };
    }

// Returns a function to use in pseudos for buttons
    function createButtonPseudo( type ) {
      return function( elem ) {
        var name = elem.nodeName.toLowerCase();
        return (name === "input" || name === "button") && elem.type === type;
      };
    }

// Returns a function to use in pseudos for positionals
    function createPositionalPseudo( fn ) {
      return markFunction(function( argument ) {
        argument = +argument;
        return markFunction(function( seed, matches ) {
          var j,
            matchIndexes = fn( [], seed.length, argument ),
            i = matchIndexes.length;

          // Match elements found at the specified indexes
          while ( i-- ) {
            if ( seed[ (j = matchIndexes[i]) ] ) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }

    /**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */
    getText = Sizzle.getText = function( elem ) {
      var node,
        ret = "",
        i = 0,
        nodeType = elem.nodeType;

      if ( nodeType ) {
        if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
          // Use textContent for elements
          // innerText usage removed for consistency of new lines (see #11153)
          if ( typeof elem.textContent === "string" ) {
            return elem.textContent;
          } else {
            // Traverse its children
            for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
              ret += getText( elem );
            }
          }
        } else if ( nodeType === 3 || nodeType === 4 ) {
          return elem.nodeValue;
        }
        // Do not include comment or processing instruction nodes
      } else {

        // If no nodeType, this is expected to be an array
        for ( ; (node = elem[i]); i++ ) {
          // Do not traverse comment nodes
          ret += getText( node );
        }
      }
      return ret;
    };

    isXML = Sizzle.isXML = function( elem ) {
      // documentElement is verified for cases where it doesn't yet exist
      // (such as loading iframes in IE - #4833)
      var documentElement = elem && (elem.ownerDocument || elem).documentElement;
      return documentElement ? documentElement.nodeName !== "HTML" : false;
    };

// Element contains another
    contains = Sizzle.contains = docElem.contains ?
      function( a, b ) {
        var adown = a.nodeType === 9 ? a.documentElement : a,
          bup = b && b.parentNode;
        return a === bup || !!( bup && bup.nodeType === 1 && adown.contains && adown.contains(bup) );
      } :
      docElem.compareDocumentPosition ?
        function( a, b ) {
          return b && !!( a.compareDocumentPosition( b ) & 16 );
        } :
        function( a, b ) {
          while ( (b = b.parentNode) ) {
            if ( b === a ) {
              return true;
            }
          }
          return false;
        };

    Sizzle.attr = function( elem, name ) {
      var val,
        xml = isXML( elem );

      if ( !xml ) {
        name = name.toLowerCase();
      }
      if ( (val = Expr.attrHandle[ name ]) ) {
        return val( elem );
      }
      if ( xml || assertAttributes ) {
        return elem.getAttribute( name );
      }
      val = elem.getAttributeNode( name );
      return val ?
        typeof elem[ name ] === "boolean" ?
          elem[ name ] ? name : null :
          val.specified ? val.value : null :
        null;
    };

    Expr = Sizzle.selectors = {

      // Can be adjusted by the user
      cacheLength: 50,

      createPseudo: markFunction,

      match: matchExpr,

      // IE6/7 return a modified href
      attrHandle: assertHrefNotNormalized ?
      {} :
      {
        "href": function( elem ) {
          return elem.getAttribute( "href", 2 );
        },
        "type": function( elem ) {
          return elem.getAttribute("type");
        }
      },

      find: {
        "ID": assertGetIdNotName ?
          function( id, context, xml ) {
            if ( typeof context.getElementById !== strundefined && !xml ) {
              var m = context.getElementById( id );
              // Check parentNode to catch when Blackberry 4.6 returns
              // nodes that are no longer in the document #6963
              return m && m.parentNode ? [m] : [];
            }
          } :
          function( id, context, xml ) {
            if ( typeof context.getElementById !== strundefined && !xml ) {
              var m = context.getElementById( id );

              return m ?
                m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
                  [m] :
                  undefined :
                [];
            }
          },

        "TAG": assertTagNameNoComments ?
          function( tag, context ) {
            if ( typeof context.getElementsByTagName !== strundefined ) {
              return context.getElementsByTagName( tag );
            }
          } :
          function( tag, context ) {
            var results = context.getElementsByTagName( tag );

            // Filter out possible comments
            if ( tag === "*" ) {
              var elem,
                tmp = [],
                i = 0;

              for ( ; (elem = results[i]); i++ ) {
                if ( elem.nodeType === 1 ) {
                  tmp.push( elem );
                }
              }

              return tmp;
            }
            return results;
          },

        "NAME": assertUsableName && function( tag, context ) {
          if ( typeof context.getElementsByName !== strundefined ) {
            return context.getElementsByName( name );
          }
        },

        "CLASS": assertUsableClassName && function( className, context, xml ) {
          if ( typeof context.getElementsByClassName !== strundefined && !xml ) {
            return context.getElementsByClassName( className );
          }
        }
      },

      relative: {
        ">": { dir: "parentNode", first: true },
        " ": { dir: "parentNode" },
        "+": { dir: "previousSibling", first: true },
        "~": { dir: "previousSibling" }
      },

      preFilter: {
        "ATTR": function( match ) {
          match[1] = match[1].replace( rbackslash, "" );

          // Move the given value to match[3] whether quoted or unquoted
          match[3] = ( match[4] || match[5] || "" ).replace( rbackslash, "" );

          if ( match[2] === "~=" ) {
            match[3] = " " + match[3] + " ";
          }

          return match.slice( 0, 4 );
        },

        "CHILD": function( match ) {
          /* matches from matchExpr["CHILD"]
           1 type (only|nth|...)
           2 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
           3 xn-component of xn+y argument ([+-]?\d*n|)
           4 sign of xn-component
           5 x of xn-component
           6 sign of y-component
           7 y of y-component
           */
          match[1] = match[1].toLowerCase();

          if ( match[1] === "nth" ) {
            // nth-child requires argument
            if ( !match[2] ) {
              Sizzle.error( match[0] );
            }

            // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1
            match[3] = +( match[3] ? match[4] + (match[5] || 1) : 2 * ( match[2] === "even" || match[2] === "odd" ) );
            match[4] = +( ( match[6] + match[7] ) || match[2] === "odd" );

            // other types prohibit arguments
          } else if ( match[2] ) {
            Sizzle.error( match[0] );
          }

          return match;
        },

        "PSEUDO": function( match ) {
          var unquoted, excess;
          if ( matchExpr["CHILD"].test( match[0] ) ) {
            return null;
          }

          if ( match[3] ) {
            match[2] = match[3];
          } else if ( (unquoted = match[4]) ) {
            // Only check arguments that contain a pseudo
            if ( rpseudo.test(unquoted) &&
              // Get excess from tokenize (recursively)
              (excess = tokenize( unquoted, true )) &&
              // advance to the next closing parenthesis
              (excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

              // excess is a negative index
              unquoted = unquoted.slice( 0, excess );
              match[0] = match[0].slice( 0, excess );
            }
            match[2] = unquoted;
          }

          // Return only captures needed by the pseudo filter method (type and argument)
          return match.slice( 0, 3 );
        }
      },

      filter: {
        "ID": assertGetIdNotName ?
          function( id ) {
            id = id.replace( rbackslash, "" );
            return function( elem ) {
              return elem.getAttribute("id") === id;
            };
          } :
          function( id ) {
            id = id.replace( rbackslash, "" );
            return function( elem ) {
              var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
              return node && node.value === id;
            };
          },

        "TAG": function( nodeName ) {
          if ( nodeName === "*" ) {
            return function() { return true; };
          }
          nodeName = nodeName.replace( rbackslash, "" ).toLowerCase();

          return function( elem ) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
        },

        "CLASS": function( className ) {
          var pattern = classCache[ expando ][ className ];
          if ( !pattern ) {
            pattern = classCache( className, new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)") );
          }
          return function( elem ) {
            return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
          };
        },

        "ATTR": function( name, operator, check ) {
          return function( elem, context ) {
            var result = Sizzle.attr( elem, name );

            if ( result == null ) {
              return operator === "!=";
            }
            if ( !operator ) {
              return true;
            }

            result += "";

            return operator === "=" ? result === check :
              operator === "!=" ? result !== check :
                operator === "^=" ? check && result.indexOf( check ) === 0 :
                  operator === "*=" ? check && result.indexOf( check ) > -1 :
                    operator === "$=" ? check && result.substr( result.length - check.length ) === check :
                      operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
                        operator === "|=" ? result === check || result.substr( 0, check.length + 1 ) === check + "-" :
                          false;
          };
        },

        "CHILD": function( type, argument, first, last ) {

          if ( type === "nth" ) {
            return function( elem ) {
              var node, diff,
                parent = elem.parentNode;

              if ( first === 1 && last === 0 ) {
                return true;
              }

              if ( parent ) {
                diff = 0;
                for ( node = parent.firstChild; node; node = node.nextSibling ) {
                  if ( node.nodeType === 1 ) {
                    diff++;
                    if ( elem === node ) {
                      break;
                    }
                  }
                }
              }

              // Incorporate the offset (or cast to NaN), then check against cycle size
              diff -= last;
              return diff === first || ( diff % first === 0 && diff / first >= 0 );
            };
          }

          return function( elem ) {
            var node = elem;

            switch ( type ) {
              case "only":
              case "first":
                while ( (node = node.previousSibling) ) {
                  if ( node.nodeType === 1 ) {
                    return false;
                  }
                }

                if ( type === "first" ) {
                  return true;
                }

                node = elem;

              /* falls through */
              case "last":
                while ( (node = node.nextSibling) ) {
                  if ( node.nodeType === 1 ) {
                    return false;
                  }
                }

                return true;
            }
          };
        },

        "PSEUDO": function( pseudo, argument ) {
          // pseudo-class names are case-insensitive
          // http://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args,
            fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
              Sizzle.error( "unsupported pseudo: " + pseudo );

          // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as Sizzle does
          if ( fn[ expando ] ) {
            return fn( argument );
          }

          // But maintain support for old signatures
          if ( fn.length > 1 ) {
            args = [ pseudo, pseudo, "", argument ];
            return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
              markFunction(function( seed, matches ) {
                var idx,
                  matched = fn( seed, argument ),
                  i = matched.length;
                while ( i-- ) {
                  idx = indexOf.call( seed, matched[i] );
                  seed[ idx ] = !( matches[ idx ] = matched[i] );
                }
              }) :
              function( elem ) {
                return fn( elem, 0, args );
              };
          }

          return fn;
        }
      },

      pseudos: {
        "not": markFunction(function( selector ) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [],
            results = [],
            matcher = compile( selector.replace( rtrim, "$1" ) );

          return matcher[ expando ] ?
            markFunction(function( seed, matches, context, xml ) {
              var elem,
                unmatched = matcher( seed, null, xml, [] ),
                i = seed.length;

              // Match elements unmatched by `matcher`
              while ( i-- ) {
                if ( (elem = unmatched[i]) ) {
                  seed[i] = !(matches[i] = elem);
                }
              }
            }) :
            function( elem, context, xml ) {
              input[0] = elem;
              matcher( input, null, xml, results );
              return !results.pop();
            };
        }),

        "has": markFunction(function( selector ) {
          return function( elem ) {
            return Sizzle( selector, elem ).length > 0;
          };
        }),

        "contains": markFunction(function( text ) {
          return function( elem ) {
            return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
          };
        }),

        "enabled": function( elem ) {
          return elem.disabled === false;
        },

        "disabled": function( elem ) {
          return elem.disabled === true;
        },

        "checked": function( elem ) {
          // In CSS3, :checked should return both checked and selected elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          var nodeName = elem.nodeName.toLowerCase();
          return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
        },

        "selected": function( elem ) {
          // Accessing this property makes selected-by-default
          // options in Safari work properly
          if ( elem.parentNode ) {
            elem.parentNode.selectedIndex;
          }

          return elem.selected === true;
        },

        "parent": function( elem ) {
          return !Expr.pseudos["empty"]( elem );
        },

        "empty": function( elem ) {
          // http://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
          //   not comment, processing instructions, or others
          // Thanks to Diego Perini for the nodeName shortcut
          //   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
          var nodeType;
          elem = elem.firstChild;
          while ( elem ) {
            if ( elem.nodeName > "@" || (nodeType = elem.nodeType) === 3 || nodeType === 4 ) {
              return false;
            }
            elem = elem.nextSibling;
          }
          return true;
        },

        "header": function( elem ) {
          return rheader.test( elem.nodeName );
        },

        "text": function( elem ) {
          var type, attr;
          // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
          // use getAttribute instead to test this case
          return elem.nodeName.toLowerCase() === "input" &&
            (type = elem.type) === "text" &&
            ( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === type );
        },

        // Input types
        "radio": createInputPseudo("radio"),
        "checkbox": createInputPseudo("checkbox"),
        "file": createInputPseudo("file"),
        "password": createInputPseudo("password"),
        "image": createInputPseudo("image"),

        "submit": createButtonPseudo("submit"),
        "reset": createButtonPseudo("reset"),

        "button": function( elem ) {
          var name = elem.nodeName.toLowerCase();
          return name === "input" && elem.type === "button" || name === "button";
        },

        "input": function( elem ) {
          return rinputs.test( elem.nodeName );
        },

        "focus": function( elem ) {
          var doc = elem.ownerDocument;
          return elem === doc.activeElement && (!doc.hasFocus || doc.hasFocus()) && !!(elem.type || elem.href);
        },

        "active": function( elem ) {
          return elem === elem.ownerDocument.activeElement;
        },

        // Positional types
        "first": createPositionalPseudo(function( matchIndexes, length, argument ) {
          return [ 0 ];
        }),

        "last": createPositionalPseudo(function( matchIndexes, length, argument ) {
          return [ length - 1 ];
        }),

        "eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
          return [ argument < 0 ? argument + length : argument ];
        }),

        "even": createPositionalPseudo(function( matchIndexes, length, argument ) {
          for ( var i = 0; i < length; i += 2 ) {
            matchIndexes.push( i );
          }
          return matchIndexes;
        }),

        "odd": createPositionalPseudo(function( matchIndexes, length, argument ) {
          for ( var i = 1; i < length; i += 2 ) {
            matchIndexes.push( i );
          }
          return matchIndexes;
        }),

        "lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
          for ( var i = argument < 0 ? argument + length : argument; --i >= 0; ) {
            matchIndexes.push( i );
          }
          return matchIndexes;
        }),

        "gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
          for ( var i = argument < 0 ? argument + length : argument; ++i < length; ) {
            matchIndexes.push( i );
          }
          return matchIndexes;
        })
      }
    };

    function siblingCheck( a, b, ret ) {
      if ( a === b ) {
        return ret;
      }

      var cur = a.nextSibling;

      while ( cur ) {
        if ( cur === b ) {
          return -1;
        }

        cur = cur.nextSibling;
      }

      return 1;
    }

    sortOrder = docElem.compareDocumentPosition ?
      function( a, b ) {
        if ( a === b ) {
          hasDuplicate = true;
          return 0;
        }

        return ( !a.compareDocumentPosition || !b.compareDocumentPosition ?
          a.compareDocumentPosition :
          a.compareDocumentPosition(b) & 4
          ) ? -1 : 1;
      } :
      function( a, b ) {
        // The nodes are identical, we can exit early
        if ( a === b ) {
          hasDuplicate = true;
          return 0;

          // Fallback to using sourceIndex (in IE) if it's available on both nodes
        } else if ( a.sourceIndex && b.sourceIndex ) {
          return a.sourceIndex - b.sourceIndex;
        }

        var al, bl,
          ap = [],
          bp = [],
          aup = a.parentNode,
          bup = b.parentNode,
          cur = aup;

        // If the nodes are siblings (or identical) we can do a quick check
        if ( aup === bup ) {
          return siblingCheck( a, b );

          // If no parents were found then the nodes are disconnected
        } else if ( !aup ) {
          return -1;

        } else if ( !bup ) {
          return 1;
        }

        // Otherwise they're somewhere else in the tree so we need
        // to build up a full list of the parentNodes for comparison
        while ( cur ) {
          ap.unshift( cur );
          cur = cur.parentNode;
        }

        cur = bup;

        while ( cur ) {
          bp.unshift( cur );
          cur = cur.parentNode;
        }

        al = ap.length;
        bl = bp.length;

        // Start walking down the tree looking for a discrepancy
        for ( var i = 0; i < al && i < bl; i++ ) {
          if ( ap[i] !== bp[i] ) {
            return siblingCheck( ap[i], bp[i] );
          }
        }

        // We ended someplace up the tree so do a sibling check
        return i === al ?
          siblingCheck( a, bp[i], -1 ) :
          siblingCheck( ap[i], b, 1 );
      };

// Always assume the presence of duplicates if sort doesn't
// pass them to our comparison function (as in Google Chrome).
    [0, 0].sort( sortOrder );
    baseHasDuplicate = !hasDuplicate;

// Document sorting and removing duplicates
    Sizzle.uniqueSort = function( results ) {
      var elem,
        i = 1;

      hasDuplicate = baseHasDuplicate;
      results.sort( sortOrder );

      if ( hasDuplicate ) {
        for ( ; (elem = results[i]); i++ ) {
          if ( elem === results[ i - 1 ] ) {
            results.splice( i--, 1 );
          }
        }
      }

      return results;
    };

    Sizzle.error = function( msg ) {
      throw new Error( "Syntax error, unrecognized expression: " + msg );
    };

    function tokenize( selector, parseOnly ) {
      var matched, match, tokens, type, soFar, groups, preFilters,
        cached = tokenCache[ expando ][ selector ];

      if ( cached ) {
        return parseOnly ? 0 : cached.slice( 0 );
      }

      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;

      while ( soFar ) {

        // Comma and first run
        if ( !matched || (match = rcomma.exec( soFar )) ) {
          if ( match ) {
            soFar = soFar.slice( match[0].length );
          }
          groups.push( tokens = [] );
        }

        matched = false;

        // Combinators
        if ( (match = rcombinators.exec( soFar )) ) {
          tokens.push( matched = new Token( match.shift() ) );
          soFar = soFar.slice( matched.length );

          // Cast descendant combinators to space
          matched.type = match[0].replace( rtrim, " " );
        }

        // Filters
        for ( type in Expr.filter ) {
          if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
            // The last two arguments here are (context, xml) for backCompat
            (match = preFilters[ type ]( match, document, true ))) ) {

            tokens.push( matched = new Token( match.shift() ) );
            soFar = soFar.slice( matched.length );
            matched.type = type;
            matched.matches = match;
          }
        }

        if ( !matched ) {
          break;
        }
      }

      // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens
      return parseOnly ?
        soFar.length :
        soFar ?
          Sizzle.error( selector ) :
          // Cache the tokens
          tokenCache( selector, groups ).slice( 0 );
    }

    function addCombinator( matcher, combinator, base ) {
      var dir = combinator.dir,
        checkNonElements = base && combinator.dir === "parentNode",
        doneName = done++;

      return combinator.first ?
        // Check against closest ancestor/preceding element
        function( elem, context, xml ) {
          while ( (elem = elem[ dir ]) ) {
            if ( checkNonElements || elem.nodeType === 1  ) {
              return matcher( elem, context, xml );
            }
          }
        } :

        // Check against all ancestor/preceding elements
        function( elem, context, xml ) {
          // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
          if ( !xml ) {
            var cache,
              dirkey = dirruns + " " + doneName + " ",
              cachedkey = dirkey + cachedruns;
            while ( (elem = elem[ dir ]) ) {
              if ( checkNonElements || elem.nodeType === 1 ) {
                if ( (cache = elem[ expando ]) === cachedkey ) {
                  return elem.sizset;
                } else if ( typeof cache === "string" && cache.indexOf(dirkey) === 0 ) {
                  if ( elem.sizset ) {
                    return elem;
                  }
                } else {
                  elem[ expando ] = cachedkey;
                  if ( matcher( elem, context, xml ) ) {
                    elem.sizset = true;
                    return elem;
                  }
                  elem.sizset = false;
                }
              }
            }
          } else {
            while ( (elem = elem[ dir ]) ) {
              if ( checkNonElements || elem.nodeType === 1 ) {
                if ( matcher( elem, context, xml ) ) {
                  return elem;
                }
              }
            }
          }
        };
    }

    function elementMatcher( matchers ) {
      return matchers.length > 1 ?
        function( elem, context, xml ) {
          var i = matchers.length;
          while ( i-- ) {
            if ( !matchers[i]( elem, context, xml ) ) {
              return false;
            }
          }
          return true;
        } :
        matchers[0];
    }

    function condense( unmatched, map, filter, context, xml ) {
      var elem,
        newUnmatched = [],
        i = 0,
        len = unmatched.length,
        mapped = map != null;

      for ( ; i < len; i++ ) {
        if ( (elem = unmatched[i]) ) {
          if ( !filter || filter( elem, context, xml ) ) {
            newUnmatched.push( elem );
            if ( mapped ) {
              map.push( i );
            }
          }
        }
      }

      return newUnmatched;
    }

    function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
      if ( postFilter && !postFilter[ expando ] ) {
        postFilter = setMatcher( postFilter );
      }
      if ( postFinder && !postFinder[ expando ] ) {
        postFinder = setMatcher( postFinder, postSelector );
      }
      return markFunction(function( seed, results, context, xml ) {
        // Positional selectors apply to seed elements, so it is invalid to follow them with relative ones
        if ( seed && postFinder ) {
          return;
        }

        var i, elem, postFilterIn,
          preMap = [],
          postMap = [],
          preexisting = results.length,

        // Get initial elements from seed or context
          elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [], seed ),

        // Prefilter to get matcher input, preserving a map for seed-results synchronization
          matcherIn = preFilter && ( seed || !selector ) ?
            condense( elems, preMap, preFilter, context, xml ) :
            elems,

          matcherOut = matcher ?
            // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
            postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

              // ...intermediate processing is necessary
              [] :

              // ...otherwise use results directly
              results :
            matcherIn;

        // Find primary matches
        if ( matcher ) {
          matcher( matcherIn, matcherOut, context, xml );
        }

        // Apply postFilter
        if ( postFilter ) {
          postFilterIn = condense( matcherOut, postMap );
          postFilter( postFilterIn, [], context, xml );

          // Un-match failing elements by moving them back to matcherIn
          i = postFilterIn.length;
          while ( i-- ) {
            if ( (elem = postFilterIn[i]) ) {
              matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
            }
          }
        }

        // Keep seed and results synchronized
        if ( seed ) {
          // Ignore postFinder because it can't coexist with seed
          i = preFilter && matcherOut.length;
          while ( i-- ) {
            if ( (elem = matcherOut[i]) ) {
              seed[ preMap[i] ] = !(results[ preMap[i] ] = elem);
            }
          }
        } else {
          matcherOut = condense(
            matcherOut === results ?
              matcherOut.splice( preexisting, matcherOut.length ) :
              matcherOut
          );
          if ( postFinder ) {
            postFinder( null, results, matcherOut, xml );
          } else {
            push.apply( results, matcherOut );
          }
        }
      });
    }

    function matcherFromTokens( tokens ) {
      var checkContext, matcher, j,
        len = tokens.length,
        leadingRelative = Expr.relative[ tokens[0].type ],
        implicitRelative = leadingRelative || Expr.relative[" "],
        i = leadingRelative ? 1 : 0,

      // The foundational matcher ensures that elements are reachable from top-level context(s)
        matchContext = addCombinator( function( elem ) {
          return elem === checkContext;
        }, implicitRelative, true ),
        matchAnyContext = addCombinator( function( elem ) {
          return indexOf.call( checkContext, elem ) > -1;
        }, implicitRelative, true ),
        matchers = [ function( elem, context, xml ) {
          return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
            (checkContext = context).nodeType ?
              matchContext( elem, context, xml ) :
              matchAnyContext( elem, context, xml ) );
        } ];

      for ( ; i < len; i++ ) {
        if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
          matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
        } else {
          // The concatenated values are (context, xml) for backCompat
          matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

          // Return special upon seeing a positional matcher
          if ( matcher[ expando ] ) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;
            for ( ; j < len; j++ ) {
              if ( Expr.relative[ tokens[j].type ] ) {
                break;
              }
            }
            return setMatcher(
              i > 1 && elementMatcher( matchers ),
              i > 1 && tokens.slice( 0, i - 1 ).join("").replace( rtrim, "$1" ),
              matcher,
              i < j && matcherFromTokens( tokens.slice( i, j ) ),
              j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
              j < len && tokens.join("")
            );
          }
          matchers.push( matcher );
        }
      }

      return elementMatcher( matchers );
    }

    function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
      var bySet = setMatchers.length > 0,
        byElement = elementMatchers.length > 0,
        superMatcher = function( seed, context, xml, results, expandContext ) {
          var elem, j, matcher,
            setMatched = [],
            matchedCount = 0,
            i = "0",
            unmatched = seed && [],
            outermost = expandContext != null,
            contextBackup = outermostContext,
          // We must always have either seed elements or context
            elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
          // Nested matchers should use non-integer dirruns
            dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.E);

          if ( outermost ) {
            outermostContext = context !== document && context;
            cachedruns = superMatcher.el;
          }

          // Add elements passing elementMatchers directly to results
          for ( ; (elem = elems[i]) != null; i++ ) {
            if ( byElement && elem ) {
              for ( j = 0; (matcher = elementMatchers[j]); j++ ) {
                if ( matcher( elem, context, xml ) ) {
                  results.push( elem );
                  break;
                }
              }
              if ( outermost ) {
                dirruns = dirrunsUnique;
                cachedruns = ++superMatcher.el;
              }
            }

            // Track unmatched elements for set filters
            if ( bySet ) {
              // They will have gone through all possible matchers
              if ( (elem = !matcher && elem) ) {
                matchedCount--;
              }

              // Lengthen the array for every element, matched or not
              if ( seed ) {
                unmatched.push( elem );
              }
            }
          }

          // Apply set filters to unmatched elements
          matchedCount += i;
          if ( bySet && i !== matchedCount ) {
            for ( j = 0; (matcher = setMatchers[j]); j++ ) {
              matcher( unmatched, setMatched, context, xml );
            }

            if ( seed ) {
              // Reintegrate element matches to eliminate the need for sorting
              if ( matchedCount > 0 ) {
                while ( i-- ) {
                  if ( !(unmatched[i] || setMatched[i]) ) {
                    setMatched[i] = pop.call( results );
                  }
                }
              }

              // Discard index placeholder values to get only actual matches
              setMatched = condense( setMatched );
            }

            // Add matches to results
            push.apply( results, setMatched );

            // Seedless set matches succeeding multiple successful matchers stipulate sorting
            if ( outermost && !seed && setMatched.length > 0 &&
              ( matchedCount + setMatchers.length ) > 1 ) {

              Sizzle.uniqueSort( results );
            }
          }

          // Override manipulation of globals by nested matchers
          if ( outermost ) {
            dirruns = dirrunsUnique;
            outermostContext = contextBackup;
          }

          return unmatched;
        };

      superMatcher.el = 0;
      return bySet ?
        markFunction( superMatcher ) :
        superMatcher;
    }

    compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
      var i,
        setMatchers = [],
        elementMatchers = [],
        cached = compilerCache[ expando ][ selector ];

      if ( !cached ) {
        // Generate a function of recursive functions that can be used to check each element
        if ( !group ) {
          group = tokenize( selector );
        }
        i = group.length;
        while ( i-- ) {
          cached = matcherFromTokens( group[i] );
          if ( cached[ expando ] ) {
            setMatchers.push( cached );
          } else {
            elementMatchers.push( cached );
          }
        }

        // Cache the compiled function
        cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
      }
      return cached;
    };

    function multipleContexts( selector, contexts, results, seed ) {
      var i = 0,
        len = contexts.length;
      for ( ; i < len; i++ ) {
        Sizzle( selector, contexts[i], results, seed );
      }
      return results;
    }

    function select( selector, context, results, seed, xml ) {
      var i, tokens, token, type, find,
        match = tokenize( selector ),
        j = match.length;

      if ( !seed ) {
        // Try to minimize operations if there is only one group
        if ( match.length === 1 ) {

          // Take a shortcut and set the context if the root selector is an ID
          tokens = match[0] = match[0].slice( 0 );
          if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
            context.nodeType === 9 && !xml &&
            Expr.relative[ tokens[1].type ] ) {

            context = Expr.find["ID"]( token.matches[0].replace( rbackslash, "" ), context, xml )[0];
            if ( !context ) {
              return results;
            }

            selector = selector.slice( tokens.shift().length );
          }

          // Fetch a seed set for right-to-left matching
          for ( i = matchExpr["POS"].test( selector ) ? -1 : tokens.length - 1; i >= 0; i-- ) {
            token = tokens[i];

            // Abort if we hit a combinator
            if ( Expr.relative[ (type = token.type) ] ) {
              break;
            }
            if ( (find = Expr.find[ type ]) ) {
              // Search, expanding context for leading sibling combinators
              if ( (seed = find(
                token.matches[0].replace( rbackslash, "" ),
                rsibling.test( tokens[0].type ) && context.parentNode || context,
                xml
              )) ) {

                // If seed is empty or no tokens remain, we can return early
                tokens.splice( i, 1 );
                selector = seed.length && tokens.join("");
                if ( !selector ) {
                  push.apply( results, slice.call( seed, 0 ) );
                  return results;
                }

                break;
              }
            }
          }
        }
      }

      // Compile and execute a filtering function
      // Provide `match` to avoid retokenization if we modified the selector above
      compile( selector, match )(
        seed,
        context,
        xml,
        results,
        rsibling.test( selector )
      );
      return results;
    }

    if ( document.querySelectorAll ) {
      (function() {
        var disconnectedMatch,
          oldSelect = select,
          rescape = /'|\\/g,
          rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

        // qSa(:focus) reports false when true (Chrome 21),
        // A support test would require too much code (would include document ready)
          rbuggyQSA = [":focus"],

        // matchesSelector(:focus) reports false when true (Chrome 21),
        // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
        // A support test would require too much code (would include document ready)
        // just skip matchesSelector for :active
          rbuggyMatches = [ ":active", ":focus" ],
          matches = docElem.matchesSelector ||
            docElem.mozMatchesSelector ||
            docElem.webkitMatchesSelector ||
            docElem.oMatchesSelector ||
            docElem.msMatchesSelector;

        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function( div ) {
          // Select is set to empty string on purpose
          // This is to test IE's treatment of not explictly
          // setting a boolean content attribute,
          // since its presence should be enough
          // http://bugs.jquery.com/ticket/12359
          div.innerHTML = "<select><option selected=''></option></select>";

          // IE8 - Some boolean attributes are not treated correctly
          if ( !div.querySelectorAll("[selected]").length ) {
            rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
          }

          // Webkit/Opera - :checked should return selected option elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          // IE8 throws error here (do not put tests after this one)
          if ( !div.querySelectorAll(":checked").length ) {
            rbuggyQSA.push(":checked");
          }
        });

        assert(function( div ) {

          // Opera 10-12/IE9 - ^= $= *= and empty values
          // Should not select anything
          div.innerHTML = "<p test=''></p>";
          if ( div.querySelectorAll("[test^='']").length ) {
            rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
          }

          // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
          // IE8 throws error here (do not put tests after this one)
          div.innerHTML = "<input type='hidden'/>";
          if ( !div.querySelectorAll(":enabled").length ) {
            rbuggyQSA.push(":enabled", ":disabled");
          }
        });

        // rbuggyQSA always contains :focus, so no need for a length check
        rbuggyQSA = /* rbuggyQSA.length && */ new RegExp( rbuggyQSA.join("|") );

        select = function( selector, context, results, seed, xml ) {
          // Only use querySelectorAll when not filtering,
          // when this is not xml,
          // and when no QSA bugs apply
          if ( !seed && !xml && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
            var groups, i,
              old = true,
              nid = expando,
              newContext = context,
              newSelector = context.nodeType === 9 && selector;

            // qSA works strangely on Element-rooted queries
            // We can work around this by specifying an extra ID on the root
            // and working up from there (Thanks to Andrew Dupont for the technique)
            // IE 8 doesn't work on object elements
            if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
              groups = tokenize( selector );

              if ( (old = context.getAttribute("id")) ) {
                nid = old.replace( rescape, "\\$&" );
              } else {
                context.setAttribute( "id", nid );
              }
              nid = "[id='" + nid + "'] ";

              i = groups.length;
              while ( i-- ) {
                groups[i] = nid + groups[i].join("");
              }
              newContext = rsibling.test( selector ) && context.parentNode || context;
              newSelector = groups.join(",");
            }

            if ( newSelector ) {
              try {
                push.apply( results, slice.call( newContext.querySelectorAll(
                  newSelector
                ), 0 ) );
                return results;
              } catch(qsaError) {
              } finally {
                if ( !old ) {
                  context.removeAttribute("id");
                }
              }
            }
          }

          return oldSelect( selector, context, results, seed, xml );
        };

        if ( matches ) {
          assert(function( div ) {
            // Check to see if it's possible to do matchesSelector
            // on a disconnected node (IE 9)
            disconnectedMatch = matches.call( div, "div" );

            // This should fail with an exception
            // Gecko does not error, returns false instead
            try {
              matches.call( div, "[test!='']:sizzle" );
              rbuggyMatches.push( "!=", pseudos );
            } catch ( e ) {}
          });

          // rbuggyMatches always contains :active and :focus, so no need for a length check
          rbuggyMatches = /* rbuggyMatches.length && */ new RegExp( rbuggyMatches.join("|") );

          Sizzle.matchesSelector = function( elem, expr ) {
            // Make sure that attribute selectors are quoted
            expr = expr.replace( rattributeQuotes, "='$1']" );

            // rbuggyMatches always contains :active, so no need for an existence check
            if ( !isXML( elem ) && !rbuggyMatches.test( expr ) && (!rbuggyQSA || !rbuggyQSA.test( expr )) ) {
              try {
                var ret = matches.call( elem, expr );

                // IE 9's matchesSelector returns false on disconnected nodes
                if ( ret || disconnectedMatch ||
                  // As well, disconnected nodes are said to be in a document
                  // fragment in IE 9
                  elem.document && elem.document.nodeType !== 11 ) {
                  return ret;
                }
              } catch(e) {}
            }

            return Sizzle( expr, null, null, [ elem ] ).length > 0;
          };
        }
      })();
    }

// Deprecated
    Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Back-compat
    function setFilters() {}
    Expr.filters = setFilters.prototype = Expr.pseudos;
    Expr.setFilters = new setFilters();

// Override sizzle attribute retrieval
    Sizzle.attr = jQuery.attr;
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;


  })( window );
  var runtil = /Until$/,
    rparentsprev = /^(?:parents|prev(?:Until|All))/,
    isSimple = /^.[^:#\[\.,]*$/,
    rneedsContext = jQuery.expr.match.needsContext,
  // methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true
    };

  jQuery.fn.extend({
    find: function( selector ) {
      var i, l, length, n, r, ret,
        self = this;

      if ( typeof selector !== "string" ) {
        return jQuery( selector ).filter(function() {
          for ( i = 0, l = self.length; i < l; i++ ) {
            if ( jQuery.contains( self[ i ], this ) ) {
              return true;
            }
          }
        });
      }

      ret = this.pushStack( "", "find", selector );

      for ( i = 0, l = this.length; i < l; i++ ) {
        length = ret.length;
        jQuery.find( selector, this[i], ret );

        if ( i > 0 ) {
          // Make sure that the results are unique
          for ( n = length; n < ret.length; n++ ) {
            for ( r = 0; r < length; r++ ) {
              if ( ret[r] === ret[n] ) {
                ret.splice(n--, 1);
                break;
              }
            }
          }
        }
      }

      return ret;
    },

    has: function( target ) {
      var i,
        targets = jQuery( target, this ),
        len = targets.length;

      return this.filter(function() {
        for ( i = 0; i < len; i++ ) {
          if ( jQuery.contains( this, targets[i] ) ) {
            return true;
          }
        }
      });
    },

    not: function( selector ) {
      return this.pushStack( winnow(this, selector, false), "not", selector);
    },

    filter: function( selector ) {
      return this.pushStack( winnow(this, selector, true), "filter", selector );
    },

    is: function( selector ) {
      return !!selector && (
        typeof selector === "string" ?
          // If this is a positional/relative selector, check membership in the returned set
          // so $("p:first").is("p:last") won't return true for a doc with two "p".
          rneedsContext.test( selector ) ?
            jQuery( selector, this.context ).index( this[0] ) >= 0 :
            jQuery.filter( selector, this ).length > 0 :
          this.filter( selector ).length > 0 );
    },

    closest: function( selectors, context ) {
      var cur,
        i = 0,
        l = this.length,
        ret = [],
        pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
          jQuery( selectors, context || this.context ) :
          0;

      for ( ; i < l; i++ ) {
        cur = this[i];

        while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
          if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
            ret.push( cur );
            break;
          }
          cur = cur.parentNode;
        }
      }

      ret = ret.length > 1 ? jQuery.unique( ret ) : ret;

      return this.pushStack( ret, "closest", selectors );
    },

    // Determine the position of an element within
    // the matched set of elements
    index: function( elem ) {

      // No argument, return index in parent
      if ( !elem ) {
        return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
      }

      // index in selector
      if ( typeof elem === "string" ) {
        return jQuery.inArray( this[0], jQuery( elem ) );
      }

      // Locate the position of the desired element
      return jQuery.inArray(
        // If it receives a jQuery object, the first element is used
        elem.jquery ? elem[0] : elem, this );
    },

    add: function( selector, context ) {
      var set = typeof selector === "string" ?
          jQuery( selector, context ) :
          jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
        all = jQuery.merge( this.get(), set );

      return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
        all :
        jQuery.unique( all ) );
    },

    addBack: function( selector ) {
      return this.add( selector == null ?
        this.prevObject : this.prevObject.filter(selector)
      );
    }
  });

  jQuery.fn.andSelf = jQuery.fn.addBack;

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
  function isDisconnected( node ) {
    return !node || !node.parentNode || node.parentNode.nodeType === 11;
  }

  function sibling( cur, dir ) {
    do {
      cur = cur[ dir ];
    } while ( cur && cur.nodeType !== 1 );

    return cur;
  }

  jQuery.each({
    parent: function( elem ) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function( elem ) {
      return jQuery.dir( elem, "parentNode" );
    },
    parentsUntil: function( elem, i, until ) {
      return jQuery.dir( elem, "parentNode", until );
    },
    next: function( elem ) {
      return sibling( elem, "nextSibling" );
    },
    prev: function( elem ) {
      return sibling( elem, "previousSibling" );
    },
    nextAll: function( elem ) {
      return jQuery.dir( elem, "nextSibling" );
    },
    prevAll: function( elem ) {
      return jQuery.dir( elem, "previousSibling" );
    },
    nextUntil: function( elem, i, until ) {
      return jQuery.dir( elem, "nextSibling", until );
    },
    prevUntil: function( elem, i, until ) {
      return jQuery.dir( elem, "previousSibling", until );
    },
    siblings: function( elem ) {
      return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
    },
    children: function( elem ) {
      return jQuery.sibling( elem.firstChild );
    },
    contents: function( elem ) {
      return jQuery.nodeName( elem, "iframe" ) ?
        elem.contentDocument || elem.contentWindow.document :
        jQuery.merge( [], elem.childNodes );
    }
  }, function( name, fn ) {
    jQuery.fn[ name ] = function( until, selector ) {
      var ret = jQuery.map( this, fn, until );

      if ( !runtil.test( name ) ) {
        selector = until;
      }

      if ( selector && typeof selector === "string" ) {
        ret = jQuery.filter( selector, ret );
      }

      ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

      if ( this.length > 1 && rparentsprev.test( name ) ) {
        ret = ret.reverse();
      }

      return this.pushStack( ret, name, core_slice.call( arguments ).join(",") );
    };
  });

  jQuery.extend({
    filter: function( expr, elems, not ) {
      if ( not ) {
        expr = ":not(" + expr + ")";
      }

      return elems.length === 1 ?
        jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
        jQuery.find.matches(expr, elems);
    },

    dir: function( elem, dir, until ) {
      var matched = [],
        cur = elem[ dir ];

      while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
        if ( cur.nodeType === 1 ) {
          matched.push( cur );
        }
        cur = cur[dir];
      }
      return matched;
    },

    sibling: function( n, elem ) {
      var r = [];

      for ( ; n; n = n.nextSibling ) {
        if ( n.nodeType === 1 && n !== elem ) {
          r.push( n );
        }
      }

      return r;
    }
  });

// Implement the identical functionality for filter and not
  function winnow( elements, qualifier, keep ) {

    // Can't pass null or undefined to indexOf in Firefox 4
    // Set to 0 to skip string check
    qualifier = qualifier || 0;

    if ( jQuery.isFunction( qualifier ) ) {
      return jQuery.grep(elements, function( elem, i ) {
        var retVal = !!qualifier.call( elem, i, elem );
        return retVal === keep;
      });

    } else if ( qualifier.nodeType ) {
      return jQuery.grep(elements, function( elem, i ) {
        return ( elem === qualifier ) === keep;
      });

    } else if ( typeof qualifier === "string" ) {
      var filtered = jQuery.grep(elements, function( elem ) {
        return elem.nodeType === 1;
      });

      if ( isSimple.test( qualifier ) ) {
        return jQuery.filter(qualifier, filtered, !keep);
      } else {
        qualifier = jQuery.filter( qualifier, filtered );
      }
    }

    return jQuery.grep(elements, function( elem, i ) {
      return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
    });
  }
  function createSafeFragment( document ) {
    var list = nodeNames.split( "|" ),
      safeFrag = document.createDocumentFragment();

    if ( safeFrag.createElement ) {
      while ( list.length ) {
        safeFrag.createElement(
          list.pop()
        );
      }
    }
    return safeFrag;
  }

  var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
      "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
    rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
    rleadingWhitespace = /^\s+/,
    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
    rtagName = /<([\w:]+)/,
    rtbody = /<tbody/i,
    rhtml = /<|&#?\w+;/,
    rnoInnerhtml = /<(?:script|style|link)/i,
    rnocache = /<(?:script|object|embed|option|style)/i,
    rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
    rcheckableType = /^(?:checkbox|radio)$/,
  // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    rscriptType = /\/(java|ecma)script/i,
    rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,
    wrapMap = {
      option: [ 1, "<select multiple='multiple'>", "</select>" ],
      legend: [ 1, "<fieldset>", "</fieldset>" ],
      thead: [ 1, "<table>", "</table>" ],
      tr: [ 2, "<table><tbody>", "</tbody></table>" ],
      td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
      col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
      area: [ 1, "<map>", "</map>" ],
      _default: [ 0, "", "" ]
    },
    safeFragment = createSafeFragment( document ),
    fragmentDiv = safeFragment.appendChild( document.createElement("div") );

  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;

// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
// unless wrapped in a div with non-breaking characters in front of it.
  if ( !jQuery.support.htmlSerialize ) {
    wrapMap._default = [ 1, "X<div>", "</div>" ];
  }

  jQuery.fn.extend({
    text: function( value ) {
      return jQuery.access( this, function( value ) {
        return value === undefined ?
          jQuery.text( this ) :
          this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
      }, null, value, arguments.length );
    },

    wrapAll: function( html ) {
      if ( jQuery.isFunction( html ) ) {
        return this.each(function(i) {
          jQuery(this).wrapAll( html.call(this, i) );
        });
      }

      if ( this[0] ) {
        // The elements to wrap the target around
        var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

        if ( this[0].parentNode ) {
          wrap.insertBefore( this[0] );
        }

        wrap.map(function() {
          var elem = this;

          while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
            elem = elem.firstChild;
          }

          return elem;
        }).append( this );
      }

      return this;
    },

    wrapInner: function( html ) {
      if ( jQuery.isFunction( html ) ) {
        return this.each(function(i) {
          jQuery(this).wrapInner( html.call(this, i) );
        });
      }

      return this.each(function() {
        var self = jQuery( this ),
          contents = self.contents();

        if ( contents.length ) {
          contents.wrapAll( html );

        } else {
          self.append( html );
        }
      });
    },

    wrap: function( html ) {
      var isFunction = jQuery.isFunction( html );

      return this.each(function(i) {
        jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
      });
    },

    unwrap: function() {
      return this.parent().each(function() {
        if ( !jQuery.nodeName( this, "body" ) ) {
          jQuery( this ).replaceWith( this.childNodes );
        }
      }).end();
    },

    append: function() {
      return this.domManip(arguments, true, function( elem ) {
        if ( this.nodeType === 1 || this.nodeType === 11 ) {
          this.appendChild( elem );
        }
      });
    },

    prepend: function() {
      return this.domManip(arguments, true, function( elem ) {
        if ( this.nodeType === 1 || this.nodeType === 11 ) {
          this.insertBefore( elem, this.firstChild );
        }
      });
    },

    before: function() {
      if ( !isDisconnected( this[0] ) ) {
        return this.domManip(arguments, false, function( elem ) {
          this.parentNode.insertBefore( elem, this );
        });
      }

      if ( arguments.length ) {
        var set = jQuery.clean( arguments );
        return this.pushStack( jQuery.merge( set, this ), "before", this.selector );
      }
    },

    after: function() {
      if ( !isDisconnected( this[0] ) ) {
        return this.domManip(arguments, false, function( elem ) {
          this.parentNode.insertBefore( elem, this.nextSibling );
        });
      }

      if ( arguments.length ) {
        var set = jQuery.clean( arguments );
        return this.pushStack( jQuery.merge( this, set ), "after", this.selector );
      }
    },

    // keepData is for internal use only--do not document
    remove: function( selector, keepData ) {
      var elem,
        i = 0;

      for ( ; (elem = this[i]) != null; i++ ) {
        if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
          if ( !keepData && elem.nodeType === 1 ) {
            jQuery.cleanData( elem.getElementsByTagName("*") );
            jQuery.cleanData( [ elem ] );
          }

          if ( elem.parentNode ) {
            elem.parentNode.removeChild( elem );
          }
        }
      }

      return this;
    },

    empty: function() {
      var elem,
        i = 0;

      for ( ; (elem = this[i]) != null; i++ ) {
        // Remove element nodes and prevent memory leaks
        if ( elem.nodeType === 1 ) {
          jQuery.cleanData( elem.getElementsByTagName("*") );
        }

        // Remove any remaining nodes
        while ( elem.firstChild ) {
          elem.removeChild( elem.firstChild );
        }
      }

      return this;
    },

    clone: function( dataAndEvents, deepDataAndEvents ) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

      return this.map( function () {
        return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
      });
    },

    html: function( value ) {
      return jQuery.access( this, function( value ) {
        var elem = this[0] || {},
          i = 0,
          l = this.length;

        if ( value === undefined ) {
          return elem.nodeType === 1 ?
            elem.innerHTML.replace( rinlinejQuery, "" ) :
            undefined;
        }

        // See if we can take a shortcut and just use innerHTML
        if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
          ( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
          ( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
          !wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

          value = value.replace( rxhtmlTag, "<$1></$2>" );

          try {
            for (; i < l; i++ ) {
              // Remove element nodes and prevent memory leaks
              elem = this[i] || {};
              if ( elem.nodeType === 1 ) {
                jQuery.cleanData( elem.getElementsByTagName( "*" ) );
                elem.innerHTML = value;
              }
            }

            elem = 0;

            // If using innerHTML throws an exception, use the fallback method
          } catch(e) {}
        }

        if ( elem ) {
          this.empty().append( value );
        }
      }, null, value, arguments.length );
    },

    replaceWith: function( value ) {
      if ( !isDisconnected( this[0] ) ) {
        // Make sure that the elements are removed from the DOM before they are inserted
        // this can help fix replacing a parent with child elements
        if ( jQuery.isFunction( value ) ) {
          return this.each(function(i) {
            var self = jQuery(this), old = self.html();
            self.replaceWith( value.call( this, i, old ) );
          });
        }

        if ( typeof value !== "string" ) {
          value = jQuery( value ).detach();
        }

        return this.each(function() {
          var next = this.nextSibling,
            parent = this.parentNode;

          jQuery( this ).remove();

          if ( next ) {
            jQuery(next).before( value );
          } else {
            jQuery(parent).append( value );
          }
        });
      }

      return this.length ?
        this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
        this;
    },

    detach: function( selector ) {
      return this.remove( selector, true );
    },

    domManip: function( args, table, callback ) {

      // Flatten any nested arrays
      args = [].concat.apply( [], args );

      var results, first, fragment, iNoClone,
        i = 0,
        value = args[0],
        scripts = [],
        l = this.length;

      // We can't cloneNode fragments that contain checked, in WebKit
      if ( !jQuery.support.checkClone && l > 1 && typeof value === "string" && rchecked.test( value ) ) {
        return this.each(function() {
          jQuery(this).domManip( args, table, callback );
        });
      }

      if ( jQuery.isFunction(value) ) {
        return this.each(function(i) {
          var self = jQuery(this);
          args[0] = value.call( this, i, table ? self.html() : undefined );
          self.domManip( args, table, callback );
        });
      }

      if ( this[0] ) {
        results = jQuery.buildFragment( args, this, scripts );
        fragment = results.fragment;
        first = fragment.firstChild;

        if ( fragment.childNodes.length === 1 ) {
          fragment = first;
        }

        if ( first ) {
          table = table && jQuery.nodeName( first, "tr" );

          // Use the original fragment for the last item instead of the first because it can end up
          // being emptied incorrectly in certain situations (#8070).
          // Fragments from the fragment cache must always be cloned and never used in place.
          for ( iNoClone = results.cacheable || l - 1; i < l; i++ ) {
            callback.call(
              table && jQuery.nodeName( this[i], "table" ) ?
                findOrAppend( this[i], "tbody" ) :
                this[i],
              i === iNoClone ?
                fragment :
                jQuery.clone( fragment, true, true )
            );
          }
        }

        // Fix #11809: Avoid leaking memory
        fragment = first = null;

        if ( scripts.length ) {
          jQuery.each( scripts, function( i, elem ) {
            if ( elem.src ) {
              if ( jQuery.ajax ) {
                jQuery.ajax({
                  url: elem.src,
                  type: "GET",
                  dataType: "script",
                  async: false,
                  global: false,
                  "throws": true
                });
              } else {
                jQuery.error("no ajax");
              }
            } else {
              jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "" ) );
            }

            if ( elem.parentNode ) {
              elem.parentNode.removeChild( elem );
            }
          });
        }
      }

      return this;
    }
  });

  function findOrAppend( elem, tag ) {
    return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
  }

  function cloneCopyEvent( src, dest ) {

    if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
      return;
    }

    var type, i, l,
      oldData = jQuery._data( src ),
      curData = jQuery._data( dest, oldData ),
      events = oldData.events;

    if ( events ) {
      delete curData.handle;
      curData.events = {};

      for ( type in events ) {
        for ( i = 0, l = events[ type ].length; i < l; i++ ) {
          jQuery.event.add( dest, type, events[ type ][ i ] );
        }
      }
    }

    // make the cloned public data object a copy from the original
    if ( curData.data ) {
      curData.data = jQuery.extend( {}, curData.data );
    }
  }

  function cloneFixAttributes( src, dest ) {
    var nodeName;

    // We do not need to do anything for non-Elements
    if ( dest.nodeType !== 1 ) {
      return;
    }

    // clearAttributes removes the attributes, which we don't want,
    // but also removes the attachEvent events, which we *do* want
    if ( dest.clearAttributes ) {
      dest.clearAttributes();
    }

    // mergeAttributes, in contrast, only merges back on the
    // original attributes, not the events
    if ( dest.mergeAttributes ) {
      dest.mergeAttributes( src );
    }

    nodeName = dest.nodeName.toLowerCase();

    if ( nodeName === "object" ) {
      // IE6-10 improperly clones children of object elements using classid.
      // IE10 throws NoModificationAllowedError if parent is null, #12132.
      if ( dest.parentNode ) {
        dest.outerHTML = src.outerHTML;
      }

      // This path appears unavoidable for IE9. When cloning an object
      // element in IE9, the outerHTML strategy above is not sufficient.
      // If the src has innerHTML and the destination does not,
      // copy the src.innerHTML into the dest.innerHTML. #10324
      if ( jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML)) ) {
        dest.innerHTML = src.innerHTML;
      }

    } else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
      // IE6-8 fails to persist the checked state of a cloned checkbox
      // or radio button. Worse, IE6-7 fail to give the cloned element
      // a checked appearance if the defaultChecked value isn't also set

      dest.defaultChecked = dest.checked = src.checked;

      // IE6-7 get confused and end up setting the value of a cloned
      // checkbox/radio button to an empty string instead of "on"
      if ( dest.value !== src.value ) {
        dest.value = src.value;
      }

      // IE6-8 fails to return the selected option to the default selected
      // state when cloning options
    } else if ( nodeName === "option" ) {
      dest.selected = src.defaultSelected;

      // IE6-8 fails to set the defaultValue to the correct value when
      // cloning other types of input fields
    } else if ( nodeName === "input" || nodeName === "textarea" ) {
      dest.defaultValue = src.defaultValue;

      // IE blanks contents when cloning scripts
    } else if ( nodeName === "script" && dest.text !== src.text ) {
      dest.text = src.text;
    }

    // Event data gets referenced instead of copied if the expando
    // gets copied too
    dest.removeAttribute( jQuery.expando );
  }

  jQuery.buildFragment = function( args, context, scripts ) {
    var fragment, cacheable, cachehit,
      first = args[ 0 ];

    // Set context from what may come in as undefined or a jQuery collection or a node
    // Updated to fix #12266 where accessing context[0] could throw an exception in IE9/10 &
    // also doubles as fix for #8950 where plain objects caused createDocumentFragment exception
    context = context || document;
    context = !context.nodeType && context[0] || context;
    context = context.ownerDocument || context;

    // Only cache "small" (1/2 KB) HTML strings that are associated with the main document
    // Cloning options loses the selected state, so don't cache them
    // IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
    // Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
    // Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
    if ( args.length === 1 && typeof first === "string" && first.length < 512 && context === document &&
      first.charAt(0) === "<" && !rnocache.test( first ) &&
      (jQuery.support.checkClone || !rchecked.test( first )) &&
      (jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {

      // Mark cacheable and look for a hit
      cacheable = true;
      fragment = jQuery.fragments[ first ];
      cachehit = fragment !== undefined;
    }

    if ( !fragment ) {
      fragment = context.createDocumentFragment();
      jQuery.clean( args, context, fragment, scripts );

      // Update the cache, but only store false
      // unless this is a second parsing of the same content
      if ( cacheable ) {
        jQuery.fragments[ first ] = cachehit && fragment;
      }
    }

    return { fragment: fragment, cacheable: cacheable };
  };

  jQuery.fragments = {};

  jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function( name, original ) {
    jQuery.fn[ name ] = function( selector ) {
      var elems,
        i = 0,
        ret = [],
        insert = jQuery( selector ),
        l = insert.length,
        parent = this.length === 1 && this[0].parentNode;

      if ( (parent == null || parent && parent.nodeType === 11 && parent.childNodes.length === 1) && l === 1 ) {
        insert[ original ]( this[0] );
        return this;
      } else {
        for ( ; i < l; i++ ) {
          elems = ( i > 0 ? this.clone(true) : this ).get();
          jQuery( insert[i] )[ original ]( elems );
          ret = ret.concat( elems );
        }

        return this.pushStack( ret, name, insert.selector );
      }
    };
  });

  function getAll( elem ) {
    if ( typeof elem.getElementsByTagName !== "undefined" ) {
      return elem.getElementsByTagName( "*" );

    } else if ( typeof elem.querySelectorAll !== "undefined" ) {
      return elem.querySelectorAll( "*" );

    } else {
      return [];
    }
  }

// Used in clean, fixes the defaultChecked property
  function fixDefaultChecked( elem ) {
    if ( rcheckableType.test( elem.type ) ) {
      elem.defaultChecked = elem.checked;
    }
  }

  jQuery.extend({
    clone: function( elem, dataAndEvents, deepDataAndEvents ) {
      var srcElements,
        destElements,
        i,
        clone;

      if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
        clone = elem.cloneNode( true );

        // IE<=8 does not properly clone detached, unknown element nodes
      } else {
        fragmentDiv.innerHTML = elem.outerHTML;
        fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
      }

      if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
        (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
        // IE copies events bound via attachEvent when using cloneNode.
        // Calling detachEvent on the clone will also remove the events
        // from the original. In order to get around this, we use some
        // proprietary methods to clear the events. Thanks to MooTools
        // guys for this hotness.

        cloneFixAttributes( elem, clone );

        // Using Sizzle here is crazy slow, so we use getElementsByTagName instead
        srcElements = getAll( elem );
        destElements = getAll( clone );

        // Weird iteration because IE will replace the length property
        // with an element if you are cloning the body and one of the
        // elements on the page has a name or id of "length"
        for ( i = 0; srcElements[i]; ++i ) {
          // Ensure that the destination node is not null; Fixes #9587
          if ( destElements[i] ) {
            cloneFixAttributes( srcElements[i], destElements[i] );
          }
        }
      }

      // Copy the events from the original to the clone
      if ( dataAndEvents ) {
        cloneCopyEvent( elem, clone );

        if ( deepDataAndEvents ) {
          srcElements = getAll( elem );
          destElements = getAll( clone );

          for ( i = 0; srcElements[i]; ++i ) {
            cloneCopyEvent( srcElements[i], destElements[i] );
          }
        }
      }

      srcElements = destElements = null;

      // Return the cloned set
      return clone;
    },

    clean: function( elems, context, fragment, scripts ) {
      var i, j, elem, tag, wrap, depth, div, hasBody, tbody, len, handleScript, jsTags,
        safe = context === document && safeFragment,
        ret = [];

      // Ensure that context is a document
      if ( !context || typeof context.createDocumentFragment === "undefined" ) {
        context = document;
      }

      // Use the already-created safe fragment if context permits
      for ( i = 0; (elem = elems[i]) != null; i++ ) {
        if ( typeof elem === "number" ) {
          elem += "";
        }

        if ( !elem ) {
          continue;
        }

        // Convert html string into DOM nodes
        if ( typeof elem === "string" ) {
          if ( !rhtml.test( elem ) ) {
            elem = context.createTextNode( elem );
          } else {
            // Ensure a safe container in which to render the html
            safe = safe || createSafeFragment( context );
            div = context.createElement("div");
            safe.appendChild( div );

            // Fix "XHTML"-style tags in all browsers
            elem = elem.replace(rxhtmlTag, "<$1></$2>");

            // Go to html and back, then peel off extra wrappers
            tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
            wrap = wrapMap[ tag ] || wrapMap._default;
            depth = wrap[0];
            div.innerHTML = wrap[1] + elem + wrap[2];

            // Move to the right depth
            while ( depth-- ) {
              div = div.lastChild;
            }

            // Remove IE's autoinserted <tbody> from table fragments
            if ( !jQuery.support.tbody ) {

              // String was a <table>, *may* have spurious <tbody>
              hasBody = rtbody.test(elem);
              tbody = tag === "table" && !hasBody ?
                div.firstChild && div.firstChild.childNodes :

                // String was a bare <thead> or <tfoot>
                wrap[1] === "<table>" && !hasBody ?
                  div.childNodes :
                  [];

              for ( j = tbody.length - 1; j >= 0 ; --j ) {
                if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
                  tbody[ j ].parentNode.removeChild( tbody[ j ] );
                }
              }
            }

            // IE completely kills leading whitespace when innerHTML is used
            if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
              div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
            }

            elem = div.childNodes;

            // Take out of fragment container (we need a fresh div each time)
            div.parentNode.removeChild( div );
          }
        }

        if ( elem.nodeType ) {
          ret.push( elem );
        } else {
          jQuery.merge( ret, elem );
        }
      }

      // Fix #11356: Clear elements from safeFragment
      if ( div ) {
        elem = div = safe = null;
      }

      // Reset defaultChecked for any radios and checkboxes
      // about to be appended to the DOM in IE 6/7 (#8060)
      if ( !jQuery.support.appendChecked ) {
        for ( i = 0; (elem = ret[i]) != null; i++ ) {
          if ( jQuery.nodeName( elem, "input" ) ) {
            fixDefaultChecked( elem );
          } else if ( typeof elem.getElementsByTagName !== "undefined" ) {
            jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
          }
        }
      }

      // Append elements to a provided document fragment
      if ( fragment ) {
        // Special handling of each script element
        handleScript = function( elem ) {
          // Check if we consider it executable
          if ( !elem.type || rscriptType.test( elem.type ) ) {
            // Detach the script and store it in the scripts array (if provided) or the fragment
            // Return truthy to indicate that it has been handled
            return scripts ?
              scripts.push( elem.parentNode ? elem.parentNode.removeChild( elem ) : elem ) :
              fragment.appendChild( elem );
          }
        };

        for ( i = 0; (elem = ret[i]) != null; i++ ) {
          // Check if we're done after handling an executable script
          if ( !( jQuery.nodeName( elem, "script" ) && handleScript( elem ) ) ) {
            // Append to fragment and handle embedded scripts
            fragment.appendChild( elem );
            if ( typeof elem.getElementsByTagName !== "undefined" ) {
              // handleScript alters the DOM, so use jQuery.merge to ensure snapshot iteration
              jsTags = jQuery.grep( jQuery.merge( [], elem.getElementsByTagName("script") ), handleScript );

              // Splice the scripts into ret after their former ancestor and advance our index beyond them
              ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
              i += jsTags.length;
            }
          }
        }
      }

      return ret;
    },

    cleanData: function( elems, /* internal */ acceptData ) {
      var data, id, elem, type,
        i = 0,
        internalKey = jQuery.expando,
        cache = jQuery.cache,
        deleteExpando = jQuery.support.deleteExpando,
        special = jQuery.event.special;

      for ( ; (elem = elems[i]) != null; i++ ) {

        if ( acceptData || jQuery.acceptData( elem ) ) {

          id = elem[ internalKey ];
          data = id && cache[ id ];

          if ( data ) {
            if ( data.events ) {
              for ( type in data.events ) {
                if ( special[ type ] ) {
                  jQuery.event.remove( elem, type );

                  // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent( elem, type, data.handle );
                }
              }
            }

            // Remove cache only if it was not already removed by jQuery.event.remove
            if ( cache[ id ] ) {

              delete cache[ id ];

              // IE does not allow us to delete expando properties from nodes,
              // nor does it have a removeAttribute function on Document nodes;
              // we must handle all of these cases
              if ( deleteExpando ) {
                delete elem[ internalKey ];

              } else if ( elem.removeAttribute ) {
                elem.removeAttribute( internalKey );

              } else {
                elem[ internalKey ] = null;
              }

              jQuery.deletedIds.push( id );
            }
          }
        }
      }
    }
  });
// Limit scope pollution from any deprecated API
  (function() {

    var matched, browser;

// Use of jQuery.browser is frowned upon.
// More details: http://api.jquery.com/jQuery.browser
// jQuery.uaMatch maintained for back-compat
    jQuery.uaMatch = function( ua ) {
      ua = ua.toLowerCase();

      var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
        /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
        /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
        /(msie) ([\w.]+)/.exec( ua ) ||
        ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
        [];

      return {
        browser: match[ 1 ] || "",
        version: match[ 2 ] || "0"
      };
    };

    matched = jQuery.uaMatch( navigator.userAgent );
    browser = {};

    if ( matched.browser ) {
      browser[ matched.browser ] = true;
      browser.version = matched.version;
    }

// Chrome is Webkit, but Webkit is also Safari.
    if ( browser.chrome ) {
      browser.webkit = true;
    } else if ( browser.webkit ) {
      browser.safari = true;
    }

    jQuery.browser = browser;

    jQuery.sub = function() {
      function jQuerySub( selector, context ) {
        return new jQuerySub.fn.init( selector, context );
      }
      jQuery.extend( true, jQuerySub, this );
      jQuerySub.superclass = this;
      jQuerySub.fn = jQuerySub.prototype = this();
      jQuerySub.fn.constructor = jQuerySub;
      jQuerySub.sub = this.sub;
      jQuerySub.fn.init = function init( selector, context ) {
        if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
          context = jQuerySub( context );
        }

        return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
      };
      jQuerySub.fn.init.prototype = jQuerySub.fn;
      var rootjQuerySub = jQuerySub(document);
      return jQuerySub;
    };

  })();
  var curCSS, iframe, iframeDoc,
    ralpha = /alpha\([^)]*\)/i,
    ropacity = /opacity=([^)]*)/,
    rposition = /^(top|right|bottom|left)$/,
  // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
  // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    rmargin = /^margin/,
    rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
    rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
    rrelNum = new RegExp( "^([-+])=(" + core_pnum + ")", "i" ),
    elemdisplay = {},

    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
    cssNormalTransform = {
      letterSpacing: 0,
      fontWeight: 400
    },

    cssExpand = [ "Top", "Right", "Bottom", "Left" ],
    cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],

    eventsToggle = jQuery.fn.toggle;

// return a css property mapped to a potentially vendor prefixed property
  function vendorPropName( style, name ) {

    // shortcut for names that are not vendor prefixed
    if ( name in style ) {
      return name;
    }

    // check for vendor prefixed names
    var capName = name.charAt(0).toUpperCase() + name.slice(1),
      origName = name,
      i = cssPrefixes.length;

    while ( i-- ) {
      name = cssPrefixes[ i ] + capName;
      if ( name in style ) {
        return name;
      }
    }

    return origName;
  }

  function isHidden( elem, el ) {
    elem = el || elem;
    return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
  }

  function showHide( elements, show ) {
    var elem, display,
      values = [],
      index = 0,
      length = elements.length;

    for ( ; index < length; index++ ) {
      elem = elements[ index ];
      if ( !elem.style ) {
        continue;
      }
      values[ index ] = jQuery._data( elem, "olddisplay" );
      if ( show ) {
        // Reset the inline display of this element to learn if it is
        // being hidden by cascaded rules or not
        if ( !values[ index ] && elem.style.display === "none" ) {
          elem.style.display = "";
        }

        // Set elements which have been overridden with display: none
        // in a stylesheet to whatever the default browser style is
        // for such an element
        if ( elem.style.display === "" && isHidden( elem ) ) {
          values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
        }
      } else {
        display = curCSS( elem, "display" );

        if ( !values[ index ] && display !== "none" ) {
          jQuery._data( elem, "olddisplay", display );
        }
      }
    }

    // Set the display of most of the elements in a second loop
    // to avoid the constant reflow
    for ( index = 0; index < length; index++ ) {
      elem = elements[ index ];
      if ( !elem.style ) {
        continue;
      }
      if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
        elem.style.display = show ? values[ index ] || "" : "none";
      }
    }

    return elements;
  }

  jQuery.fn.extend({
    css: function( name, value ) {
      return jQuery.access( this, function( elem, name, value ) {
        return value !== undefined ?
          jQuery.style( elem, name, value ) :
          jQuery.css( elem, name );
      }, name, value, arguments.length > 1 );
    },
    show: function() {
      return showHide( this, true );
    },
    hide: function() {
      return showHide( this );
    },
    toggle: function( state, fn2 ) {
      var bool = typeof state === "boolean";

      if ( jQuery.isFunction( state ) && jQuery.isFunction( fn2 ) ) {
        return eventsToggle.apply( this, arguments );
      }

      return this.each(function() {
        if ( bool ? state : isHidden( this ) ) {
          jQuery( this ).show();
        } else {
          jQuery( this ).hide();
        }
      });
    }
  });

  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function( elem, computed ) {
          if ( computed ) {
            // We should always get a number back from opacity
            var ret = curCSS( elem, "opacity" );
            return ret === "" ? "1" : ret;

          }
        }
      }
    },

    // Exclude the following css properties to add px
    cssNumber: {
      "fillOpacity": true,
      "fontWeight": true,
      "lineHeight": true,
      "opacity": true,
      "orphans": true,
      "widows": true,
      "zIndex": true,
      "zoom": true
    },

    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {
      // normalize float css property
      "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
    },

    // Get and set the style property on a DOM Node
    style: function( elem, name, value, extra ) {
      // Don't set styles on text and comment nodes
      if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
        return;
      }

      // Make sure that we're working with the right name
      var ret, type, hooks,
        origName = jQuery.camelCase( name ),
        style = elem.style;

      name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

      // gets hook for the prefixed version
      // followed by the unprefixed version
      hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

      // Check if we're setting a value
      if ( value !== undefined ) {
        type = typeof value;

        // convert relative number strings (+= or -=) to relative numbers. #7345
        if ( type === "string" && (ret = rrelNum.exec( value )) ) {
          value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
          // Fixes bug #9237
          type = "number";
        }

        // Make sure that NaN and null values aren't set. See: #7116
        if ( value == null || type === "number" && isNaN( value ) ) {
          return;
        }

        // If a number was passed in, add 'px' to the (except for certain CSS properties)
        if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
          value += "px";
        }

        // If a hook was provided, use that value, otherwise just set the specified value
        if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
          // Wrapped to prevent IE from throwing errors when 'invalid' values are provided
          // Fixes bug #5509
          try {
            style[ name ] = value;
          } catch(e) {}
        }

      } else {
        // If a hook was provided get the non-computed value from there
        if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
          return ret;
        }

        // Otherwise just get the value from the style object
        return style[ name ];
      }
    },

    css: function( elem, name, numeric, extra ) {
      var val, num, hooks,
        origName = jQuery.camelCase( name );

      // Make sure that we're working with the right name
      name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

      // gets hook for the prefixed version
      // followed by the unprefixed version
      hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

      // If a hook was provided get the computed value from there
      if ( hooks && "get" in hooks ) {
        val = hooks.get( elem, true, extra );
      }

      // Otherwise, if a way to get the computed value exists, use that
      if ( val === undefined ) {
        val = curCSS( elem, name );
      }

      //convert "normal" to computed value
      if ( val === "normal" && name in cssNormalTransform ) {
        val = cssNormalTransform[ name ];
      }

      // Return, converting to number if forced or a qualifier was provided and val looks numeric
      if ( numeric || extra !== undefined ) {
        num = parseFloat( val );
        return numeric || jQuery.isNumeric( num ) ? num || 0 : val;
      }
      return val;
    },

    // A method for quickly swapping in/out CSS properties to get correct calculations
    swap: function( elem, options, callback ) {
      var ret, name,
        old = {};

      // Remember the old values, and insert the new ones
      for ( name in options ) {
        old[ name ] = elem.style[ name ];
        elem.style[ name ] = options[ name ];
      }

      ret = callback.call( elem );

      // Revert the old values
      for ( name in options ) {
        elem.style[ name ] = old[ name ];
      }

      return ret;
    }
  });

// NOTE: To any future maintainer, we've window.getComputedStyle
// because jsdom on node.js will break without it.
  if ( window.getComputedStyle ) {
    curCSS = function( elem, name ) {
      var ret, width, minWidth, maxWidth,
        computed = window.getComputedStyle( elem, null ),
        style = elem.style;

      if ( computed ) {

        ret = computed[ name ];
        if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
          ret = jQuery.style( elem, name );
        }

        // A tribute to the "awesome hack by Dean Edwards"
        // Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
        // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
        // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
        if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {
          width = style.width;
          minWidth = style.minWidth;
          maxWidth = style.maxWidth;

          style.minWidth = style.maxWidth = style.width = ret;
          ret = computed.width;

          style.width = width;
          style.minWidth = minWidth;
          style.maxWidth = maxWidth;
        }
      }

      return ret;
    };
  } else if ( document.documentElement.currentStyle ) {
    curCSS = function( elem, name ) {
      var left, rsLeft,
        ret = elem.currentStyle && elem.currentStyle[ name ],
        style = elem.style;

      // Avoid setting ret to empty string here
      // so we don't default to auto
      if ( ret == null && style && style[ name ] ) {
        ret = style[ name ];
      }

      // From the awesome hack by Dean Edwards
      // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

      // If we're not dealing with a regular pixel number
      // but a number that has a weird ending, we need to convert it to pixels
      // but not position css attributes, as those are proportional to the parent element instead
      // and we can't measure the parent instead because it might trigger a "stacking dolls" problem
      if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

        // Remember the original values
        left = style.left;
        rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

        // Put in the new values to get a computed value out
        if ( rsLeft ) {
          elem.runtimeStyle.left = elem.currentStyle.left;
        }
        style.left = name === "fontSize" ? "1em" : ret;
        ret = style.pixelLeft + "px";

        // Revert the changed values
        style.left = left;
        if ( rsLeft ) {
          elem.runtimeStyle.left = rsLeft;
        }
      }

      return ret === "" ? "auto" : ret;
    };
  }

  function setPositiveNumber( elem, value, subtract ) {
    var matches = rnumsplit.exec( value );
    return matches ?
      Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
      value;
  }

  function augmentWidthOrHeight( elem, name, extra, isBorderBox ) {
    var i = extra === ( isBorderBox ? "border" : "content" ) ?
        // If we already have the right measurement, avoid augmentation
        4 :
        // Otherwise initialize for horizontal or vertical properties
        name === "width" ? 1 : 0,

      val = 0;

    for ( ; i < 4; i += 2 ) {
      // both box models exclude margin, so add it if we want it
      if ( extra === "margin" ) {
        // we use jQuery.css instead of curCSS here
        // because of the reliableMarginRight CSS hook!
        val += jQuery.css( elem, extra + cssExpand[ i ], true );
      }

      // From this point on we use curCSS for maximum performance (relevant in animations)
      if ( isBorderBox ) {
        // border-box includes padding, so remove it if we want content
        if ( extra === "content" ) {
          val -= parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;
        }

        // at this point, extra isn't border nor margin, so remove border
        if ( extra !== "margin" ) {
          val -= parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
        }
      } else {
        // at this point, extra isn't content, so add padding
        val += parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;

        // at this point, extra isn't content nor padding, so add border
        if ( extra !== "padding" ) {
          val += parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
        }
      }
    }

    return val;
  }

  function getWidthOrHeight( elem, name, extra ) {

    // Start with offset property, which is equivalent to the border-box value
    var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
      valueIsBorderBox = true,
      isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing" ) === "border-box";

    // some non-html elements return undefined for offsetWidth, so check for null/undefined
    // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
    // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
    if ( val <= 0 || val == null ) {
      // Fall back to computed then uncomputed css if necessary
      val = curCSS( elem, name );
      if ( val < 0 || val == null ) {
        val = elem.style[ name ];
      }

      // Computed unit is not pixels. Stop here and return.
      if ( rnumnonpx.test(val) ) {
        return val;
      }

      // we need the check for style in case a browser which returns unreliable values
      // for getComputedStyle silently falls back to the reliable elem.style
      valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

      // Normalize "", auto, and prepare for extra
      val = parseFloat( val ) || 0;
    }

    // use the active box-sizing model to add/subtract irrelevant styles
    return ( val +
      augmentWidthOrHeight(
        elem,
        name,
        extra || ( isBorderBox ? "border" : "content" ),
        valueIsBorderBox
      )
      ) + "px";
  }


// Try to determine the default display value of an element
  function css_defaultDisplay( nodeName ) {
    if ( elemdisplay[ nodeName ] ) {
      return elemdisplay[ nodeName ];
    }

    var elem = jQuery( "<" + nodeName + ">" ).appendTo( document.body ),
      display = elem.css("display");
    elem.remove();

    // If the simple way fails,
    // get element's real default display by attaching it to a temp iframe
    if ( display === "none" || display === "" ) {
      // Use the already-created iframe if possible
      iframe = document.body.appendChild(
        iframe || jQuery.extend( document.createElement("iframe"), {
          frameBorder: 0,
          width: 0,
          height: 0
        })
      );

      // Create a cacheable copy of the iframe document on first call.
      // IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
      // document to it; WebKit & Firefox won't allow reusing the iframe document.
      if ( !iframeDoc || !iframe.createElement ) {
        iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
        iframeDoc.write("<!doctype html><html><body>");
        iframeDoc.close();
      }

      elem = iframeDoc.body.appendChild( iframeDoc.createElement(nodeName) );

      display = curCSS( elem, "display" );
      document.body.removeChild( iframe );
    }

    // Store the correct default display
    elemdisplay[ nodeName ] = display;

    return display;
  }

  jQuery.each([ "height", "width" ], function( i, name ) {
    jQuery.cssHooks[ name ] = {
      get: function( elem, computed, extra ) {
        if ( computed ) {
          // certain elements can have dimension info if we invisibly show them
          // however, it must have a current display style that would benefit from this
          if ( elem.offsetWidth === 0 && rdisplayswap.test( curCSS( elem, "display" ) ) ) {
            return jQuery.swap( elem, cssShow, function() {
              return getWidthOrHeight( elem, name, extra );
            });
          } else {
            return getWidthOrHeight( elem, name, extra );
          }
        }
      },

      set: function( elem, value, extra ) {
        return setPositiveNumber( elem, value, extra ?
          augmentWidthOrHeight(
            elem,
            name,
            extra,
            jQuery.support.boxSizing && jQuery.css( elem, "boxSizing" ) === "border-box"
          ) : 0
        );
      }
    };
  });

  if ( !jQuery.support.opacity ) {
    jQuery.cssHooks.opacity = {
      get: function( elem, computed ) {
        // IE uses filters for opacity
        return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
          ( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
          computed ? "1" : "";
      },

      set: function( elem, value ) {
        var style = elem.style,
          currentStyle = elem.currentStyle,
          opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
          filter = currentStyle && currentStyle.filter || style.filter || "";

        // IE has trouble with opacity if it does not have layout
        // Force it by setting the zoom level
        style.zoom = 1;

        // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
        if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
          style.removeAttribute ) {

          // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
          // if "filter:" is present at all, clearType is disabled, we want to avoid this
          // style.removeAttribute is IE Only, but so apparently is this code path...
          style.removeAttribute( "filter" );

          // if there there is no filter style applied in a css rule, we are done
          if ( currentStyle && !currentStyle.filter ) {
            return;
          }
        }

        // otherwise, set new filter values
        style.filter = ralpha.test( filter ) ?
          filter.replace( ralpha, opacity ) :
          filter + " " + opacity;
      }
    };
  }

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
  jQuery(function() {
    if ( !jQuery.support.reliableMarginRight ) {
      jQuery.cssHooks.marginRight = {
        get: function( elem, computed ) {
          // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
          // Work around by temporarily setting element display to inline-block
          return jQuery.swap( elem, { "display": "inline-block" }, function() {
            if ( computed ) {
              return curCSS( elem, "marginRight" );
            }
          });
        }
      };
    }

    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    // getComputedStyle returns percent when specified for top/left/bottom/right
    // rather than make the css module depend on the offset module, we just check for it here
    if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
      jQuery.each( [ "top", "left" ], function( i, prop ) {
        jQuery.cssHooks[ prop ] = {
          get: function( elem, computed ) {
            if ( computed ) {
              var ret = curCSS( elem, prop );
              // if curCSS returns percentage, fallback to offset
              return rnumnonpx.test( ret ) ? jQuery( elem ).position()[ prop ] + "px" : ret;
            }
          }
        };
      });
    }

  });

  if ( jQuery.expr && jQuery.expr.filters ) {
    jQuery.expr.filters.hidden = function( elem ) {
      return ( elem.offsetWidth === 0 && elem.offsetHeight === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || curCSS( elem, "display" )) === "none");
    };

    jQuery.expr.filters.visible = function( elem ) {
      return !jQuery.expr.filters.hidden( elem );
    };
  }

// These hooks are used by animate to expand properties
  jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function( prefix, suffix ) {
    jQuery.cssHooks[ prefix + suffix ] = {
      expand: function( value ) {
        var i,

        // assumes a single number if not a string
          parts = typeof value === "string" ? value.split(" ") : [ value ],
          expanded = {};

        for ( i = 0; i < 4; i++ ) {
          expanded[ prefix + cssExpand[ i ] + suffix ] =
            parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
        }

        return expanded;
      }
    };

    if ( !rmargin.test( prefix ) ) {
      jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
    }
  });
  var r20 = /%20/g,
    rbracket = /\[\]$/,
    rCRLF = /\r?\n/g,
    rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
    rselectTextarea = /^(?:select|textarea)/i;

  jQuery.fn.extend({
    serialize: function() {
      return jQuery.param( this.serializeArray() );
    },
    serializeArray: function() {
      return this.map(function(){
        return this.elements ? jQuery.makeArray( this.elements ) : this;
      })
        .filter(function(){
          return this.name && !this.disabled &&
            ( this.checked || rselectTextarea.test( this.nodeName ) ||
              rinput.test( this.type ) );
        })
        .map(function( i, elem ){
          var val = jQuery( this ).val();

          return val == null ?
            null :
            jQuery.isArray( val ) ?
              jQuery.map( val, function( val, i ){
                return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
              }) :
            { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
        }).get();
    }
  });

//Serialize an array of form elements or a set of
//key/values into a query string
  jQuery.param = function( a, traditional ) {
    var prefix,
      s = [],
      add = function( key, value ) {
        // If value is a function, invoke it and return its value
        value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
        s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
      };

    // Set traditional to true for jQuery <= 1.3.2 behavior.
    if ( traditional === undefined ) {
      traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
    }

    // If an array was passed in, assume that it is an array of form elements.
    if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
      // Serialize the form elements
      jQuery.each( a, function() {
        add( this.name, this.value );
      });

    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for ( prefix in a ) {
        buildParams( prefix, a[ prefix ], traditional, add );
      }
    }

    // Return the resulting serialization
    return s.join( "&" ).replace( r20, "+" );
  };

  function buildParams( prefix, obj, traditional, add ) {
    var name;

    if ( jQuery.isArray( obj ) ) {
      // Serialize array item.
      jQuery.each( obj, function( i, v ) {
        if ( traditional || rbracket.test( prefix ) ) {
          // Treat each array item as a scalar.
          add( prefix, v );

        } else {
          // If array item is non-scalar (array or object), encode its
          // numeric index to resolve deserialization ambiguity issues.
          // Note that rack (as of 1.0.0) can't currently deserialize
          // nested arrays properly, and attempting to do so may cause
          // a server error. Possible fixes are to modify rack's
          // deserialization algorithm or to provide an option or flag
          // to force array serialization to be shallow.
          buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
        }
      });

    } else if ( !traditional && jQuery.type( obj ) === "object" ) {
      // Serialize object item.
      for ( name in obj ) {
        buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
      }

    } else {
      // Serialize scalar item.
      add( prefix, obj );
    }
  }
  var
  // Document location
    ajaxLocParts,
    ajaxLocation,

    rhash = /#.*$/,
    rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
  // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
    rnoContent = /^(?:GET|HEAD)$/,
    rprotocol = /^\/\//,
    rquery = /\?/,
    rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
    rts = /([?&])_=[^&]*/,
    rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

  // Keep a copy of the old load method
    _load = jQuery.fn.load,

  /* Prefilters
   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
   * 2) These are called:
   *    - BEFORE asking for a transport
   *    - AFTER param serialization (s.data is a string if s.processData is true)
   * 3) key is the dataType
   * 4) the catchall symbol "*" can be used
   * 5) execution will start with transport dataType and THEN continue down to "*" if needed
   */
    prefilters = {},

  /* Transports bindings
   * 1) key is the dataType
   * 2) the catchall symbol "*" can be used
   * 3) selection will start with transport dataType and THEN go to "*" if needed
   */
    transports = {},

  // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
  try {
    ajaxLocation = location.href;
  } catch( e ) {
    // Use the href attribute of an A element
    // since IE will modify it given document.location
    ajaxLocation = document.createElement( "a" );
    ajaxLocation.href = "";
    ajaxLocation = ajaxLocation.href;
  }

// Segment location into parts
  ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports( structure ) {

    // dataTypeExpression is optional and defaults to "*"
    return function( dataTypeExpression, func ) {

      if ( typeof dataTypeExpression !== "string" ) {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }

      var dataType, list, placeBefore,
        dataTypes = dataTypeExpression.toLowerCase().split( core_rspace ),
        i = 0,
        length = dataTypes.length;

      if ( jQuery.isFunction( func ) ) {
        // For each dataType in the dataTypeExpression
        for ( ; i < length; i++ ) {
          dataType = dataTypes[ i ];
          // We control if we're asked to add before
          // any existing element
          placeBefore = /^\+/.test( dataType );
          if ( placeBefore ) {
            dataType = dataType.substr( 1 ) || "*";
          }
          list = structure[ dataType ] = structure[ dataType ] || [];
          // then we add to the structure accordingly
          list[ placeBefore ? "unshift" : "push" ]( func );
        }
      }
    };
  }

// Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
                                          dataType /* internal */, inspected /* internal */ ) {

    dataType = dataType || options.dataTypes[ 0 ];
    inspected = inspected || {};

    inspected[ dataType ] = true;

    var selection,
      list = structure[ dataType ],
      i = 0,
      length = list ? list.length : 0,
      executeOnly = ( structure === prefilters );

    for ( ; i < length && ( executeOnly || !selection ); i++ ) {
      selection = list[ i ]( options, originalOptions, jqXHR );
      // If we got redirected to another dataType
      // we try there if executing only and not done already
      if ( typeof selection === "string" ) {
        if ( !executeOnly || inspected[ selection ] ) {
          selection = undefined;
        } else {
          options.dataTypes.unshift( selection );
          selection = inspectPrefiltersOrTransports(
            structure, options, originalOptions, jqXHR, selection, inspected );
        }
      }
    }
    // If we're only executing or nothing was selected
    // we try the catchall dataType if not done already
    if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
      selection = inspectPrefiltersOrTransports(
        structure, options, originalOptions, jqXHR, "*", inspected );
    }
    // unnecessary when only executing (prefilters)
    // but it'll be ignored by the caller in that case
    return selection;
  }

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
  function ajaxExtend( target, src ) {
    var key, deep,
      flatOptions = jQuery.ajaxSettings.flatOptions || {};
    for ( key in src ) {
      if ( src[ key ] !== undefined ) {
        ( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
      }
    }
    if ( deep ) {
      jQuery.extend( true, target, deep );
    }
  }

  jQuery.fn.load = function( url, params, callback ) {
    if ( typeof url !== "string" && _load ) {
      return _load.apply( this, arguments );
    }

    // Don't do a request if no elements are being requested
    if ( !this.length ) {
      return this;
    }

    var selector, type, response,
      self = this,
      off = url.indexOf(" ");

    if ( off >= 0 ) {
      selector = url.slice( off, url.length );
      url = url.slice( 0, off );
    }

    // If it's a function
    if ( jQuery.isFunction( params ) ) {

      // We assume that it's the callback
      callback = params;
      params = undefined;

      // Otherwise, build a param string
    } else if ( params && typeof params === "object" ) {
      type = "POST";
    }

    // Request the remote document
    jQuery.ajax({
      url: url,

      // if "type" variable is undefined, then "GET" method will be used
      type: type,
      dataType: "html",
      data: params,
      complete: function( jqXHR, status ) {
        if ( callback ) {
          self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
        }
      }
    }).done(function( responseText ) {

        // Save response for use in complete callback
        response = arguments;

        // See if a selector was specified
        self.html( selector ?

          // Create a dummy div to hold the results
          jQuery("<div>")

            // inject the contents of the document in, removing the scripts
            // to avoid any 'Permission Denied' errors in IE
            .append( responseText.replace( rscript, "" ) )

            // Locate the specified elements
            .find( selector ) :

          // If not, just inject the full result
          responseText );

      });

    return this;
  };

// Attach a bunch of functions for handling common AJAX events
  jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
    jQuery.fn[ o ] = function( f ){
      return this.on( o, f );
    };
  });

  jQuery.each( [ "get", "post" ], function( i, method ) {
    jQuery[ method ] = function( url, data, callback, type ) {
      // shift arguments if data argument was omitted
      if ( jQuery.isFunction( data ) ) {
        type = type || callback;
        callback = data;
        data = undefined;
      }

      return jQuery.ajax({
        type: method,
        url: url,
        data: data,
        success: callback,
        dataType: type
      });
    };
  });

  jQuery.extend({

    getScript: function( url, callback ) {
      return jQuery.get( url, undefined, callback, "script" );
    },

    getJSON: function( url, data, callback ) {
      return jQuery.get( url, data, callback, "json" );
    },

    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function( target, settings ) {
      if ( settings ) {
        // Building a settings object
        ajaxExtend( target, jQuery.ajaxSettings );
      } else {
        // Extending ajaxSettings
        settings = target;
        target = jQuery.ajaxSettings;
      }
      ajaxExtend( target, settings );
      return target;
    },

    ajaxSettings: {
      url: ajaxLocation,
      isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
      global: true,
      type: "GET",
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      processData: true,
      async: true,
      /*
       timeout: 0,
       data: null,
       dataType: null,
       username: null,
       password: null,
       cache: null,
       throws: false,
       traditional: false,
       headers: {},
       */

      accepts: {
        xml: "application/xml, text/xml",
        html: "text/html",
        text: "text/plain",
        json: "application/json, text/javascript",
        "*": allTypes
      },

      contents: {
        xml: /xml/,
        html: /html/,
        json: /json/
      },

      responseFields: {
        xml: "responseXML",
        text: "responseText"
      },

      // List of data converters
      // 1) key format is "source_type destination_type" (a single space in-between)
      // 2) the catchall symbol "*" can be used for source_type
      converters: {

        // Convert anything to text
        "* text": window.String,

        // Text to html (true = no transformation)
        "text html": true,

        // Evaluate text as a json expression
        "text json": jQuery.parseJSON,

        // Parse text as xml
        "text xml": jQuery.parseXML
      },

      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        context: true,
        url: true
      }
    },

    ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
    ajaxTransport: addToPrefiltersOrTransports( transports ),

    // Main method
    ajax: function( url, options ) {

      // If url is an object, simulate pre-1.5 signature
      if ( typeof url === "object" ) {
        options = url;
        url = undefined;
      }

      // Force options to be an object
      options = options || {};

      var // ifModified key
        ifModifiedKey,
      // Response headers
        responseHeadersString,
        responseHeaders,
      // transport
        transport,
      // timeout handle
        timeoutTimer,
      // Cross-domain detection vars
        parts,
      // To know if global events are to be dispatched
        fireGlobals,
      // Loop variable
        i,
      // Create the final options object
        s = jQuery.ajaxSetup( {}, options ),
      // Callbacks context
        callbackContext = s.context || s,
      // Context for global events
      // It's the callbackContext if one was provided in the options
      // and if it's a DOM node or a jQuery collection
        globalEventContext = callbackContext !== s &&
          ( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
          jQuery( callbackContext ) : jQuery.event,
      // Deferreds
        deferred = jQuery.Deferred(),
        completeDeferred = jQuery.Callbacks( "once memory" ),
      // Status-dependent callbacks
        statusCode = s.statusCode || {},
      // Headers (they are sent all at once)
        requestHeaders = {},
        requestHeadersNames = {},
      // The jqXHR state
        state = 0,
      // Default abort message
        strAbort = "canceled",
      // Fake xhr
        jqXHR = {

          readyState: 0,

          // Caches the header
          setRequestHeader: function( name, value ) {
            if ( !state ) {
              var lname = name.toLowerCase();
              name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
              requestHeaders[ name ] = value;
            }
            return this;
          },

          // Raw string
          getAllResponseHeaders: function() {
            return state === 2 ? responseHeadersString : null;
          },

          // Builds headers hashtable if needed
          getResponseHeader: function( key ) {
            var match;
            if ( state === 2 ) {
              if ( !responseHeaders ) {
                responseHeaders = {};
                while( ( match = rheaders.exec( responseHeadersString ) ) ) {
                  responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
                }
              }
              match = responseHeaders[ key.toLowerCase() ];
            }
            return match === undefined ? null : match;
          },

          // Overrides response content-type header
          overrideMimeType: function( type ) {
            if ( !state ) {
              s.mimeType = type;
            }
            return this;
          },

          // Cancel the request
          abort: function( statusText ) {
            statusText = statusText || strAbort;
            if ( transport ) {
              transport.abort( statusText );
            }
            done( 0, statusText );
            return this;
          }
        };

      // Callback for when everything is done
      // It is defined here because jslint complains if it is declared
      // at the end of the function (which would be more logical and readable)
      function done( status, nativeStatusText, responses, headers ) {
        var isSuccess, success, error, response, modified,
          statusText = nativeStatusText;

        // Called once
        if ( state === 2 ) {
          return;
        }

        // State is "done" now
        state = 2;

        // Clear timeout if it exists
        if ( timeoutTimer ) {
          clearTimeout( timeoutTimer );
        }

        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;

        // Cache response headers
        responseHeadersString = headers || "";

        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;

        // Get response data
        if ( responses ) {
          response = ajaxHandleResponses( s, jqXHR, responses );
        }

        // If successful, handle type chaining
        if ( status >= 200 && status < 300 || status === 304 ) {

          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if ( s.ifModified ) {

            modified = jqXHR.getResponseHeader("Last-Modified");
            if ( modified ) {
              jQuery.lastModified[ ifModifiedKey ] = modified;
            }
            modified = jqXHR.getResponseHeader("Etag");
            if ( modified ) {
              jQuery.etag[ ifModifiedKey ] = modified;
            }
          }

          // If not modified
          if ( status === 304 ) {

            statusText = "notmodified";
            isSuccess = true;

            // If we have data
          } else {

            isSuccess = ajaxConvert( s, response );
            statusText = isSuccess.state;
            success = isSuccess.data;
            error = isSuccess.error;
            isSuccess = !error;
          }
        } else {
          // We extract error from statusText
          // then normalize statusText and status for non-aborts
          error = statusText;
          if ( !statusText || status ) {
            statusText = "error";
            if ( status < 0 ) {
              status = 0;
            }
          }
        }

        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = ( nativeStatusText || statusText ) + "";

        // Success/Error
        if ( isSuccess ) {
          deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
        } else {
          deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
        }

        // Status-dependent callbacks
        jqXHR.statusCode( statusCode );
        statusCode = undefined;

        if ( fireGlobals ) {
          globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
            [ jqXHR, s, isSuccess ? success : error ] );
        }

        // Complete
        completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

        if ( fireGlobals ) {
          globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
          // Handle the global AJAX counter
          if ( !( --jQuery.active ) ) {
            jQuery.event.trigger( "ajaxStop" );
          }
        }
      }

      // Attach deferreds
      deferred.promise( jqXHR );
      jqXHR.success = jqXHR.done;
      jqXHR.error = jqXHR.fail;
      jqXHR.complete = completeDeferred.add;

      // Status-dependent callbacks
      jqXHR.statusCode = function( map ) {
        if ( map ) {
          var tmp;
          if ( state < 2 ) {
            for ( tmp in map ) {
              statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
            }
          } else {
            tmp = map[ jqXHR.status ];
            jqXHR.always( tmp );
          }
        }
        return this;
      };

      // Remove hash character (#7531: and string promotion)
      // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
      // We also use the url parameter if available
      s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

      // Extract dataTypes list
      s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( core_rspace );

      // A cross-domain request is in order when we have a protocol:host:port mismatch
      if ( s.crossDomain == null ) {
        parts = rurl.exec( s.url.toLowerCase() ) || false;
        s.crossDomain = parts && ( parts.join(":") + ( parts[ 3 ] ? "" : parts[ 1 ] === "http:" ? 80 : 443 ) ) !==
          ( ajaxLocParts.join(":") + ( ajaxLocParts[ 3 ] ? "" : ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) );
      }

      // Convert data if not already a string
      if ( s.data && s.processData && typeof s.data !== "string" ) {
        s.data = jQuery.param( s.data, s.traditional );
      }

      // Apply prefilters
      inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

      // If request was aborted inside a prefilter, stop there
      if ( state === 2 ) {
        return jqXHR;
      }

      // We can fire global events as of now if asked to
      fireGlobals = s.global;

      // Uppercase the type
      s.type = s.type.toUpperCase();

      // Determine if request has content
      s.hasContent = !rnoContent.test( s.type );

      // Watch for a new set of requests
      if ( fireGlobals && jQuery.active++ === 0 ) {
        jQuery.event.trigger( "ajaxStart" );
      }

      // More options handling for requests with no content
      if ( !s.hasContent ) {

        // If data is available, append data to url
        if ( s.data ) {
          s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
          // #9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }

        // Get ifModifiedKey before adding the anti-cache parameter
        ifModifiedKey = s.url;

        // Add anti-cache in url if needed
        if ( s.cache === false ) {

          var ts = jQuery.now(),
          // try replacing _= if it is there
            ret = s.url.replace( rts, "$1_=" + ts );

          // if nothing was replaced, add timestamp to the end
          s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
        }
      }

      // Set the correct header, if data is being sent
      if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
        jqXHR.setRequestHeader( "Content-Type", s.contentType );
      }

      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if ( s.ifModified ) {
        ifModifiedKey = ifModifiedKey || s.url;
        if ( jQuery.lastModified[ ifModifiedKey ] ) {
          jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
        }
        if ( jQuery.etag[ ifModifiedKey ] ) {
          jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
        }
      }

      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader(
        "Accept",
        s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
          s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
          s.accepts[ "*" ]
      );

      // Check for headers option
      for ( i in s.headers ) {
        jqXHR.setRequestHeader( i, s.headers[ i ] );
      }

      // Allow custom headers/mimetypes and early abort
      if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
        // Abort if not done already and return
        return jqXHR.abort();

      }

      // aborting is no longer a cancellation
      strAbort = "abort";

      // Install callbacks on deferreds
      for ( i in { success: 1, error: 1, complete: 1 } ) {
        jqXHR[ i ]( s[ i ] );
      }

      // Get transport
      transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

      // If no transport, we auto-abort
      if ( !transport ) {
        done( -1, "No Transport" );
      } else {
        jqXHR.readyState = 1;
        // Send global event
        if ( fireGlobals ) {
          globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
        }
        // Timeout
        if ( s.async && s.timeout > 0 ) {
          timeoutTimer = setTimeout( function(){
            jqXHR.abort( "timeout" );
          }, s.timeout );
        }

        try {
          state = 1;
          transport.send( requestHeaders, done );
        } catch (e) {
          // Propagate exception as error if not done
          if ( state < 2 ) {
            done( -1, e );
            // Simply rethrow otherwise
          } else {
            throw e;
          }
        }
      }

      return jqXHR;
    },

    // Counter for holding the number of active queries
    active: 0,

    // Last-Modified header cache for next request
    lastModified: {},
    etag: {}

  });

  /* Handles responses to an ajax request:
   * - sets all responseXXX fields accordingly
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */
  function ajaxHandleResponses( s, jqXHR, responses ) {

    var ct, type, finalDataType, firstDataType,
      contents = s.contents,
      dataTypes = s.dataTypes,
      responseFields = s.responseFields;

    // Fill responseXXX fields
    for ( type in responseFields ) {
      if ( type in responses ) {
        jqXHR[ responseFields[type] ] = responses[ type ];
      }
    }

    // Remove auto dataType and get content-type in the process
    while( dataTypes[ 0 ] === "*" ) {
      dataTypes.shift();
      if ( ct === undefined ) {
        ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
      }
    }

    // Check if we're dealing with a known content-type
    if ( ct ) {
      for ( type in contents ) {
        if ( contents[ type ] && contents[ type ].test( ct ) ) {
          dataTypes.unshift( type );
          break;
        }
      }
    }

    // Check to see if we have a response for the expected dataType
    if ( dataTypes[ 0 ] in responses ) {
      finalDataType = dataTypes[ 0 ];
    } else {
      // Try convertible dataTypes
      for ( type in responses ) {
        if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
          finalDataType = type;
          break;
        }
        if ( !firstDataType ) {
          firstDataType = type;
        }
      }
      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }

    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if ( finalDataType ) {
      if ( finalDataType !== dataTypes[ 0 ] ) {
        dataTypes.unshift( finalDataType );
      }
      return responses[ finalDataType ];
    }
  }

// Chain conversions given the request and the original response
  function ajaxConvert( s, response ) {

    var conv, conv2, current, tmp,
    // Work with a copy of dataTypes in case we need to modify it for conversion
      dataTypes = s.dataTypes.slice(),
      prev = dataTypes[ 0 ],
      converters = {},
      i = 0;

    // Apply the dataFilter if provided
    if ( s.dataFilter ) {
      response = s.dataFilter( response, s.dataType );
    }

    // Create converters map with lowercased keys
    if ( dataTypes[ 1 ] ) {
      for ( conv in s.converters ) {
        converters[ conv.toLowerCase() ] = s.converters[ conv ];
      }
    }

    // Convert to each sequential dataType, tolerating list modification
    for ( ; (current = dataTypes[++i]); ) {

      // There's only work to do if current dataType is non-auto
      if ( current !== "*" ) {

        // Convert response if prev dataType is non-auto and differs from current
        if ( prev !== "*" && prev !== current ) {

          // Seek a direct converter
          conv = converters[ prev + " " + current ] || converters[ "* " + current ];

          // If none found, seek a pair
          if ( !conv ) {
            for ( conv2 in converters ) {

              // If conv2 outputs current
              tmp = conv2.split(" ");
              if ( tmp[ 1 ] === current ) {

                // If prev can be converted to accepted input
                conv = converters[ prev + " " + tmp[ 0 ] ] ||
                  converters[ "* " + tmp[ 0 ] ];
                if ( conv ) {
                  // Condense equivalence converters
                  if ( conv === true ) {
                    conv = converters[ conv2 ];

                    // Otherwise, insert the intermediate dataType
                  } else if ( converters[ conv2 ] !== true ) {
                    current = tmp[ 0 ];
                    dataTypes.splice( i--, 0, current );
                  }

                  break;
                }
              }
            }
          }

          // Apply converter (if not an equivalence)
          if ( conv !== true ) {

            // Unless errors are allowed to bubble, catch and return them
            if ( conv && s["throws"] ) {
              response = conv( response );
            } else {
              try {
                response = conv( response );
              } catch ( e ) {
                return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
              }
            }
          }
        }

        // Update prev for next iteration
        prev = current;
      }
    }

    return { state: "success", data: response };
  }
  var oldCallbacks = [],
    rquestion = /\?/,
    rjsonp = /(=)\?(?=&|$)|\?\?/,
    nonce = jQuery.now();

// Default jsonp settings
  jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function() {
      var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
      this[ callback ] = true;
      return callback;
    }
  });

// Detect, normalize options and install callbacks for jsonp requests
  jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

    var callbackName, overwritten, responseContainer,
      data = s.data,
      url = s.url,
      hasCallback = s.jsonp !== false,
      replaceInUrl = hasCallback && rjsonp.test( url ),
      replaceInData = hasCallback && !replaceInUrl && typeof data === "string" &&
        !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") &&
        rjsonp.test( data );

    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if ( s.dataTypes[ 0 ] === "jsonp" || replaceInUrl || replaceInData ) {

      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
        s.jsonpCallback() :
        s.jsonpCallback;
      overwritten = window[ callbackName ];

      // Insert callback into url or form data
      if ( replaceInUrl ) {
        s.url = url.replace( rjsonp, "$1" + callbackName );
      } else if ( replaceInData ) {
        s.data = data.replace( rjsonp, "$1" + callbackName );
      } else if ( hasCallback ) {
        s.url += ( rquestion.test( url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
      }

      // Use data converter to retrieve json after script execution
      s.converters["script json"] = function() {
        if ( !responseContainer ) {
          jQuery.error( callbackName + " was not called" );
        }
        return responseContainer[ 0 ];
      };

      // force json dataType
      s.dataTypes[ 0 ] = "json";

      // Install callback
      window[ callbackName ] = function() {
        responseContainer = arguments;
      };

      // Clean-up function (fires after converters)
      jqXHR.always(function() {
        // Restore preexisting value
        window[ callbackName ] = overwritten;

        // Save back as free
        if ( s[ callbackName ] ) {
          // make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;

          // save the callback name for future use
          oldCallbacks.push( callbackName );
        }

        // Call if it was a function and we have a response
        if ( responseContainer && jQuery.isFunction( overwritten ) ) {
          overwritten( responseContainer[ 0 ] );
        }

        responseContainer = overwritten = undefined;
      });

      // Delegate to script
      return "script";
    }
  });
// Install script dataType
  jQuery.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /javascript|ecmascript/
    },
    converters: {
      "text script": function( text ) {
        jQuery.globalEval( text );
        return text;
      }
    }
  });

// Handle cache's special case and global
  jQuery.ajaxPrefilter( "script", function( s ) {
    if ( s.cache === undefined ) {
      s.cache = false;
    }
    if ( s.crossDomain ) {
      s.type = "GET";
      s.global = false;
    }
  });

// Bind script tag hack transport
  jQuery.ajaxTransport( "script", function(s) {

    // This transport only deals with cross domain requests
    if ( s.crossDomain ) {

      var script,
        head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;

      return {

        send: function( _, callback ) {

          script = document.createElement( "script" );

          script.async = "async";

          if ( s.scriptCharset ) {
            script.charset = s.scriptCharset;
          }

          script.src = s.url;

          // Attach handlers for all browsers
          script.onload = script.onreadystatechange = function( _, isAbort ) {

            if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

              // Handle memory leak in IE
              script.onload = script.onreadystatechange = null;

              // Remove the script
              if ( head && script.parentNode ) {
                head.removeChild( script );
              }

              // Dereference the script
              script = undefined;

              // Callback if not abort
              if ( !isAbort ) {
                callback( 200, "success" );
              }
            }
          };
          // Use insertBefore instead of appendChild  to circumvent an IE6 bug.
          // This arises when a base node is used (#2709 and #4378).
          head.insertBefore( script, head.firstChild );
        },

        abort: function() {
          if ( script ) {
            script.onload( 0, 1 );
          }
        }
      };
    }
  });
  var xhrCallbacks,
  // #5280: Internet Explorer will keep connections alive if we don't abort on unload
    xhrOnUnloadAbort = window.ActiveXObject ? function() {
      // Abort all pending requests
      for ( var key in xhrCallbacks ) {
        xhrCallbacks[ key ]( 0, 1 );
      }
    } : false,
    xhrId = 0;

// Functions to create xhrs
  function createStandardXHR() {
    try {
      return new window.XMLHttpRequest();
    } catch( e ) {}
  }

  function createActiveXHR() {
    try {
      return new window.ActiveXObject( "Microsoft.XMLHTTP" );
    } catch( e ) {}
  }

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
  jQuery.ajaxSettings.xhr = window.ActiveXObject ?
    /* Microsoft failed to properly
     * implement the XMLHttpRequest in IE7 (can't request local files),
     * so we use the ActiveXObject when it is available
     * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
     * we need a fallback.
     */
    function() {
      return !this.isLocal && createStandardXHR() || createActiveXHR();
    } :
    // For all other browsers, use the standard XMLHttpRequest object
    createStandardXHR;

// Determine support properties
  (function( xhr ) {
    jQuery.extend( jQuery.support, {
      ajax: !!xhr,
      cors: !!xhr && ( "withCredentials" in xhr )
    });
  })( jQuery.ajaxSettings.xhr() );

// Create transport if the browser can provide an xhr
  if ( jQuery.support.ajax ) {

    jQuery.ajaxTransport(function( s ) {
      // Cross domain only allowed if supported through XMLHttpRequest
      if ( !s.crossDomain || jQuery.support.cors ) {

        var callback;

        return {
          send: function( headers, complete ) {

            // Get a new xhr
            var handle, i,
              xhr = s.xhr();

            // Open the socket
            // Passing null username, generates a login popup on Opera (#2865)
            if ( s.username ) {
              xhr.open( s.type, s.url, s.async, s.username, s.password );
            } else {
              xhr.open( s.type, s.url, s.async );
            }

            // Apply custom fields if provided
            if ( s.xhrFields ) {
              for ( i in s.xhrFields ) {
                xhr[ i ] = s.xhrFields[ i ];
              }
            }

            // Override mime type if needed
            if ( s.mimeType && xhr.overrideMimeType ) {
              xhr.overrideMimeType( s.mimeType );
            }

            // X-Requested-With header
            // For cross-domain requests, seeing as conditions for a preflight are
            // akin to a jigsaw puzzle, we simply never set it to be sure.
            // (it can always be set on a per-request basis or even using ajaxSetup)
            // For same-domain requests, won't change header if already provided.
            if ( !s.crossDomain && !headers["X-Requested-With"] ) {
              headers[ "X-Requested-With" ] = "XMLHttpRequest";
            }

            // Need an extra try/catch for cross domain requests in Firefox 3
            try {
              for ( i in headers ) {
                xhr.setRequestHeader( i, headers[ i ] );
              }
            } catch( _ ) {}

            // Do send the request
            // This may raise an exception which is actually
            // handled in jQuery.ajax (so no try/catch here)
            xhr.send( ( s.hasContent && s.data ) || null );

            // Listener
            callback = function( _, isAbort ) {

              var status,
                statusText,
                responseHeaders,
                responses,
                xml;

              // Firefox throws exceptions when accessing properties
              // of an xhr when a network error occurred
              // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
              try {

                // Was never called and is aborted or complete
                if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

                  // Only called once
                  callback = undefined;

                  // Do not keep as active anymore
                  if ( handle ) {
                    xhr.onreadystatechange = jQuery.noop;
                    if ( xhrOnUnloadAbort ) {
                      delete xhrCallbacks[ handle ];
                    }
                  }

                  // If it's an abort
                  if ( isAbort ) {
                    // Abort it manually if needed
                    if ( xhr.readyState !== 4 ) {
                      xhr.abort();
                    }
                  } else {
                    status = xhr.status;
                    responseHeaders = xhr.getAllResponseHeaders();
                    responses = {};
                    xml = xhr.responseXML;

                    // Construct response list
                    if ( xml && xml.documentElement /* #4958 */ ) {
                      responses.xml = xml;
                    }

                    // When requesting binary data, IE6-9 will throw an exception
                    // on any attempt to access responseText (#11426)
                    try {
                      responses.text = xhr.responseText;
                    } catch( _ ) {
                    }

                    // Firefox throws an exception when accessing
                    // statusText for faulty cross-domain requests
                    try {
                      statusText = xhr.statusText;
                    } catch( e ) {
                      // We normalize with Webkit giving an empty statusText
                      statusText = "";
                    }

                    // Filter status for non standard behaviors

                    // If the request is local and we have data: assume a success
                    // (success with no data won't get notified, that's the best we
                    // can do given current implementations)
                    if ( !status && s.isLocal && !s.crossDomain ) {
                      status = responses.text ? 200 : 404;
                      // IE - #1450: sometimes returns 1223 when it should be 204
                    } else if ( status === 1223 ) {
                      status = 204;
                    }
                  }
                }
              } catch( firefoxAccessException ) {
                if ( !isAbort ) {
                  complete( -1, firefoxAccessException );
                }
              }

              // Call complete if needed
              if ( responses ) {
                complete( status, statusText, responses, responseHeaders );
              }
            };

            if ( !s.async ) {
              // if we're in sync mode we fire the callback
              callback();
            } else if ( xhr.readyState === 4 ) {
              // (IE6 & IE7) if it's in cache and has been
              // retrieved directly we need to fire the callback
              setTimeout( callback, 0 );
            } else {
              handle = ++xhrId;
              if ( xhrOnUnloadAbort ) {
                // Create the active xhrs callbacks list if needed
                // and attach the unload handler
                if ( !xhrCallbacks ) {
                  xhrCallbacks = {};
                  jQuery( window ).unload( xhrOnUnloadAbort );
                }
                // Add to list of active xhrs callbacks
                xhrCallbacks[ handle ] = callback;
              }
              xhr.onreadystatechange = callback;
            }
          },

          abort: function() {
            if ( callback ) {
              callback(0,1);
            }
          }
        };
      }
    });
  }
  var fxNow, timerId,
    rfxtypes = /^(?:toggle|show|hide)$/,
    rfxnum = new RegExp( "^(?:([-+])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
    rrun = /queueHooks$/,
    animationPrefilters = [ defaultPrefilter ],
    tweeners = {
      "*": [function( prop, value ) {
        var end, unit,
          tween = this.createTween( prop, value ),
          parts = rfxnum.exec( value ),
          target = tween.cur(),
          start = +target || 0,
          scale = 1,
          maxIterations = 20;

        if ( parts ) {
          end = +parts[2];
          unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

          // We need to compute starting value
          if ( unit !== "px" && start ) {
            // Iteratively approximate from a nonzero starting point
            // Prefer the current property, because this process will be trivial if it uses the same units
            // Fallback to end or a simple constant
            start = jQuery.css( tween.elem, prop, true ) || end || 1;

            do {
              // If previous iteration zeroed out, double until we get *something*
              // Use a string for doubling factor so we don't accidentally see scale as unchanged below
              scale = scale || ".5";

              // Adjust and apply
              start = start / scale;
              jQuery.style( tween.elem, prop, start + unit );

              // Update scale, tolerating zero or NaN from tween.cur()
              // And breaking the loop if scale is unchanged or perfect, or if we've just had enough
            } while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
          }

          tween.unit = unit;
          tween.start = start;
          // If a +=/-= token was provided, we're doing a relative animation
          tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
        }
        return tween;
      }]
    };

// Animations created synchronously will run synchronously
  function createFxNow() {
    setTimeout(function() {
      fxNow = undefined;
    }, 0 );
    return ( fxNow = jQuery.now() );
  }

  function createTweens( animation, props ) {
    jQuery.each( props, function( prop, value ) {
      var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
        index = 0,
        length = collection.length;
      for ( ; index < length; index++ ) {
        if ( collection[ index ].call( animation, prop, value ) ) {

          // we're done with this property
          return;
        }
      }
    });
  }

  function Animation( elem, properties, options ) {
    var result,
      index = 0,
      tweenerIndex = 0,
      length = animationPrefilters.length,
      deferred = jQuery.Deferred().always( function() {
        // don't match elem in the :animated selector
        delete tick.elem;
      }),
      tick = function() {
        var currentTime = fxNow || createFxNow(),
          remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
          percent = 1 - ( remaining / animation.duration || 0 ),
          index = 0,
          length = animation.tweens.length;

        for ( ; index < length ; index++ ) {
          animation.tweens[ index ].run( percent );
        }

        deferred.notifyWith( elem, [ animation, percent, remaining ]);

        if ( percent < 1 && length ) {
          return remaining;
        } else {
          deferred.resolveWith( elem, [ animation ] );
          return false;
        }
      },
      animation = deferred.promise({
        elem: elem,
        props: jQuery.extend( {}, properties ),
        opts: jQuery.extend( true, { specialEasing: {} }, options ),
        originalProperties: properties,
        originalOptions: options,
        startTime: fxNow || createFxNow(),
        duration: options.duration,
        tweens: [],
        createTween: function( prop, end, easing ) {
          var tween = jQuery.Tween( elem, animation.opts, prop, end,
            animation.opts.specialEasing[ prop ] || animation.opts.easing );
          animation.tweens.push( tween );
          return tween;
        },
        stop: function( gotoEnd ) {
          var index = 0,
          // if we are going to the end, we want to run all the tweens
          // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;

          for ( ; index < length ; index++ ) {
            animation.tweens[ index ].run( 1 );
          }

          // resolve when we played the last frame
          // otherwise, reject
          if ( gotoEnd ) {
            deferred.resolveWith( elem, [ animation, gotoEnd ] );
          } else {
            deferred.rejectWith( elem, [ animation, gotoEnd ] );
          }
          return this;
        }
      }),
      props = animation.props;

    propFilter( props, animation.opts.specialEasing );

    for ( ; index < length ; index++ ) {
      result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
      if ( result ) {
        return result;
      }
    }

    createTweens( animation, props );

    if ( jQuery.isFunction( animation.opts.start ) ) {
      animation.opts.start.call( elem, animation );
    }

    jQuery.fx.timer(
      jQuery.extend( tick, {
        anim: animation,
        queue: animation.opts.queue,
        elem: elem
      })
    );

    // attach callbacks from options
    return animation.progress( animation.opts.progress )
      .done( animation.opts.done, animation.opts.complete )
      .fail( animation.opts.fail )
      .always( animation.opts.always );
  }

  function propFilter( props, specialEasing ) {
    var index, name, easing, value, hooks;

    // camelCase, specialEasing and expand cssHook pass
    for ( index in props ) {
      name = jQuery.camelCase( index );
      easing = specialEasing[ name ];
      value = props[ index ];
      if ( jQuery.isArray( value ) ) {
        easing = value[ 1 ];
        value = props[ index ] = value[ 0 ];
      }

      if ( index !== name ) {
        props[ name ] = value;
        delete props[ index ];
      }

      hooks = jQuery.cssHooks[ name ];
      if ( hooks && "expand" in hooks ) {
        value = hooks.expand( value );
        delete props[ name ];

        // not quite $.extend, this wont overwrite keys already present.
        // also - reusing 'index' from above because we have the correct "name"
        for ( index in value ) {
          if ( !( index in props ) ) {
            props[ index ] = value[ index ];
            specialEasing[ index ] = easing;
          }
        }
      } else {
        specialEasing[ name ] = easing;
      }
    }
  }

  jQuery.Animation = jQuery.extend( Animation, {

    tweener: function( props, callback ) {
      if ( jQuery.isFunction( props ) ) {
        callback = props;
        props = [ "*" ];
      } else {
        props = props.split(" ");
      }

      var prop,
        index = 0,
        length = props.length;

      for ( ; index < length ; index++ ) {
        prop = props[ index ];
        tweeners[ prop ] = tweeners[ prop ] || [];
        tweeners[ prop ].unshift( callback );
      }
    },

    prefilter: function( callback, prepend ) {
      if ( prepend ) {
        animationPrefilters.unshift( callback );
      } else {
        animationPrefilters.push( callback );
      }
    }
  });

  function defaultPrefilter( elem, props, opts ) {
    var index, prop, value, length, dataShow, tween, hooks, oldfire,
      anim = this,
      style = elem.style,
      orig = {},
      handled = [],
      hidden = elem.nodeType && isHidden( elem );

    // handle queue: false promises
    if ( !opts.queue ) {
      hooks = jQuery._queueHooks( elem, "fx" );
      if ( hooks.unqueued == null ) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function() {
          if ( !hooks.unqueued ) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;

      anim.always(function() {
        // doing this makes sure that the complete handler will be called
        // before this completes
        anim.always(function() {
          hooks.unqueued--;
          if ( !jQuery.queue( elem, "fx" ).length ) {
            hooks.empty.fire();
          }
        });
      });
    }

    // height/width overflow pass
    if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
      // Make sure that nothing sneaks out
      // Record all 3 overflow attributes because IE does not
      // change the overflow attribute when overflowX and
      // overflowY are set to the same value
      opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

      // Set display property to inline-block for height/width
      // animations on inline elements that are having width/height animated
      if ( jQuery.css( elem, "display" ) === "inline" &&
        jQuery.css( elem, "float" ) === "none" ) {

        // inline-level elements accept inline-block;
        // block-level elements need to be inline with layout
        if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
          style.display = "inline-block";

        } else {
          style.zoom = 1;
        }
      }
    }

    if ( opts.overflow ) {
      style.overflow = "hidden";
      if ( !jQuery.support.shrinkWrapBlocks ) {
        anim.done(function() {
          style.overflow = opts.overflow[ 0 ];
          style.overflowX = opts.overflow[ 1 ];
          style.overflowY = opts.overflow[ 2 ];
        });
      }
    }


    // show/hide pass
    for ( index in props ) {
      value = props[ index ];
      if ( rfxtypes.exec( value ) ) {
        delete props[ index ];
        if ( value === ( hidden ? "hide" : "show" ) ) {
          continue;
        }
        handled.push( index );
      }
    }

    length = handled.length;
    if ( length ) {
      dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
      if ( hidden ) {
        jQuery( elem ).show();
      } else {
        anim.done(function() {
          jQuery( elem ).hide();
        });
      }
      anim.done(function() {
        var prop;
        jQuery.removeData( elem, "fxshow", true );
        for ( prop in orig ) {
          jQuery.style( elem, prop, orig[ prop ] );
        }
      });
      for ( index = 0 ; index < length ; index++ ) {
        prop = handled[ index ];
        tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
        orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

        if ( !( prop in dataShow ) ) {
          dataShow[ prop ] = tween.start;
          if ( hidden ) {
            tween.end = tween.start;
            tween.start = prop === "width" || prop === "height" ? 1 : 0;
          }
        }
      }
    }
  }

  function Tween( elem, options, prop, end, easing ) {
    return new Tween.prototype.init( elem, options, prop, end, easing );
  }
  jQuery.Tween = Tween;

  Tween.prototype = {
    constructor: Tween,
    init: function( elem, options, prop, end, easing, unit ) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || "swing";
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
    },
    cur: function() {
      var hooks = Tween.propHooks[ this.prop ];

      return hooks && hooks.get ?
        hooks.get( this ) :
        Tween.propHooks._default.get( this );
    },
    run: function( percent ) {
      var eased,
        hooks = Tween.propHooks[ this.prop ];

      if ( this.options.duration ) {
        this.pos = eased = jQuery.easing[ this.easing ](
          percent, this.options.duration * percent, 0, 1, this.options.duration
        );
      } else {
        this.pos = eased = percent;
      }
      this.now = ( this.end - this.start ) * eased + this.start;

      if ( this.options.step ) {
        this.options.step.call( this.elem, this.now, this );
      }

      if ( hooks && hooks.set ) {
        hooks.set( this );
      } else {
        Tween.propHooks._default.set( this );
      }
      return this;
    }
  };

  Tween.prototype.init.prototype = Tween.prototype;

  Tween.propHooks = {
    _default: {
      get: function( tween ) {
        var result;

        if ( tween.elem[ tween.prop ] != null &&
          (!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
          return tween.elem[ tween.prop ];
        }

        // passing any value as a 4th parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails
        // so, simple values such as "10px" are parsed to Float.
        // complex values such as "rotate(1rad)" are returned as is.
        result = jQuery.css( tween.elem, tween.prop, false, "" );
        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === "auto" ? 0 : result;
      },
      set: function( tween ) {
        // use step hook for back compat - use cssHook if its there - use .style if its
        // available and use plain properties where available
        if ( jQuery.fx.step[ tween.prop ] ) {
          jQuery.fx.step[ tween.prop ]( tween );
        } else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
          jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
        } else {
          tween.elem[ tween.prop ] = tween.now;
        }
      }
    }
  };

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function( tween ) {
      if ( tween.elem.nodeType && tween.elem.parentNode ) {
        tween.elem[ tween.prop ] = tween.now;
      }
    }
  };

  jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
    var cssFn = jQuery.fn[ name ];
    jQuery.fn[ name ] = function( speed, easing, callback ) {
      return speed == null || typeof speed === "boolean" ||
        // special check for .toggle( handler, handler, ... )
        ( !i && jQuery.isFunction( speed ) && jQuery.isFunction( easing ) ) ?
        cssFn.apply( this, arguments ) :
        this.animate( genFx( name, true ), speed, easing, callback );
    };
  });

  jQuery.fn.extend({
    fadeTo: function( speed, to, easing, callback ) {

      // show any hidden elements after setting opacity to 0
      return this.filter( isHidden ).css( "opacity", 0 ).show()

        // animate to the value specified
        .end().animate({ opacity: to }, speed, easing, callback );
    },
    animate: function( prop, speed, easing, callback ) {
      var empty = jQuery.isEmptyObject( prop ),
        optall = jQuery.speed( speed, easing, callback ),
        doAnimation = function() {
          // Operate on a copy of prop so per-property easing won't be lost
          var anim = Animation( this, jQuery.extend( {}, prop ), optall );

          // Empty animations resolve immediately
          if ( empty ) {
            anim.stop( true );
          }
        };

      return empty || optall.queue === false ?
        this.each( doAnimation ) :
        this.queue( optall.queue, doAnimation );
    },
    stop: function( type, clearQueue, gotoEnd ) {
      var stopQueue = function( hooks ) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop( gotoEnd );
      };

      if ( typeof type !== "string" ) {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if ( clearQueue && type !== false ) {
        this.queue( type || "fx", [] );
      }

      return this.each(function() {
        var dequeue = true,
          index = type != null && type + "queueHooks",
          timers = jQuery.timers,
          data = jQuery._data( this );

        if ( index ) {
          if ( data[ index ] && data[ index ].stop ) {
            stopQueue( data[ index ] );
          }
        } else {
          for ( index in data ) {
            if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
              stopQueue( data[ index ] );
            }
          }
        }

        for ( index = timers.length; index--; ) {
          if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
            timers[ index ].anim.stop( gotoEnd );
            dequeue = false;
            timers.splice( index, 1 );
          }
        }

        // start the next in the queue if the last step wasn't forced
        // timers currently will call their complete callbacks, which will dequeue
        // but only if they were gotoEnd
        if ( dequeue || !gotoEnd ) {
          jQuery.dequeue( this, type );
        }
      });
    }
  });

// Generate parameters to create a standard animation
  function genFx( type, includeWidth ) {
    var which,
      attrs = { height: type },
      i = 0;

    // if we include width, step value is 1 to do all cssExpand values,
    // if we don't include width, step value is 2 to skip over Left and Right
    includeWidth = includeWidth? 1 : 0;
    for( ; i < 4 ; i += 2 - includeWidth ) {
      which = cssExpand[ i ];
      attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
    }

    if ( includeWidth ) {
      attrs.opacity = attrs.width = type;
    }

    return attrs;
  }

// Generate shortcuts for custom animations
  jQuery.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: { opacity: "show" },
    fadeOut: { opacity: "hide" },
    fadeToggle: { opacity: "toggle" }
  }, function( name, props ) {
    jQuery.fn[ name ] = function( speed, easing, callback ) {
      return this.animate( props, speed, easing, callback );
    };
  });

  jQuery.speed = function( speed, easing, fn ) {
    var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
      complete: fn || !fn && easing ||
        jQuery.isFunction( speed ) && speed,
      duration: speed,
      easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
    };

    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
      opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

    // normalize opt.queue - true/undefined/null -> "fx"
    if ( opt.queue == null || opt.queue === true ) {
      opt.queue = "fx";
    }

    // Queueing
    opt.old = opt.complete;

    opt.complete = function() {
      if ( jQuery.isFunction( opt.old ) ) {
        opt.old.call( this );
      }

      if ( opt.queue ) {
        jQuery.dequeue( this, opt.queue );
      }
    };

    return opt;
  };

  jQuery.easing = {
    linear: function( p ) {
      return p;
    },
    swing: function( p ) {
      return 0.5 - Math.cos( p*Math.PI ) / 2;
    }
  };

  jQuery.timers = [];
  jQuery.fx = Tween.prototype.init;
  jQuery.fx.tick = function() {
    var timer,
      timers = jQuery.timers,
      i = 0;

    for ( ; i < timers.length; i++ ) {
      timer = timers[ i ];
      // Checks the timer has not already been removed
      if ( !timer() && timers[ i ] === timer ) {
        timers.splice( i--, 1 );
      }
    }

    if ( !timers.length ) {
      jQuery.fx.stop();
    }
  };

  jQuery.fx.timer = function( timer ) {
    if ( timer() && jQuery.timers.push( timer ) && !timerId ) {
      timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
    }
  };

  jQuery.fx.interval = 13;

  jQuery.fx.stop = function() {
    clearInterval( timerId );
    timerId = null;
  };

  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
  };

// Back Compat <1.8 extension point
  jQuery.fx.step = {};

  if ( jQuery.expr && jQuery.expr.filters ) {
    jQuery.expr.filters.animated = function( elem ) {
      return jQuery.grep(jQuery.timers, function( fn ) {
        return elem === fn.elem;
      }).length;
    };
  }
  var rroot = /^(?:body|html)$/i;

  jQuery.fn.offset = function( options ) {
    if ( arguments.length ) {
      return options === undefined ?
        this :
        this.each(function( i ) {
          jQuery.offset.setOffset( this, options, i );
        });
    }

    var docElem, body, win, clientTop, clientLeft, scrollTop, scrollLeft,
      box = { top: 0, left: 0 },
      elem = this[ 0 ],
      doc = elem && elem.ownerDocument;

    if ( !doc ) {
      return;
    }

    if ( (body = doc.body) === elem ) {
      return jQuery.offset.bodyOffset( elem );
    }

    docElem = doc.documentElement;

    // Make sure it's not a disconnected DOM node
    if ( !jQuery.contains( docElem, elem ) ) {
      return box;
    }

    // If we don't have gBCR, just use 0,0 rather than error
    // BlackBerry 5, iOS 3 (original iPhone)
    if ( typeof elem.getBoundingClientRect !== "undefined" ) {
      box = elem.getBoundingClientRect();
    }
    win = getWindow( doc );
    clientTop  = docElem.clientTop  || body.clientTop  || 0;
    clientLeft = docElem.clientLeft || body.clientLeft || 0;
    scrollTop  = win.pageYOffset || docElem.scrollTop;
    scrollLeft = win.pageXOffset || docElem.scrollLeft;
    return {
      top: box.top  + scrollTop  - clientTop,
      left: box.left + scrollLeft - clientLeft
    };
  };

  jQuery.offset = {

    bodyOffset: function( body ) {
      var top = body.offsetTop,
        left = body.offsetLeft;

      if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
        top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
        left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
      }

      return { top: top, left: left };
    },

    setOffset: function( elem, options, i ) {
      var position = jQuery.css( elem, "position" );

      // set position first, in-case top/left are set even on static elem
      if ( position === "static" ) {
        elem.style.position = "relative";
      }

      var curElem = jQuery( elem ),
        curOffset = curElem.offset(),
        curCSSTop = jQuery.css( elem, "top" ),
        curCSSLeft = jQuery.css( elem, "left" ),
        calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
        props = {}, curPosition = {}, curTop, curLeft;

      // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
      if ( calculatePosition ) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat( curCSSTop ) || 0;
        curLeft = parseFloat( curCSSLeft ) || 0;
      }

      if ( jQuery.isFunction( options ) ) {
        options = options.call( elem, i, curOffset );
      }

      if ( options.top != null ) {
        props.top = ( options.top - curOffset.top ) + curTop;
      }
      if ( options.left != null ) {
        props.left = ( options.left - curOffset.left ) + curLeft;
      }

      if ( "using" in options ) {
        options.using.call( elem, props );
      } else {
        curElem.css( props );
      }
    }
  };


  jQuery.fn.extend({

    position: function() {
      if ( !this[0] ) {
        return;
      }

      var elem = this[0],

      // Get *real* offsetParent
        offsetParent = this.offsetParent(),

      // Get correct offsets
        offset       = this.offset(),
        parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

      // Subtract element margins
      // note: when an element has margin: auto the offsetLeft and marginLeft
      // are the same in Safari causing offset.left to incorrectly be 0
      offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
      offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

      // Add offsetParent borders
      parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
      parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

      // Subtract the two offsets
      return {
        top:  offset.top  - parentOffset.top,
        left: offset.left - parentOffset.left
      };
    },

    offsetParent: function() {
      return this.map(function() {
        var offsetParent = this.offsetParent || document.body;
        while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
          offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || document.body;
      });
    }
  });


// Create scrollLeft and scrollTop methods
  jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
    var top = /Y/.test( prop );

    jQuery.fn[ method ] = function( val ) {
      return jQuery.access( this, function( elem, method, val ) {
        var win = getWindow( elem );

        if ( val === undefined ) {
          return win ? (prop in win) ? win[ prop ] :
            win.document.documentElement[ method ] :
            elem[ method ];
        }

        if ( win ) {
          win.scrollTo(
            !top ? val : jQuery( win ).scrollLeft(),
            top ? val : jQuery( win ).scrollTop()
          );

        } else {
          elem[ method ] = val;
        }
      }, method, val, arguments.length, null );
    };
  });

  function getWindow( elem ) {
    return jQuery.isWindow( elem ) ?
      elem :
      elem.nodeType === 9 ?
        elem.defaultView || elem.parentWindow :
        false;
  }
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
    jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
      // margin is only for outerHeight, outerWidth
      jQuery.fn[ funcName ] = function( margin, value ) {
        var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
          extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

        return jQuery.access( this, function( elem, type, value ) {
          var doc;

          if ( jQuery.isWindow( elem ) ) {
            // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
            // isn't a whole lot we can do. See pull request at this URL for discussion:
            // https://github.com/jquery/jquery/pull/764
            return elem.document.documentElement[ "client" + name ];
          }

          // Get document width or height
          if ( elem.nodeType === 9 ) {
            doc = elem.documentElement;

            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
            // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
            return Math.max(
              elem.body[ "scroll" + name ], doc[ "scroll" + name ],
              elem.body[ "offset" + name ], doc[ "offset" + name ],
              doc[ "client" + name ]
            );
          }

          return value === undefined ?
            // Get width or height on the element, requesting but not forcing parseFloat
            jQuery.css( elem, type, value, extra ) :

            // Set width or height on the element
            jQuery.style( elem, type, value, extra );
        }, type, chainable ? margin : undefined, chainable, null );
      };
    });
  });
// Expose jQuery to the global object
  window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
  if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
    define( "jquery", [], function () { return jQuery; } );
  }

})( window );
/**
 * Created with JetBrains WebStorm.
 * User: yangyuelong
 * Date: 13-9-25
 * Time: 上午10:19
 * jQuery utility extend
 */

$.extend({
    //判断空
    isEmpty: function(o) {
        return o === undefined || o === null;
    },
    //深度复制，遇到同名对象则合并，同名数组则追加
    deepExtend: function() {
        var args = [].slice.call(arguments, 0);
        var i = args.length;
        var a = args[0] || {};
        $.each(args.slice(1), function(j, o) {
            if (!$.isPlainObject(o))return true;
            $.each(o, function(i, n) {
                if ($.isPlainObject(n)) {
                    a[i] = $.deepExtend(a[i], n);
                }
                else if ($.isArray(n)) {
                    a[i] = [].concat(a[i], n);
                }
                else {
                    a[i] = n;
                }
            });
        });
        return a;
    },
    /**
     * html转义
     * @param {string} text
     * @param {boolean} _uname 转义换行符
     */
    htmlEscape: function(text, _uname) {
        var temp = (text || '') //考虑到该函数的使用范围，简单处理
            .replace(/&/g, '&amp;') //必须先于其它entity
            .replace(/>/g, '&gt;')
            .replace(/</g, '&lt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;') //&apos; ie6不支持！
            .replace(/\r/g, ''); //firefox不能识别\r
        if (_uname) return temp.replace(/\n/g, '<br>');
        else return temp;
    },
    /**
     * 字符串格式化函数
     * 1.支持变量 #{variable}
     * 2.支持函数 #{a function name defind in $item or extraItem} 函数能得到一个复合了$item和extraItem的参数
     * 3.支持循环 {{each $item}}html{{/each}} 循环体内的$item有$index键，表示当前序号
     * 4.支持简单条件判断 {{if condition}}html{{/if}} condition可以是$item里的项或函数，若是函数则执行condition($item)
     * 5.支持嵌套 #tmpl(templateSourceName,$item.some) Run like: f(templateSource,$item,$item.some)
     * 6.支持转码 #html,url{variable}
     * @param {string} source 需要格式的字符串
     * @param {Object} $item   格式化参数
     * @param {Object} extraItem   格式化额外参数
     */
    format: function(source, $item, extraItem) {
        source = $.isFunction(source) ? source($item) : String(source);
        var template = arguments.callee;
        if (arguments.length < 2) {
            return source || '';
        }
        else if ($.isArray($item)) {
            return $.map($item,function(n, i) {
                return template(source, $.extend(n, {$index: i, $item: n}), extraItem);
            }).join('');
        }
        else if ($.isPlainObject($item)) {
            if ($.isPlainObject(extraItem))$item = $.extend(extraItem, $item);
            var keyword = [
                {//{{each $item}}
                    character: /\{\{each (.*?)\}\}([\s\S]*?)\{\{\/each\}\}/g,
                    fn: function($0, $1, $2) {
                        $1 = $item[$1];
                        if ($.isEmpty($1)) {
                            return $0;
                        }
                        if (!$.isArray($1))return $2;
                        return template($2, $1, $item);
                    }
                },
                {//{{if condition}} condition($item)
                    character: /\{\{if (\!?)(.*?)\}\}([\s\S]*?)(?:\{\{else\}\}([\s\S]*?))?\{\{\/if\}\}/g,
                    fn: function($0, $3, $1, $2, $4) {
                        $1 = $item[$1];
                        $1 = $.isFunction($1) ? $1($item) : $1;
                        $3 && ($1 = !$1);
                        if ($1)return template($2, $item);
                        else if ($4)return template($4, $item);
                        else return '';
                    }
                },
                {//#tmpl(templateSource,$item.some) Run like: template(templateSource,$item,$item.some)
                    character: /\#tmpl\((.*?),(.*?)\)/g,
                    fn: function($0, $1, $2) {
                        $1 = $item[$1];
                        $2 = $item[$2];
                        if ($.isEmpty($1)) {
                            return $0;
                        }
                        return template($1, $item, $2);
                    }
                },
                {// #html{$item} #url{$item}
                    character: /\#(html|url)?\{(.*?)\}/g,
                    fn: function($0, $2, $1) {
                        if (!$.isEmpty($item[$1])) {
                            $1 = $item[$1];
                            $1 = $.isFunction($1) ? $1($item) : String($1);
                            if (typeof($1) === "undefined" || typeof($1) === "null") {
                                $1 = '';
                            }
                            if (/\#(html|url)?\{.*?\}/.test($1)) {
                                $1 = template($1, $item);
                            }
                        }
                        if ($2 === 'html') {
                            $1 = $.htmlEscape($1);
                        }
                        else if ($2 === 'url') {
                            $1 = encodeURIComponent($1);
                        }
                        return $1;
                    }
                }
            ];
            var _source = source;
            $.each(keyword, function(i, n) {
                while (n.character.test(_source))
                    _source = _source.replace(n.character, n.fn)
            });
            return _source;
        }
        else {
            var args = [].slice.call(arguments, 1);
            return source.replace(/\{([0-9]+)\}/g, function($0, $1) {
                return $.isEmpty(args[$1]) ? $0 : args[$1];
            });
        }
    }
});
/**
 * @file Mobads业务前端库
 * @author xukai01
 */

///include debug.js

/**
 * Basic Console Compatibility
 */
console = window.console || {};
console.log = console.log || new Function();
console.debug = console.debug || new Function();
console.info = console.info || new Function();
console.warn = console.warn || new Function();
console.error = console.error || new Function();

/**
 * JSON Compatibility
 */
JSON = window.JSON || {
    stringify: T.json.stringify,
    parse: T.json.parse
};

/**
 * Mobads FE
 */
var mf = {
    /**
     * __DEBUG在debug.js中定义，调试模式开关
     * 调试模式下启用mock data
     *
     * @const
     */
    DEBUG: window.__DEBUG,

    /**
     * ER刷新区域
     *
     * @const
     */
    MAIN_ID: 'Main',

    /**
     * Header配置
     *
     * @const
     */
    HEADER_ID: 'Header',
    USERNAME_ID: 'UserName',
    NAV_ID: 'Nav',
    NAV1_ID: 'Nav1',
    NAV2_ID: 'Nav2',
    NAV1_CONF: '__nav1',
    NAV2_CONF: '__nav2',
    
    /**
     * model常用变量
     * @const
     */
    MODEL_FIELD: {
        'NEED_REFRESH': 'needRefresh',
        'NEW_DATA': 'newData'
    },
    /**
     * 通知栏配置
     *
     * @const
     */
    NOTICE_ID: 'Notice',

    /**
     * 默认分页栏信息
     *
     * @const
     */
    PAGER_MODEL: {
        pageSizes: [
            { name: "20行", value: 20 },
            { name: "50行", value: 50 },
            { name: "100行", value: 100 }
        ],
        pageSize: 20
    },

    /**
     * 全局缓存，如有必须挂载window下的对象，可以转移至此处
     * ma的listLog使用了，可参照其model的实现方式
     *
     * @const
     */
    G: {},

    /**
     * 其他配置
     *
     * @const
     */
    DATE_FORMAT: 'yyyy-MM-dd',
    TIME_FORMAT: 'HH:mm:ss',
    DATE_TIME_FORMAT: 'yyyy-MM-dd HH:mm'
};

(function () {
    /**
     * mf模块容器，主要查看module.js文件和module文件夹
     * */
    mf.m = mf.exports = {};

    mf.f = $.format;

    /**
     * 对话框，加了点延迟显示的逻辑
     *
     * @param {Object} opt
     */
    function dialog(opt) {
        //loading延时显示
        clearTimeout(loadingTimer);
        opt = opt || {};
        var content = opt.content || '';
        var hide = opt.hide || false;
        var animate = opt.animate || false;
        var width = opt.width || false;
        var bgColor = opt.bgColor || '#000';
        var opacity = typeof opt.opacity === 'number' ? opt.opacity : 0.7;

        var WRAPPER = '.screen-wrapper';
        var BG = '.screen-bg';
        var CONTENT = '.screen-content';
        var $wrapper = $(WRAPPER);
        if (!$wrapper.length) {
            $(mf.f([
                '<div class="{0}">',
                '<div class="{1}"></div>',
                '<div class="{2}"></div>',
                '</div>'].join(''),
                WRAPPER.substr(1),
                BG.substr(1),
                CONTENT.substr(1))).appendTo($(document.body));
            $wrapper = $(WRAPPER);
        }
        if (opt.onhide) {
            dialog.onhide = opt.onhide;
        }
        // hide
        if (hide) {
            animate ? $wrapper.fadeOut('slow') : $wrapper.hide();
            dialog.onhide && dialog.onhide();
            dialog.onhide = null;
            return;
        }

        // show
        // FIXED 居中显示, screen-content 导致的
        var $content = $wrapper.find(CONTENT).html(content);
        var $bg = $wrapper.find(BG);
        var vp = getViewport();
        $bg.css('width', vp.width);
        $bg.css('height', vp.height);
        $bg.css('backgroundColor', bgColor);
        $bg.css('filter', mf.f('alpha(opacity = {0})', opacity * 100));
        $bg.css('-moz-opacity', opacity);
        $bg.css('opacity', opacity);
        $content.width($($content.children()[0]).width());
        $content.height($($content.children()[0]).height());
        $content.css('left', ($(window).width() - $content.width()) / 2);
        $content.css('top', ($(window).height() - $content.height()) / 3
            + $(window).scrollTop());
        animate ? $wrapper.fadeIn() : $wrapper.show();
    }

    /**
     * 获取当前视口尺寸
     *
     * @see esui.Mask.repaintMask
     */
    function getViewport() {
        return {
            width: Math.max(document.documentElement.clientWidth,
                Math.max(document.body.scrollWidth,
                    document.documentElement.scrollWidth)),
            height: Math.max(document.documentElement.clientHeight,
                Math.max(document.body.scrollHeight,
                    document.documentElement.scrollHeight))
        };
    }

    var LOADING_CONTENT = [
        '<div class="screen-loading">',
        '<span class="screen-loading-img"></span>',
        '<span class="screen-loading-txt">正在读取数据，请稍候...</span>',
        '</div>'].join('');
    var UPLOAD_SUCCEED = [
        '<div class="screen-loading">',
        '<span class="screen-loading-img"></span>',
        '<span class="screen-loading-txt"> {0}！ </span>',
        '</div>'].join('');
    var MSG_CONTENT = [
        '<div class="screen-msg">',
        '<div class="screen-msg-txt">{0}</div>',
        '<div onclick="mf.hide()" class="ui-button skin-button-em">',
        '<div class="ui-button-label skin-button-em-label" > 关闭 </div>',
        '</div>',
        '</div>'].join('');
    var TIP_CONTENT = [
        '<div class="screen-tip">',
        '<div class="screen-tip-#{titleClass}"></div>',
        '<div class="screen-tip-desc">#{msg}<br/>',
        '<div onclick="er.locator.redirect(\'#{href}\');mf.hide(1);" ',
        'class="ui-button skin-button-em">',
        '<div class="ui-button-label skin-button-em-label" > #{back} </div>',
        '</div>&nbsp;&nbsp;',
        '<div onclick="er.locator.redirect(\'#{href2}\', { force: true });mf.hide(1);" ',
        'class="ui-button #{btn2Class}">',
        '<div class="ui-button-label"> #{back2} </div>',
        '</div>',
        '</div>'].join('');
    var PAGE_CONTENT = [
        '<div class="screen-page" style="width:#{width}px;height:#{height}px;">',
        '   <div class="screen-page-close"></div>',
        '   <iframe id="#{id}" src="#{src}" frameborder="0" scrolling="#{scrolling}"',
        '   style="width:#{width}px;height:#{height}px;"></iframe>',
        '</div>'].join('');
    var LOADING_DELAY = 0; //TODO 可以调优，目前仍然是即时显示效果较好
    var loadingTimer = 0;

    /**
     * 启动页面loading
     *
     * @param {number=} [delay]
     */
    mf.loading = function (delay) {
        // 兼容数字 0
        delay = typeof delay === 'undefined' ? LOADING_DELAY : delay;
        var OPACITY = 0;
        if (delay > 0) {
            // loadingTimer && (clearTimeout(loadingTimer), loadingTimer=0); 
            // 这么做有必要吗？
            clearTimeout(loadingTimer);
            loadingTimer = setTimeout(function () {
                dialog({ content: LOADING_CONTENT, opacity: OPACITY });
            }, delay);
        }
        else {
            dialog({ content: LOADING_CONTENT, opacity: OPACITY });
        }
    };

    /**
     * 结束页面loading
     */
    mf.loaded = function () {
        mf.hide();
    };

    /**
     * 上传成功
     * @param {string=} txt 默认值为“文件上传成功”
     */
    mf.uploadSucceed = function (txt) {
        dialog({
            content: mf.f(UPLOAD_SUCCEED, txt || '文件上传成功'), opacity: 0
        });
        setTimeout(function () {
            mf.hide();
        }, 2000);
    };

    /**
     * 结束页面loading
     *
     * @param {boolean} [animate] 使用动画
     */
    mf.hide = function (animate) {
        dialog({ hide: true, animate: animate });
    };

    /**
     * 全屏提示对话框
     *
     * @param {string} msg
     */
    mf.msg = function (msg, onhide) {
        dialog({ content: mf.f(MSG_CONTENT, msg), onhide: onhide });
    };

    /**
     * 跳转至Tip page
     *
     * @param {Object} opt
     */
    mf.redirect2Tip = function (opt) {
        opt = opt || {};
        var error = !!opt.error;//强制转为boolean
        var msg = opt.msg || (error ? '您的操作已失败' : '您的操作已成功');
        var href = opt.href;
        var back = opt.back || '返回';
        var href2 = opt.href2 || '';
        var back2 = opt.back2 || '';

        dialog({
            content: mf.f(TIP_CONTENT, {
                msg: msg,
                href: href,
                back: back,
                href2: href2,
                back2: back2,
                titleClass: error ? 'error' : 'success',
                btn2Class: href2 ? '' : 'hide'
            }),
            animate: 0
        });
    };

    mf.reload = function (opt) {
        opt = opt || {};
        opt.shell = opt.shell || function () {
        };
        var loadURL = opt.loadURL || 'index.html';
        var id = 'screenPage' + (new Date()).getTime();
        var width = opt.width || 325;
        var height = opt.height || 270;
        var scrollLeft = opt.scrollLeft || 653;
        var scrollTop = opt.scrollTop || 439;
        var scrolling = opt.scrolling || 'yes';

        dialog({
            content: mf.f(PAGE_CONTENT, {
                id: id,
                src: loadURL,
                width: width,
                height: height,
                scrolling: scrolling
            }),
            animate: 0
        });
        opt.shell = (function (shell) {
            return function () {
                mf.hide();
                shell();
            };
        })(opt.shell);
        $('.screen-page-close').click(mf.hide);
        document.getElementById(id).onload = function () {
            try {
                this.contentWindow.scrollTo(scrollLeft, scrollTop);
            }
            catch (e) {
            }
        };
        return mf.screenPage.reg(id, opt.shell);
    };

    mf.screenPage = (function () {
        var regID = [];
        var l = 0;
        var reg = function (id, shell) {
            l = regID.push({ id: id, shell: shell });
            return id;
        };
        var find = function (key, callback) {
            for (var i = 0; i < l; i++) {
                var screenWindow = document.getElementById(regID[i].id);
                if (screenWindow && screenWindow.contentWindow._key === key) {
                    l--;
                    return callback(regID.splice(i, 1)[0].shell);
                }
            }
            return null;
        };
        return {
            reg: reg,
            find: find
        };
    })();

    //这个名词用来纪念adservice
    var DP_ID = '__dataProxy';
    /**
     * 文件下载
     *
     * @param {string} url
     */
    mf.download = function (url) {
        url += (url.indexOf('?') >= 0 ? '&' : '?') + '_=' + (+new Date);
        var outId = location.search.match(/outId=(\d+)(?=\&|$)/);
        if (outId) {
            url += '&outId=' + outId[1];
        }
        var $dp = $('#' + DP_ID);
        if (!$dp.length) {
            var dp = document.createElement('iframe');
            dp.onload = function () {
                var err = '';
                try {
                    var dw = this.contentWindow;
                    try {
                        var value = dw.document.body.innerHTML;
                        if (value) {
                            value = JSON.parse(value);
                            if (value && value.model 
                                && value.model.formError) {
                                mf.formErrorHandler(value.model);
                            }
                        }
                    }
                    catch (e) {
                    }
                }
                catch (e) {
                }
            };
            $dp = $(dp);
            $dp.attr('id', DP_ID);
            $dp.css('visibility', 'hidden');
            $dp.css('position', 'absolute');
            $dp.css('display', 'block');
            $dp.css('width', '1px');
            $dp.css('height', '1px');
            $dp.css('overflow', 'hidden');
            $dp.appendTo(document.body);
        }
        $dp.attr('src', url);
    };

    /**
     * 封装Model数据请求，处理mock data
     *
     * 根据mf.DEBUG重写url
     *
     * mock data规范：
     *   exports.request 请求参数定义
     *   exports.response 响应数据定义
     *
     * @inner
     * @param {string} url
     * @param {function(Object)} onSuccess
     * @param {Object=} [opt]
     */
    var ajax = function (url, onSuccess, opt) {
        opt = opt || {};
        var method = opt.post ? 'POST' : 'GET';
        var data = opt.data || {};
        var ourl = url;
        var ajax = arguments.callee;
        if (!ajax.__called) {
            ajax.__called = true;
            //global error handler
            /*$(document).ajaxError(function(event, request, settings) {
             console.log(event, request, settings);
             mf.msg('网络异常，请尝试稍后操作<br>'); //;+ JSON.stringify(event)
             });*/
        }
        var query = url.indexOf('?') >= 0 ? url.split('?')[1] : '';
        url = url.substring(0,
            url.indexOf('?') >= 0 ? url.indexOf('?') : url.length);
        var outId = location.search.match(/outId=([\w\d]+)(?=\&|$)/);
        if (outId) {
            query += '&outId=' + outId[1];
        }

        /**
         * 处理服务器返回的数据
         *
         * @param {Object} result 服务器返回json解析后的对象
         */
        var onData = function (result) {
            mf.loaded();
            var model = result.model;
            if (!result.success && !model.formError) {//非表单错误处理
                if (model.global) {
                    mf.msg(model.global);
                }
                else if (model.sessionTimeout) {
                    //回话超时登录机制。确保shell里的参数结构和mf.ajax参数结构一致
                    var obj = {
                        shell: (function (ajax, url, onSuccess, opt) {
                            return function () {
                                mf.loading();
                                ajax(url, onSuccess, opt);
                            };
                        })(ajax, ourl, onSuccess, opt)
                    };
                    var erPage = mf.getErPage();
                    if (mf.hao) {
                        
                    } else if (mf.hj) {
                        if (erPage === 'admin') {
                            location.href = '#/index/login~force=1';
                            return;
                        }
                    } else { //保证其他项目也能享用超时登出
                        mf.cookieKeyMap.authority && T.cookie.set(
                            mf.cookieKeyMap.authority, 0);
                        window.location.reload();
                    }
                    console.log('sessionTimeout', model.sessionTimeout, erPage, obj);
                    mf.reload(obj);
                }
                else if (model.redirect) {
                    er.locator.redirect(model.redirect);
                }
                else {
                    mf.msg('未知错误，请联系我们<br>');
                }
            }
            else {
                console.log('ajax model', model);
                $.isFunction(onSuccess) && onSuccess(model);
            }
        };

        var errorMsg = function (XMLHttpRequest, otherInfo) {
            console.log('%cajax Error entirely', 'color:red;font-size:150%;', XMLHttpRequest, otherInfo);
            mf.msg('网络异常，请尝试稍后操作<br>');
        };
        var sessionTimeoutModel = {
            success: false,
            model: {
                sessionTimeout: 1
            }
        };
        if (mf.DEBUG) {//mock data 
            // 兼容排序处理
            // url = mf.f('data{0}.js{1}{2}', url + (query.indexOf('order=desc') >= 0 
            // ? '-desc' : ''), query ? '?' : '', query);
            // ? & 简化处理，不影响调试，表纠结！
            url = mf.f('{0}.js?{1}', url.replace(/\.html$/i, ''), query);
            if (!/[\\\/]/.test(url.charAt(0))) {
                url = '/' + url;
            }
            for (var q in data) {
                url += mf.f('&{0}={1}', q, data[q]);
            }
            $.getScript('data' + url, function () {
                onData(window.exports.response);
            });
        } else {
            url = url + (/\.html$/i.test(url) ? '' : '.json')
                + (query ? '?' : '') + query;
            $.ajax({
                url: url,
                type: method,
                data: data,
                cache: false,
                dataType: 'json',
                success: function (result, textStatus, XMLHttpRequest) {
                    console.log('success', textStatus, XMLHttpRequest);
                    if ($.isEmptyObject(result) || $.isEmpty(result)) {
                        onData.call(XMLHttpRequest, sessionTimeoutModel);
                    }
                    else {
                        onData.call(XMLHttpRequest, result);
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    var text = XMLHttpRequest.responseText;
                    console.log('error', XMLHttpRequest)
                    if (/success/i.test(text)) {
                        try {
                            text = eval('(function () { return ' + text + ';})()');
                        }
                        catch (e) {
                            errorMsg(XMLHttpRequest, 'JSON parse Error');
                            return false;
                        }
                        onData.call(XMLHttpRequest, text);
                    }
                    else {
                        errorMsg(XMLHttpRequest);
                    }
                }
            });
        }
    };

    /**
     * Http GET
     *
     * @param {string} url
     * @param {function} onSuccess
     */
    mf.get = function (url, onSuccess) {
        ajax(url, onSuccess);
    };

    /**
     * Http POST
     *
     * @param {string} url
     * @param {Object} data POST data
     * @param {function} onSuccess
     */
    mf.post = function (url, data, onSuccess) {
        ajax(url, onSuccess, { post: true, data: data });
    };

    /**
     * 获取当前page
     *
     * @param {string=} [url]
     * @return {String}
     */
    mf.getErPage = function (url) {
        url = url || location.href;
        var page = null;
        try {
            page = /\/(\w+?)\.html([?#]|$)/.exec(url)[1];
        }
        catch (e) {
            console.log(e);
        }
        return page;
    };

    /**
     * 获取当前page
     *
     * @param {string=} [url]
     * @return {String}
     */
    mf.getErPath = function (url) {
        url = url || location.href;
        var path = null;
        try {
            path = /#((\/\w*?)+)(~|$)/.exec(url)[1];
        }
        catch (e) {
            console.log(e);
        }
        return path;
    };

    /**
     * 根据sitemap生成nav1
     * 需要支持静态页link
     *
     * @param {Object} opt
     */
    mf.updateNav1 = function (opt) {
        opt = opt || {};
        var sitemap = opt.sitemap || mf.MAP;
        var $nav = $('#' + (opt.nav || mf.NAV_ID));
        var $nav1 = $('#' + (opt.nav1 || mf.NAV1_ID));
        var highlight = opt.highlight || '';
        var hideNav = opt.hideNav || [];
        var HL_C = 'on';
        var PRE_NAV1 = '__nav1_';
        var HOVER_C = 'hover';
        var page = mf.getErPage();
        if (!$nav1.length) {
            return;
        }
        if (!mf.updateNav1.__called) {//create nav1
            mf.updateNav1.__called = 1;
            var tabs = sitemap[page][mf.NAV1_CONF];

            //ui
            var html = ['<ul>'];
            var TPL = [
                '<li id="__nav1_{3}">',
                '<sup class="l"></sup>',
                '<a class="nav-1-{3}" {0} href="{1}"><span>{2}</span></a>',
                '<sup class="r"></sup>',
                '</li>'].join('');
            var user = mf.getUser();
            for (var k in tabs) {
                if (tabs.hasOwnProperty(k)) {
                    var tab = tabs[k];
                    if (tab.authority && !er.permission.isAllow(tab.authority)) {
                        continue;
                    }
                    var url = tab.url;
                    // 财务为例，如果该客户在秋实平台只消费技术服务资金池，则显示www2的财务标签
                    if (tab.urlExtSwitch && user[tab.urlExtSwitch] === '1') {
                        url = tab.urlExt;
                    }
                    url = mf.f(url, { userid: user.userid });
                    if ($.inArray(k, hideNav) === -1) { //隐藏相应标签
                        html.push(mf.f(TPL,
                            url.indexOf('#') === 0 ? '' : 'target="_blank"',
                            url, tab.label, k));
                    }
                }
            }
            html.push('</ul>');
            $nav1.html(html.join(''));

            //bind events
            $nav1.find('a').focus(function () {
                $(this).blur();
            });
            $nav1.find('li').mouseover(function () {
                $(this).hasClass(HL_C) || $(this).addClass(HOVER_C);
            }).mouseout(function () {
                    $(this).removeClass(HOVER_C);
                });
        }
        if (highlight) {
            $nav1.find('li').removeClass(HL_C);
            $nav1.find(mf.f('li[id=__nav1_{0}]', highlight)).addClass(HL_C);
        }
        $nav.show();
    };

    var SEP = '<span class="nav-2-sep">{0}</span>';
    /**
     * 根据path和sitemap生成nav1
     * 需要支持静态页link
     *
     * @param {Object} [opt]
     * @param {boolean=} opt.hide
     * @param {string=} opt.sep
     * @param {string=} opt.nav2
     */
    mf.updateNav2 = function (opt) {
        opt = opt || {};
        var hide = opt.hide || false;
        var sep = mf.f(SEP, opt.sep) || '';
        var $nav2 = $('#' + (opt.nav2 || mf.NAV2_ID));
        if (opt.nav2Html) {//支持自定义nav2, ma创意添加过程会使用到
            $nav2.html(opt.nav2Html);
            return;
        }

        var sitemap = opt.sitemap || mf.MAP;
        var nav1s = sitemap[mf.getErPage()][mf.NAV1_CONF];
        var nav2s = sitemap[mf.getErPage()][mf.NAV2_CONF];
        var path = opt.path || mf.getErPath();
        // sitemap.js中__nav2可以不存在
        // tip页等没有nav
        if (!nav2s || !nav2s[path]) {
            return;
        }
        var nav2 = nav2s[path];
        mf.updateNav1({ highlight: nav2.nav1 });
        if (!$nav2.length) {
            return;
        }
        var html = [];
        var TLP1 = '<span class="nav-2-item"><b>{0}</b></span>';
        var TLP2 = '<span class="nav-2-item">'
            + '<a href="{0}" class="{2}" {3}>{1}</a></span>';
        for (var k in nav2.list) {
            if (nav2.list.hasOwnProperty(k)) {
                var tab = nav2.list[k];
                var conf = er.controller.getActionConfigByPath(tab.nav2);
                if (conf && conf.authority && !er.permission.isAllow(conf.authority)) {
                    continue;
                }
                if (tab.parentPath) {
                    if (tab.nav2 === path) {
                        opt.path = tab.parentPath;
                        mf.updateNav2(opt);
                        return;
                    }
                } else {
                    var boo = tab.nav2.indexOf('/') === 0;
                    html.push(mf.f(TLP2, (boo ? '#' : '') + tab.nav2,
                        nav2s[tab.nav2].label,
                        (tab.parent ? ' nav-2-back ' : '') +
                        (tab.nav2 === path ? ' nav-2-current' : ''),
                        boo ? '' : 'target="_blank"'));
                }
            }
        }
        $nav2.html(html.join(sep));
        !html.length || hide || !nav1s[nav2.nav1] || nav1s[nav2.nav1].hideNav2
            ? $nav2.hide() : $nav2.show();
    };

    /**
     * 获取全局唯一的id
     *
     * @param {number} [opt_len] 默认为64位
     */
    mf.getGUID = function (opt_len) {
        var len = opt_len || 64;
        return er._util.getUID(len);
    };

    var NOTICE_ID = '__mfNoticePanel';
    var NOTICE = mf.f('<div id="{0}" class="notice"></div>', NOTICE_ID);
    var NOTICE_CLOSE = '<a href="javascript:;" class="notice-close" ></a>';
    var NOTICE_ICON = '<span class="notice-icon" ></span>';
    /**
     * 设置页面级别的通知
     *
     * @param {object=} opt
     * @param {object=} opt.msg 消息
     * @param {function=} opt.onClose
     * @param {object=} opt.level 消息级别，默认为 'warn'，['error' 'warn' 'info']
     */
    mf.notice = function (opt) {
        var hide = opt.hide || false;
        var $notice = $('#' + NOTICE_ID);
        if (hide) {
            $notice.hide();
            return;
        }

        var msg = opt.msg || '';
        var html = [];
        html.push(NOTICE_ICON);
        html.push(msg);

        if (!$notice.length) {
            $(NOTICE).insertAfter('#' + mf.HEADER_ID);
            $notice = $('#' + NOTICE_ID);
            console.log($notice);
        }

        var onClose = $.isFunction(opt.onClose) ? opt.onClose : new Function();
        $notice.empty().html(html.join(''))
            .append($(NOTICE_CLOSE).click(function () {
                $notice.hide();
                onClose();
            })).show();
    };

    /**
     * Sugar for Action onenter
     */
    mf.onenter = function (action, opt) {
        mf.notice({ hide: 1 });
        mf.loading();
        var user = mf.getUser();
        console.log('user', user);
        if (user) {
            $('#' + mf.USERNAME_ID).html(user.name);
            if (action && action.model && action.model.set) {
                action.model.set('userInfo', user);
            }
        }
        mf.updateNav2(opt);
    };

    /**
     * 按照指定日偏移量，获取日期对象
     *
     * @param {number} offset 单位天，可以为负数
     * @return {Date}
     */
    mf.getDate = function (offset) {
        offset = offset || 0;
        var date = new Date();
        date.setTime(date.getTime() + 86400 * 1000 * offset);
        console.log(date);
        return date;
    };

    /**
     * MultiCalendar默认可选范围的起点, mobads正式对外的那一天(2011-7-25)
     *
     * @type {Date}
     */
    var ORIGIN = new Date(2011, 7, 25);

    /**
     * MultiCalendar默认可选时间范围
     *
     * @type {Object}
     */
    mf.DEF_DATE_RANGE = { begin: ORIGIN, end: mf.getDate(0) };

    /**
     * MultiCalendar默认初始时间
     *
     * @type {Object}
     */
    mf.DEF_DATE_VALUE = { begin: mf.getDate(-6), end: mf.getDate(0) };

    /**
     * 获取Date对象日期部分的字符串
     *
     * @return {string}
     */
    mf.getDateString = function (date) {
        date = date || new Date();
        return T.date.format(date, mf.DATE_FORMAT);
    };
    /**
     * 获取Date对象日期部分与小时分钟部分的字符串
     *
     * @return {string}
     */
    mf.getDateTimeString = function (date) {
        date = date || new Date();
        return T.date.format(date, mf.DATE_TIME_FORMAT);
    };

    /**
     * 初始化Model
     *
     * @param {Object} opt
     * @param {er.Model.Loader} opt.loader
     * @param {Object} opt.model
     * @param {Array=} opt.fields
     */
    mf.initModel = function (opt) {
        console.log('initModel', opt);
        var loader = opt.loader;
        var model = opt.model;
        //客户端model
        loader.set('pageSizes', mf.PAGER_MODEL.pageSizes);
        if (loader.get('from') && loader.get('to')) {
            loader.set('date', loader.get('from') + ',' + loader.get('to'));
        }

        //服务器Model，可覆盖客户端model
        var selectTxtMap = {
            App: '应用', ProductType: '广告', Channel: '渠道',
            DataType: '数据', OsType: '操作系统',
            Selfpromote: '推广', Status: '状态'
        };
        for (var k in model) {
            if (model.hasOwnProperty(k)) {
                var data = model[k];
                if (k.indexOf('_select') === 0 && $.isArray(data)) {
                    var suffix = selectTxtMap[k.substring(7)] || '';
                    data.unshift({ name: '全部' + suffix, value: '' });
                }
                loader.set(k, data);
            }
        }

        var fields = opt.fields;
        if (fields) {
            loader.set('fields', $.isFunction(fields) ? fields(loader) : fields);
        }
        //扩展通用list model
        var list = model.list;
        if (list) {
            loader.set('list', list.data);
            loader.set('listTotalSize', list.totalSize);
            loader.set('total',
                Math.ceil(list.totalSize / loader.get('pageSize')));
        }

        //扩展report model
        var flashList = model.flashList;
        if (flashList) {
            flashList.data.length < 1 && flashList.data.push({
                "date": loader.get('from'),
                "showNum": 0,
                "clickNum": 0,
                "clickRate": 0,
                "avgClickCost": 0,
                "CPM": 0,
                "CPC": 0,
                "dldNum": 0,
                "totalCost": 0,
                "avgDldCost": 0
            });
            loader.set('flashList', flashList.data);
        }
    };

    /**
     * 初始化Table控件组合
     *
     * @param {Object} opt
     * @param {er.Action} opt.action
     * @param {er.Model} opt.model
     */
    mf.initList = function (opt) {
        var action = opt.action;
        var model = action.model;
        var listId = opt.listId || 'list';
        var listOrderField = opt.listOrderField || 'order';
        var listOrderByField = opt.listOrderByField || 'orderBy';
        var pageSizeId = opt.pageSizeId || 'pageSize';
        var pageSizeField = opt.pageSizeField || 'pageSize';
        var pagerId = opt.pagerId || 'pager';
        var pagerField = opt.pagerField || 'page';
        var list = esui.get(listId);

        if (list) {
            list.onsort = function (field, order) {
                model.set(listOrderField, order);
                model.set(listOrderByField, field.field);
                mf.searchSubmit($.extend({}, opt, { clearSelf: 1 }));
            };
            var scroll = $(list.main).parents('.list-table-scroll');
            var scrollTable = $('.scroll-wrapper', scroll)[0];
            var scrollBox = $('.scroll-box', scroll);
            var eventFlag = 'resize.scrollTable';
            $(window).unbind(eventFlag);
            if (scroll.length) {
                $(window).bind(eventFlag,function () {
                    scrollBox.unbind('scroll.table');
                    if (scrollTable.scrollWidth > scroll[0].scrollWidth) {
                        scrollBox.show();
                        $('div', scrollBox).width(scrollTable.scrollWidth);
                        scrollBox.bind('scroll.table', function () {
                            scrollTable.scrollLeft = this.scrollLeft;
                        });
                    }
                    else {
                        scrollBox.hide();
                    }
                }).trigger(eventFlag);
            }
        }
        if (esui.get(pageSizeId)) {
            esui.get(pageSizeId).onchange = function (pageSize) {
                model.set(pageSizeField, pageSize);
                mf.searchSubmit($.extend({}, opt, { reset: this.startNumber }));
            };
        }
        if (esui.get(pagerId)) {
            esui.get(pagerId).onchange = function (page) {
                model.set(pagerField, page);
                mf.searchSubmit($.extend({}, opt));
            };
        }
    };

    /**
     * 初始化Multi Calendar
     *
     * @param {Object} opt
     * @param {er.Action} opt.action
     */
    mf.initMultiCalendar = function (opt) {
        var action = opt.action;
        opt.reset = $.isEmpty(opt.reset) ? 1 : opt.reset;
        opt.clearSelf = $.isEmpty(opt.clearSelf) ? 1 : opt.clearSelf;
        var model = action.model;
        var base = model.BASE;
        if (esui.get('date')) {
            esui.get('date').onchange = function (value) {
                var from = baidu.date.format(value.begin, mf.DATE_FORMAT);
                var to = baidu.date.format(value.end, mf.DATE_FORMAT);
                model.set('from', from);
                model.set('to', to);
                if (base) {
                    base.from = from;
                    base.to = to;
                }
                mf.searchSubmit(opt);
            };
        }
    };

    /**
     * 初始化查询或搜索按钮
     *
     * @param {Object} opt
     * @param {er.Action} opt.action
     */
    mf.initSearch = function (opt) {
        var action = opt.action;
        var searchId = opt.searchId || 'search';
        opt.word = $.isEmpty(opt.word) ? 1 : opt.word;
        opt.reset = $.isEmpty(opt.reset) ? 1 : opt.reset;
        opt.clearSelf = $.isEmpty(opt.clearSelf) ? 1 : opt.clearSelf;
        opt.onbefore = $.isFunction(opt.onbefore)
            ? opt.onbefore : function () {
        };
        var model = action.model;
        if (esui.get(searchId)) {
            esui.get(searchId).onclick = function () {
                if (opt.onbefore.call(this, opt) !== false) {
                    mf.searchSubmit(opt);
                }
            };
        }
    };

    /**
     * 查询提交
     *
     * @param {Object} opt
     * @param {er.Action} opt.action
     * @param {boolean=} opt.reset
     */
    mf.searchSubmit = function (opt) {
        opt = opt || {};
        var action = opt.action || {};
        var model = action.model || {};
        !$.isEmpty(opt.reset) && model.set('page', opt.reset);
        opt.word && (function (i) {
            var uiKey = opt.word == 1 ? 'keyWord' : opt.word;
            var word = esui.get(uiKey + i);
            if (word) {
                model.set(uiKey + i, word.getValue());
                i = i || 0;
                arguments.callee(++i);
            }
        })('');
        var base = model.BASE;
        if (base && base.cache) {
            opt.clearCache && (base.cache = {});
            if (opt.clearSelf) {
                delete base.cache[base.cacheId];
                var suffix = base.cacheId.split('_')[0];
                for (var i in base.cache) {
                    if (i.indexOf(suffix) === 0) {
                        delete base.cache[i];
                    }
                }
            }
        }
        mf.loading();
        if (opt.isSub) {
            mf.subActionRefresh(action, opt.queryMap);
        }
        else {
            mf.queryMapEncode(model, opt.queryMap);
            action.refresh(opt.queryMap || model.QUERY_MAP);
        }
    };

    mf.subActionRefresh = function (action, opt_queryMap) {
        var model = action.model;
        model.set('_loadDirectLy', true);
        for (var i in (opt_queryMap || {})) {
            model.set(i, opt_queryMap[i]);
        }
        action.__fireEvent('onenter');
        action.__fireEvent('onbeforeloadmodel');
        model.load.call(model, function () {
            action.__fireEvent('onafterloadmodel');
            action.view.repaint();  
            action.__fireEvent('onafterrepaint');
            action.__fireEvent('onentercomplete');
        });
    };

    mf.queryMapEncode = function (model, maps) {
        console.log('queryMapEncode', model.QUERY_MAP)
        maps = maps || model.QUERY_MAP;
        for (var i in maps) {
            if (/^(.+)Encode$/.test(maps[i])) {
                model.set(maps[i], encodeURIComponent(model.get(RegExp.$1) || ''));
            }
        }
    };

    /**
     * 解析查询用的文本到keyword
     * */
    mf.parseQueryMap = function (model, queryMap) {
        queryMap = queryMap || model.QUERY_MAP || {};
        $.each(queryMap, function (i, n) {
            var value = model.get(i);
            if (value) {
                if (/^(.+)Encode$/.test(n)) {
                    model.set(RegExp.$1, /%[a-f0-9]{2}/i.test(value)
                        ? decodeURIComponent(value) : value);
                }
                else {
                    model.set(n, value);
                }
            }
        });
    };

    /**
     * 各个站点及页面所用cookie键值的遍历
     * 在页面的page.js里根据需要取COOKIE_KEY_MAP里的值覆盖cookieKeyMap
     * */
    mf.cookieKeyMap = {};
    mf.COOKIE_KEY_MAP = {
        _default: {
            name: 'debug',
            userid: '9527',
            authority: '0',
            extFinance: '0',
            extAccount: '0'
        }
    };

    /**
     * 获取用户信息
     * cookie方案
     *
     * @return {Object}
     */
    mf.getUser = function () {
        var keyMap = mf.cookieKeyMap;
        var user = {};
        for (var i in keyMap) {
            user[i] = T.cookie.get(keyMap[i]) || mf.COOKIE_KEY_MAP._default[i] || '';
        }
        return user;
    };

    var NAN = 'NaN';
    /**
     * 统一处理数字输出，针对NaN和无穷的情况
     *
     * @param {number} flo 浮点数
     * @param {string} def 精度
     * @param {string=} dis 占位符
     * @return {string}
     */
    mf.print = function (flo, def, dis) {
        dis = dis || NAN;
        return isNaN(flo) || Number.POSITIVE_INFINITY == flo ? NAN : def;
    };

    /**
     * 浮点数打印
     *
     * @param {number} flo 浮点数
     * @param {number=} [power] 精度
     * @return {string}
     */
    mf.printFloat = function (flo, power) {
        power = power || 0;
        var f = flo + '';
        if (power <= 0) {//整型
            return Math.floor(flo) + '';
        }
        var pad = f.indexOf('.') < 0
            ? '' : f.substring(f.indexOf('.') + 1, f.indexOf('.') + 1 + power);
        var len = power - pad.length;
        for (var i = 0; i < len; ++i) {
            pad += '0';
        }
        return Math.floor(flo) + '.' + pad;
    };

    /**
     * 浮点数截断
     *
     * @param {number} flo 浮点数
     * @param {number=} [power] 截断精度
     * @return {number}
     */
    mf.trimFloat = function (flo, power) {
        power = typeof power !== 'undefined' ? power : 2;
        return parseFloat(mf.printFloat(flo, power));
    };

    /**
     * 金额打印
     *
     * @param {number} num
     * @param {number=} [power] 精度
     * @param {string=} [unit] 货币单位
     * @return {string}
     */
    mf.printMoney = function (num, power, unit) {
        power = typeof power !== 'undefined' ? power : 2;
        unit = unit || '￥';
        return unit + mf.printFloat(num, power);
    };

    /**
     * 2位小数四舍五入
     *
     * @param {number} num
     */
    mf.printRound = function (num) {
        return Math.floor(num * 100 + 0.5) / 100;
    };

    /**
     * 截断冒泡
     */
    mf.cancelBubble = function (e) {
        e = e || window.event;
        if (e.stopPropagation) {
            e.stopPropagation();
        }
        else {
            e.cancelBubble = true;
        }
    };

    /**
     * FIXME 密码的输入框，坑的地方在于，本来想改input的type的，结果ie7不让改
     * @param {string} id
     * @param {string} showId
     */
    mf.fixPassword = function (id, showId) {
        var ctrl = esui.get(id);
        var ele, showEle;
        if (ctrl) {
            ele = ctrl.main;
            showEle = esui.get(showId).main;
        }
        else {
            ele = document.getElementById(id);
            showEle = document.getElementById(showId);
        }
        $(showEle).bind('focus', function () {
            $(ele).show().focus();
            $(showEle).hide();
        });
        $(ele).bind('blur', function () {
            var val = ctrl ? ctrl.getValue() : ele.value;
            if (val === '') {
                $(showEle).show();
                $(ele).hide();
            }
        });
    };

    mf.isLoginPage = function () {
        return mf.getErPage() === 'index' ||
            mf.getErPage() === 'admin' && mf.getErPath() === '/index/login';
    };

    /**
     * 列表切换
     * 当切换的选项仅有一项时，可以理解为列表过滤。可以配置列表的选项属性。
     * TODO 拓展配置列表的多重属性，强化功能
     * @param {Object} opt
     *   box {string} 按钮ui id
     *   list {string} 列表ui id
     *   fields {Array.<Object>} 切换数据 
     *   {id:'1', value: '0|1|2|3', text: '这一行', select: 'multi'}
     *   select {string} 切换选项状态 multi || single || null;
     */
    mf.initSwitchTable = function (opt) {
        opt = opt || {};
        var switchBox = esui.get(opt.box);
        var switchTable = esui.get(opt.list);
        var switchOptions = opt.fields || [];
        var listField;
        if (switchOptions.length && switchBox && switchTable) {
            listField = switchTable.fields;
            switchBox.value = switchBox.datasource !== switchOptions
                ? switchOptions[0].id : switchBox.getValue()[0];
            switchBox.datasource = switchOptions;
            switchBox.onchange = function (values, value) {
                var option = mf.m.utils.deepSearch('', switchOptions, value, 'id');
                if (!option) {
                    return false;
                }
                var field = [];
                $.each(option.value.split('|'), function (i, n) {
                    n && field.push(listField[n]);
                });
                switchTable.fields = field;
                if ('select' in option) {
                    switchTable.select = option.select;
                }
                switchTable.render();
            };
            switchBox.render();
        }
        if (switchBox) {
            if (switchOptions.length < 2) {
                $(switchBox.main).hide();
            } else {
                $(switchBox.main).show();
            }
        }
    };

    /**
     * 表单错误信息提示
     * 当返回的错误信息无具体ele显示时就弹框逐条显示
     * @param {Object} result 返回的信息
     *   formError {Array.<Object>} 错误信息
     *   reflect {Object=} 字段映射
     * @public
     */
    mf.formErrorHandler = function (result, onok) {
        if (result.reflect) {
            mf.m.utils.reflect(result.formError, result.reflect);
        }
        esui.Dialog.alert({
            title: '操作失败',
            content: $.map(result.formError || [],
                function (n, i) {
                    return i + ' : ' + n;
                }).join('<br />'),
            onok: onok
        });
    };

    mf.switchStatusText = function (status, field) {
        return function (datas, success, failed) {
            var findFiled = this.field;
            $.each(success, function (i, n) {
                var valueIndex = mf.m.utils.indexOfArray(datas, n, findFiled);
                if (valueIndex > -1) {
                    datas[valueIndex][field] = status;
                }
            });
        };
    };

    mf.loadModelByBase = function (c, loader, f) {
        mf.loading();
        if (c.loaded) {
            mf.loaded();
            f(c.model);
        }
        else {
            loader.stop();
            mf.get(c.loaderSrc + (c.loaderSrc.indexOf('?') > -1 ? '&' : '?')
                + loader.getQueryString(c.queryMap
            ), function (model) {
                mf.loaded();
                if (model.formError) {
                    mf.formErrorHandler(model);
                    return false;
                }
                model.page = loader.get('page');
                model.pageSize = loader.get('pageSize');
                c.model = model;
                c.loaded = true;
                f(c.model);
                loader.start();
            });
        }
    };

    /*
     * 开启含有iframe的对话框
     */
    mf.setPage = function (title, data, url, closeCallback) {
        var dlg = window.MaskDialog = esui.util.create('Dialog', {
            id: '__DialogAlert' + esui.Dialog._increment(),
            width: 1020,
            height: 500,
            autoPosition: 1,
            draggable: 1,
            mask: { level: 10000 },
            data: data
        });
        dlg.show();
        dlg.setTitle(title);
        dlg.getBody().innerHTML = '<iframe frameborder="0" scrolling="auto" src="'
            + url + '" style="width:100%; height:500px;"></iframe>';
        dlg.close = function () {
            closeCallback = closeCallback || function () {
            };
            dlg.onhide();
            closeCallback();
        };
        dlg.onhide = function () {
            dlg.hide();
            dlg.dispose();
            window.MaskDialog = null;
        };
    };
})();
