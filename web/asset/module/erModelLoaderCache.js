/**
 * @file Generated by er-sync, module
 * @author Luics<xukai01@baidu.com>
 * @date Fri Mar 07 2014 11:15:21 GMT+0800 (中国标准时间)
 * Copyright (c) 2012 Baidu.com, Inc. All Rights Reserved
 * shortcut mf.m.erModelLoaderCache
 */
(function(exports, module) {
    var erModelLoaderCache = function(opt) {
        opt = opt || '';
        var url = opt.url;
        var method = opt.method || 'get';
        var dataUrl = opt.dataUrl || url;
        var queryMap = opt.queryMap || {};
        var fields = opt.fields;
        var path = opt.path || '_default';
        var base = opt.base;
        if (!base) {
            base = {};
            base[path] = {};
        }
        var subField = opt.subField || ['pageSize', 'page'];
        var cacheField = opt.cacheField || [];
        var loadFromBase = [].concat(base.loadFromBase, opt.loadFromBase);
        var getCache = function(loader) {
            var cache = base.cache;
            if (!cache) cache = base.cache = {};
            var cacheId = [path].concat($.map(subField, function(n) {
                var field = n;
                if ($.isFunction(field)) {
                    return field.call(base, loader);
                }
                else return loader.get(field);
            })).join('_');
            cache[cacheId] || (cache[cacheId] = {});
            base.cacheId = cacheId;
            return cache[cacheId];
        };

        return {
            LOADER_LIST: ['modelLoader', 'modelPhase'],
            QUERY_MAP: queryMap,
            modelLoader: new er.Model.Loader(function() {
                console.log('modelLoader');
                var loader = this;
                var cache = getCache(loader);
                if ($.isEmptyObject(queryMap)) {
                    queryMap = loader.QUERY_MAP = loader.QUERY_MAP || {};
                }
                loader.BASE = base;
                $.each(loadFromBase, function(i, n) {
                    loader.set(n, base[n]);
                });
                if (!loader.LOAD_DIRECTLY) {
                    mf.parseQueryMap(loader);
                }
                var query = loader.getQueryString();
                base[path].path = '#' + url + (url.indexOf('~') > -1 ? '&' : '~') + query;
                if (!loader.ENFORCE && !$.isEmptyObject(cache)) {
                    loader.MODEL = cache;
                    loader.LOAD_CACHE = true;
                    console.log('load in cache', cache);
                    return true;
                } else {
                    loader.LOAD_CACHE = false;
                }
                loader.stop();
                mf.loading();
                var callback = function(model) {
                    if (model.formError) {
                        mf.formErrorHandler(model);
                        return false;
                    }
                    loader.MODEL = model;
                    loader.start();
                };
                var temp = dataUrl + (dataUrl.indexOf('?') > -1 ? '&' : '?') + query;
                if (method === 'get') mf.get(temp, callback);
                else mf.post(temp.substring(0, temp.indexOf('?')),
                    temp.substr(temp.indexOf('?') + 1), callback);
            }),
            modelPhase: new er.Model.Loader(function() {
                mf.loaded();
                var loader = this;
                loader.LOAD_DIRECTLY = false;
                var model = loader.MODEL;
                mf.initModel({ loader: loader, model: model, fields: fields });
                mf.parseQueryMap(loader);
                if (!loader.LOAD_CACHE) {
                    var cache = getCache(loader);
                    $.extend(cache, model);
                }
                $.each(cacheField, function(i, n) {
                    base[n] = loader.get(n);
                });
                base.current = path;
            })
        };
    };
    exports.erModelLoaderCache = erModelLoaderCache;
})(mf && mf.m || exports || {}, mf || module);