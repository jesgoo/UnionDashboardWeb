/**
 * @file Generated by er-sync
 * @author killeryyl<longgeyang@jesgoo.com>
 * @date Mon Sep 07 2015 13:21:21 GMT+0800 (CST)
 * Copyright (c) 2015 jesgoo.com, Inc. All Rights Reserved
 */
(function () {
    var FIELDS = function (model) {
        var needFieldLists = [
            {
                title: '结算日期',
                stable: 1,
                width: 100,
                align: 'center',
                content: function (item) {
                    return item.date.substr(0, 4) + '年' + (+item.date.substr(4, 2)) + '月';
                }
            },
            {
                title: '展现量',
                align: 'center',
                content: mf.getFieldContentLess('impression')
            },
            {
                title: '调整前收入',
                align: 'center',
                content: mf.getFieldContentMoney('income')
            },
            {
                title: '调整额',
                align: 'center',
                subEntry: true,
                isSubEntryShow: function (item) {
                    return !!(item.discount);
                },
                content: (function (textFn) {
                    return function (item) {
                        return (item.discount > 0 ? '扣款' : item.discount < 0 ? '补贴' : '') + ' '
                               + textFn({discount: Math.abs(item.discount)});
                    }
                })(mf.getFieldContentMoney('discount'))
            },
            {
                title: '可提现收入',
                align: 'center',
                content: mf.getFieldContentMoney('income_final')
            },
            {
                title: '状态',
                align: 'center',
                stable: 1,
                width: 210,
                content: function (item, index) {
                    var text = '';
                    switch (item.status) {
                        case 0:
                            text = '无可提现金额';
                            break;
                        case 1:
                            text = '财务审核中';
                            break;
                        case 2:
                            text = '可以申请提现';
                            break;
                        case 3:
                            text = '申请已受理，请开具发票提现';
                            break;
                        case 4:
                            text = '提现完成';
                            break;
                        default:
                            text = '-';
                    }
                    return text;
                }
            },
            {
                title: '操作',
                align: 'center',
                breakLine: 1,
                stable: 1,
                width: 90,
                content: function (item, index) {
                    var ops = [];
                    if (item['error']) {
                        ops.push(item['error']);
                    } else if (item.status === 2 && item.income > 0) {
                        ops.unshift('<a class="ui-button skin-button-attraction" data-cmd="withdraw" data-index="'
                                    + index
                                    + '"><span class="ui-button-label skin-button-attraction-label" data-cmd="withdraw" data-index="'
                                    + index + '">申请提现</span></a>');
                    }
                    return ops.join('&nbsp;') || '-';
                }
            }
        ];
        return needFieldLists;
    };

    mf.index.account.model.settlement = new er.Model({
        QUERY_MAP: {
            'begin': 'begin',
            'end': 'end'
        },
        LOADER_LIST: ['modelLoader'],
        modelLoader: new er.Model.Loader(function () {
            console.log('modelLoader');
            var loader = this;

            loader.stop();
            var now = loader.get('end');
            if (!now) {
                now = new Date();
                if (now.getDate() < 15) {
                    now.setMonth(now.getMonth() - 1);
                }
            } else {
                now = new Date(now.substr(0, 4), now.substr(4, 2));
            }
            var begin = new Date(now.getFullYear() - 2, now.getMonth());
            loader.set('begin', T.date.format(begin, 'yyyyMM'));
            loader.set('beginStr', T.date.format(begin, 'yyyy年MM月'));
            loader.set('end', T.date.format(now, 'yyyyMM'));
            loader.set('endStr', T.date.format(now, 'yyyy年MM月'));
            mf.parallelAjax([
                '/withdraw2?' + loader.getQueryString()
            ], function (entities) {
                var total_income = 0;
                var total_income_pending = 0;
                var total_income_withdraw = 0;
                var list = $.map(entities, function (n, date) {
                    n.date = date;
                    n.discount = (n.discount || 0) / 1000;
                    n.income = (n.income || 0) / 1000;
                    n.income_final = n.income - n.discount;
                    n.status === 2 && (total_income += n.income_final || 0);
                    n.status === 3 && (total_income_pending += n.income_final || 0);
                    n.status === 4 && (total_income_withdraw += n.income_final || 0);
                    return n;
                });
                list.sort(function (a, b) {
                    return a.date > b.date ? -1 : 1;
                });
                mf.initEntities({
                    loader: loader,
                    entities: list,
                    fields: FIELDS(list)
                });
                loader.set('totalIncome', mf.getFieldContentMoney('money')({money: total_income}));
                loader.set('totalIncomePending', mf.getFieldContentMoney('money')({money: total_income_pending}));
                loader.set('totalIncomeWithdraw', mf.getFieldContentMoney('money')({money: total_income_withdraw}));
                loader.start();
            });
        })
    });
})();
/*(function () {
 var FIELDS = function (model) {
 var needFieldLists = [
 {
 title:'结算日期',
 stable:1,
 width: 100,
 align: 'center',
 content: function (item) {
 return item.date.substr(0, 4) + '年' + (+item.date.substr(4, 2)) + '月';
 }
 },
 {
 title:'调整前收入',
 align: 'center',
 content: mf.getFieldContentMoney('income_origin')
 },
 {
 title:'调整额',
 align: 'center',
 subEntry: true,
 isSubEntryShow: function (item) {
 return !!(item.discount && item.discount.length);
 },
 content: mf.getFieldContentMoney('discount_sum')
 },
 {
 title:'可提现收入',
 align: 'center',
 content: mf.getFieldContentMoney('income')
 },
 {
 title: '状态',
 align: 'center',
 stable:1,
 width: 150,
 content: function (item, index) {
 var text = '';
 switch(item.status) {
 case 0:
 text = '无可提现金额';
 break;
 case 1:
 text = '财务审核中';
 break;
 case 2:
 text = '可以申请提现';
 break;
 case 3:
 text = '申请已受理，请开具发票提现';
 break;
 case 4:
 text = '提现完成';
 break;
 default:
 text = '-';
 }
 return text;
 }
 },
 {
 title: '操作',
 align: 'center',
 breakLine: 1,
 stable: 1,
 width: 150,
 content: function (item, index) {
 var ops = [];
 if (item['error']) {
 ops.push(item['error']);
 } else if (item.status === 2 && item.income > 0) {
 ops.unshift('<a class="ui-button skin-button-attraction" data-cmd="withdraw" data-index="' + index + '"><span class="ui-button-label skin-button-attraction-label" data-cmd="withdraw" data-index="' + index + '">申请提现</span></a>');
 }
 return ops.join('&nbsp;') || '-';
 }
 }
 ];
 return needFieldLists;
 };

 mf.index.account.model.settlement = new er.Model({
 QUERY_MAP: {
 'begin': 'begin',
 'end': 'end'
 },
 LOADER_LIST: ['modelLoader'],
 modelLoader: new er.Model.Loader(function () {
 console.log('modelLoader');
 var loader = this;

 loader.stop();
 var now = loader.get('end');
 if(!now) {
 now = new Date();
 if (now.getDate() < 15) {
 now.setMonth(now.getMonth() -1);
 }
 } else {
 now = new Date(now.substr(0, 4), now.substr(4, 2));
 }
 var begin = new Date(now.getFullYear() - 1, now.getMonth());
 loader.set('begin', T.date.format(begin, 'yyyyMM'));
 loader.set('beginStr', T.date.format(begin, 'yyyy年MM月'));
 loader.set('end', T.date.format(now, 'yyyyMM'));
 loader.set('endStr', T.date.format(now, 'yyyy年MM月'));
 mf.parallelAjax([
 '/withdraw?' + loader.getQueryString()
 ], function (entities) {
 var total_income = 0;
 var total_income_pending = 0;
 var total_income_withdraw = 0;
 var list = $.map(entities, function (n, date) {
 n.date = date;
 (n.discount || []).forEach(function (item) {
 item.discount = (item.discount || 0) / 1000;
 });
 n.discount_sum = (n.discount || []).reduce(function (sum, item) {
 return (item.discount || 0) + sum;
 }, 0);
 n.income = (n.income || 0) / 1000;
 n.income_origin = n.income;
 n.income = n.income_origin - n.discount_sum;
 n.status === 2 && (total_income += n.income || 0);
 n.status === 3 && (total_income_pending += n.income || 0);
 n.status === 4 && (total_income_withdraw += n.income || 0);
 return n;
 });
 list.sort(function (a, b) {
 return a.date > b.date ? -1 : 1;
 });
 mf.initEntities({
 loader: loader,
 entities: list,
 fields: FIELDS(list)
 });
 loader.set('totalIncome', total_income);
 loader.set('totalIncomePending', total_income_pending);
 loader.set('totalIncomeWithdraw', total_income_withdraw);
 loader.start();
 });
 })
 });
 })();*/