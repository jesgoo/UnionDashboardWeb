/**
 * @file Generated by er-sync
 * @author killeryyl<longgeyang@jesgoo.com>
 * @date Tue Mar 17 2015 09:45:32 GMT+0800 (CST)
 * Copyright (c) 2015 jesgoo.com, Inc. All Rights Reserved
 */
(function () {
    var FIELDS = function (model, config) {
        var lists = config.lists.siteMediaList;
        var operateData = mf.operateDataInConfigField(lists);
        var needFieldLists = {
            'id': {
                stable:1,
                width: 80,
                content: function (item, index) {
                    return '<a data-cmd="position" data-index="' + index + '">' + operateData.get(item, 'id', '') + '</a>';
                }
            },
            'mediaType': {},
            'name': {
                width: 120,
                content: function (item, index) {
                    if (operateData.get(item, 'id')) {
                        return '<a data-cmd="position" data-index="' + index + '">' + operateData.get(item, 'name', '') + '</a>';
                    } else {
                        return operateData.get(item, 'name');
                    }
                },
                validator: function (value, item) {
                    return (!value || value.length < 3) && '名称长度不能少于2位';
                }
            },
            'note': {},
            'createTime': {
                stable:1,
                width: 100
            },
            'modifyTime': {
                stable:1,
                width: 100
            },
            'isPopups': {
                datasource: config.maps.toggleMap,
                content: function (item) {
                    var r = mf.m.utils.deepSearch('children', config.maps.toggleMap, operateData.get(item, 'isPopups'), 'value', 0);
                    return r ? r.name || '-' : '-';
                }
            },
            'popupInterval': {
                content: function (item, index, col, textClass) {
                    if (operateData.get(item, 'isPopups')) {
                        return operateData.get(item, 'popupInterval') || 0;
                    } else {
                        textClass.push('ui-table-cell-editor-disabled');
                        return '-';
                    }
                },
                validator: function (value, item) {
                   return operateData.get(item, 'isPopups') && value < 1 && '不能小于0';
                }
            },
            'operation': {
                title: '操作',
                stable:1,
                width: 80,
                content: function (item, index) {
                    var ops = [];
                    if (item._isModify) {
                        ops.unshift('<a data-cmd="save" data-index="' + index + '">保存</a>');
                    }
                    if (item._isNew) {
                        ops.unshift('<a data-cmd="delete_add" data-index="' + index + '">删除</a>');
                    }
                    if (!(item._isModify || item._isNew)) {
                        ops.unshift('<a data-cmd="add_adslot" data-index="' + index + '">添加广告位</a>');
                    }
                    return ops.join('&nbsp;');
                }
            }
        };
        return mf.mockTableFields(needFieldLists, lists);
    };
    mf.index.media.model.site = new er.Model({
        QUERY_MAP: {
        },
        LOADER_LIST: ['modelLoader'],
        modelLoader: new er.Model.Loader(function () {
            console.log('modelLoader');
            var loader = this;
            
            loader.stop();
            mf.parallelAjax([
                {
                    url: '/config',
                    cache: true
                },
                '/media?type=' + mf.m.config.maps.mediaType.site
            ], function (config, entities) {
                mf.initEntities({
                    loader: loader,
                    entities: entities,
                    fields: FIELDS(entities, config)
                });
                loader.set('config', config);
                loader.set('siteMediaList', config.lists.siteMediaList);
                loader.set('siteMediaCount', entities.length);
                loader.start();
            });
        })
    });
})();