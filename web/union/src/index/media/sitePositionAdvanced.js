/**
 * @file Generated by er-sync
 * @author killeryyl<longgeyang@jesgoo.com>
 * @date Fri Dec 25 2015 13:38:46 GMT+0800 (CST)
 * Copyright (c) 2015 jesgoo.com, Inc. All Rights Reserved
 */
(function () {
    mf.index.media.sitePositionAdvanced = new er.Action({
        model: mf.index.media.model.sitePositionAdvanced,
        view: new er.View({
            template: 'mf_index_media_sitePositionAdvanced',
            UI_PROP: {}
        }),
        STATE_MAP: {},

        onenter: function () {
            console.log('onenter');
            mf.onenter();
        },
        onafterloadmodel: function () {
            console.log('onafterloadmodel');
            /*this.model.set('requestData', {
                "mask": {
                    "percent": 10,
                    "range": [
                        [
                            0,
                            0,
                            5,
                            100
                        ],
                        [
                            95,
                            0,
                            5,
                            100
                        ]
                    ]
                }
            });*/
        },
        onentercomplete: function () {
            console.log('onentercomplete');
            mf.loaded();
            var action = this;
            var model = action.model;
            var $configArea = $('#' + action.view.target + ' .config-area');
            var jsonEditor = new mf.m.jsonEditor($configArea);
            jsonEditor.setData(model.get('requestData') || {});
            action.setValue = function (config) {
                var advancedConfig = jsonEditor.getData();
                ['mask', 'frequency', 'logo', 'logable', 'needTop', 'cache', 'autoPlayInterval', 'hideInterval', 'needVisual', 'download', 'coin', 'lucky', 'splash', 'fuck'].forEach(function (n) {
                    if (!(n in advancedConfig)) {
                        delete config[n];
                    }
                });
                mf.m.utils.extend(config, advancedConfig);
                return advancedConfig;
            }
        },
        onleave: function () {
            console.log('onleave');
            var commands = this.model.get('commands');
            commands && mf.clickCommand.dispose(commands);
        }
    });
})();