/**
 * @file Generated by er-sync
 * @author killeryyl<longgeyang@jesgoo.com>
 * @date Mon May 18 2015 15:43:32 GMT+0800 (CST)
 * Copyright (c) 2015 jesgoo.com, Inc. All Rights Reserved
 */
(function () {
    var scaleConfig = {
        width: baseWidth,
        text: {},
        marker: function (value, position) {
            if (position == "right") {
                value = '止' + value + 'px';
            } else {
                value = '按钮起' + value + 'px';
            }
            return value;
        },
        template: 'custom_free'
    };
    function freeStyle(free, templateID, styleName, templateData) {
        var elementID = templateID + '_' + styleName;
        free.toJSON = (function (fn) {
            return function () {
                var result = fn();
                var content = mf.m.utils.recursion.get(result, 'content.content.content', '');
                mf.m.utils.recursion.set(result, 'content.content.content', content.replace(/<%([\s\S]*?)%>/g, '<\\\\%$1%\\\\>'));
                return result;
            }
        })(free.toJSON);
    }
    mf.index.media.templateBannerFree = new er.Action({
        model: mf.index.media.model.templateBannerFree,
        view: new er.View({
            template: 'mf_index_media_templateBannerFree',
            UI_PROP: {}
        }),
        STATE_MAP: {},

        onentercomplete: function () {
            console.log('onentercomplete');
            var action = this;
            var model = action.model;
            var config = model.get('config');
            var templateID = model.get('template');
            var styleName = model.get('styleName');

            var refreshActionNewESUI = mf.m.utils.nextTickWrapper(function () {
                $.extend(action._controlMap, esui.init(this));
            });
            var templateData = model.get('templateData') || {};

            var property = propertyList[styleName](propertyConfig);
            var getCustomLayout = layoutList[styleName];
            var getMockData = new MockData(mf.index.media.model.mockData_free);

            property = baidu.object.clone(property);
            property.html.properties[0].property = '模版文本';
            //property.content.properties[0].type = 'dialog';

            var customTemplate = initCustomEditor({
                templateID: templateID,
                styleName: styleName,
                scaleConfig: scaleConfig,
                contentConfig: new PropertyConfig(property, templateData.content),
                getCustomLayout: getCustomLayout,
                refreshESUI: refreshActionNewESUI,
                mockData: getMockData
            });
            mf.m.utils.nextTick(customTemplate.preview);
            //freeStyle(customTemplate, templateID, styleName, templateData);
            esui.get('switchInfo').onclick = function () {
                customTemplate.preview();
            };
            action.save = function () {
                return customTemplate.toJSON();
            };

            var elementID = templateID + '_' + styleName;
            var configSelect = esui.get('configSelect_' + elementID);
            if (configSelect) {
                configSelect.onchange = function (values, value) {
                    var item = mf.m.utils.deepSearch(configSelect.datasource, value, 'value');
                    if (item && item.data) {
                        var scaleData = item.data.scale;
                        var layoutData = getCustomLayout(item.data.scale);
                        var demoContent = new PropertyConfig(baidu.object.clone(property), item.data.content);
                        var contentData = demoContent.getData();
                        var templateData = getMockData.get();
                        var customJS = generator(styleName, contentData, layoutData, scaleData, true);
                        mf.m.preview.previewCustomJS(null, templateData, 'configDemo_' + elementID, customJS);
                        $('#configDemoArea_' + elementID).show();
                        copyStyle.enable();
                    }
                };
                var copyStyle = esui.get('copyStyle_' + elementID);
                copyStyle.onclick = function () {
                    copyStyle.disable();
                    var value = configSelect.getValue()[0];
                    var item = mf.m.utils.deepSearch(configSelect.datasource, value, 'value');
                    action.reloadBaseDemo && action.reloadBaseDemo(item.data, value);
                };

                var defaultDemo = model.get('defaultDemo');
                if (defaultDemo) {
                    configSelect.setValue(defaultDemo, { dispatch: true });
                }
            }

            var saveBtn = esui.get('saveStyle_' + templateID + '_' + styleName);
            if (saveBtn) {
                saveBtn.onclick = function () {
                    console.log('save');
                    var result = customTemplate.toJSON();
                    var getData = customTemplate.contentConfig.getData();
                    mf.m.utils.writeInNewWindow(result);
                    mf.m.utils.writeInNewWindow(getData);
                };
            }
            var closeStyle = esui.get('closeStyle_' + templateID + '_' + styleName);
            if (closeStyle) {
                closeStyle.onclick = function () {
                    console.log('close');
                };
            }

            if (window.__DEBUG) {
                $('.operation-area', '#' + action.view.target).show()
            }

            refreshActionNewESUI.call(document.getElementById(action.view.target));
        },
        onleave: function () {
            console.log('onleave');
        }
    });
})();