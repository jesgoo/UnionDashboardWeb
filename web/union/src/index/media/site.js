/**
 * @file Generated by er-sync
 * @author Luics<xukai01@baidu.com>
 * @date Tue Mar 17 2015 09:45:32 GMT+0800 (CST)
 * Copyright (c) 2012 Baidu.com, Inc. All Rights Reserved
 */
(function () {

    mf.index.media.site = new er.Action({
        model: mf.index.media.model.site,
        view: new er.View({
            template: 'mf_index_media_site',
            UI_PROP: {}
        }),
        STATE_MAP: {
            page: 0,
            pageSize: mf.PAGER_MODEL.pageSize,
            pageSizes: mf.PAGER_MODEL.pageSizes
        },

        onenter: function () {
            console.log('onenter');
            mf.onenter();
        },
        onafterloadmodel: function () {
        },
        onafterrender: function () {
            console.log('onafterrender');
            mf.loaded();
            var action = this;
            var model = action.model;
            var table = esui.get('list');
            var pager = esui.get('pager');
            var pageSizer = esui.get('pageSize');
            var popupsCount = esui.get('popupsCount');
            var siteMediaCount = esui.get('siteMediaCount');
            var dataList = model.get('list');
            var config = model.get('config');
            var siteMediaList = model.get('siteMediaList');
            var siteMediaFieldInConfig = mf.mockFieldInConfig(siteMediaList);
            var operateData = mf.operateDataInConfigField(siteMediaList);
            var emptySiteMedia = mf.initEntityInConfig(siteMediaList);
            table.order = 'asc';
            table.orderBy = siteMediaFieldInConfig('id');
            var refreshTable = mf.mockPager(dataList, {
                pager: pager,
                pageSizer: pageSizer,
                table: table
            });
            refreshTable();
            var refreshPopupsCount = function () {
                var number = $.grep(dataList, function (n) {
                    return operateData.get(n, 'isPopups');
                }).length;
                popupsCount.setContent(number.toString());
            };
            refreshPopupsCount();
            table.onedit = (function (fn) {
                return function (value, options) {
                    if (options.field.listKey === 'isPopups') {
                        operateData.set(this.datasource[options.rowIndex], 'popupInterval', 0);
                    }
                    refreshPopupsCount();
                    fn.apply(this, arguments);
                };
            })(table.onedit);
            model.set(
                'commands',
                mf.clickCommand.register(
                    [
                        {
                            cmd: 'search',
                            handle: function (options) {
                                var text = esui.get('siteMediaId').getValue();
                                var filter;
                                if (text) {
                                    filter = function (obj) {
                                        return String(operateData.get(obj, 'id')).indexOf(text) > -1;
                                    }
                                }
                                refreshTable({
                                    page: 0,
                                    filter: filter
                                });
                            }
                        },
                        {
                            cmd: 'add',
                            handle: function (options) {
                                var newRow = $.deepExtend({}, emptySiteMedia);
                                newRow = mf.grepDataInConfig(newRow, siteMediaList);
                                newRow._isNew = true;
                                table.datasource = table.datasource || [];
                                table.datasource.unshift(newRow);
                                table.render();
                            }
                        },
                        {
                            cmd: 'delete_add',
                            handle: function (options) {
                                table.datasource.splice(options.index, 1);
                                table.render();
                            }
                        },
                        {
                            cmd: 'save',
                            handle: function (options) {
                                var row = table.datasource[options.index];
                                if (mf.tableSavingValidator(row, table.fields)) {
                                    mf.parallelAjax({
                                        type: 'POST',
                                        url: '/media' + (row._isNew ? '' : '/' + operateData.get(row, 'id')),
                                        data: mf.grepDataInConfig(row, siteMediaList)
                                    }, function (result) {
                                        var newData = result[0];
                                        if (row._isNew) {
                                            dataList.unshift(newData);
                                            siteMediaCount.setContent(dataList.length);
                                            refreshPopupsCount();
                                        } else {
                                            var idField = siteMediaFieldInConfig('id');
                                            var index = mf.m.utils.indexOfArray(dataList, row[idField], idField);
                                            index > -1 && (dataList[index] = newData);
                                        }
                                        table.datasource[options.index] = newData;
                                        table.render();
                                    });
                                }
                            }
                        },
                        {
                            cmd: 'copy',
                            handle: function (options) {
                                var row = table.datasource[options.index];
                                var newRow = $.deepExtend({}, emptySiteMedia, row);
                                newRow = mf.grepDataInConfig(newRow, siteMediaList);
                                newRow._isModify = true;
                                newRow._isNew = true;
                                table.datasource.unshift(newRow);
                                table.render();
                            }
                        },
                        {
                            cmd: 'position',
                            handle: function (options) {
                                var row = table.datasource[options.index];
                                var siteId = operateData.get(row, 'id');
                                if (siteId) {
                                    var url = '/media/sitePosition~' + $.param({
                                            siteId: siteId,
                                            siteName: operateData.get(row, 'name')
                                        });
                                    mf.m.utils.nextTick(function () {
                                        er.locator.redirect(url);
                                    });
                                }
                            }
                        }
                    ],
                    {
                        region: '#' + action.view.target,
                        rewrite: true
                    }
                )
            );
        },
        onentercomplete: function () {
            console.log('onentercomplete');

        },
        onleave: function () {
            console.log('onleave');
            var commands = this.model.get('commands');
            commands && mf.clickCommand.dispose(commands);
        }
    });
})();