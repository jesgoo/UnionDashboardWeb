/**
 * @file Generated by er-sync
 * @author Luics<xukai01@baidu.com>
 * @date Wed Mar 18 2015 14:40:37 GMT+0800 (CST)
 * Copyright (c) 2012 Baidu.com, Inc. All Rights Reserved
 */
(function () {

    mf.index.media.sitePosition = new er.Action({
        model: mf.index.media.model.sitePosition,
        view: new er.View({
            template: 'mf_index_media_sitePosition',
            UI_PROP: {
                list: {
                    subrow: 1,
                    subrowMutex: 0
                    //select: 'single',
                    //selectMode: 'line'
                }
            }
        }),
        STATE_MAP: {
            page: 0,
            pageSize: mf.PAGER_MODEL.pageSize,
            pageSizes: mf.PAGER_MODEL.pageSizes
        },

        onenter: function () {
            console.log('onenter');
            mf.onenter();
        },
        onbeforemodelload: function () {
            console.log('onafterrepaint');
        },
        onafterrender: function () {
            console.log('onafterrender');
        },
        onentercomplete: function () {
            console.log('onentercomplete');
            mf.loaded();
            var action = this;
            var model = action.model;
            var table = esui.get('list');
            var pager = esui.get('pager');
            var pageSizer = esui.get('pageSize');
            var sitePositionCount = esui.get('sitePositionCount');
            var dataList = model.get('list');
            var config = model.get('config');
            var sitePositionList = model.get('sitePositionList');
            var sitePositionFieldInConfig = mf.mockFieldInConfig(sitePositionList);
            var operateData = mf.operateDataInConfigField(sitePositionList);
            var emptySitePosition = {};
            emptySitePosition[sitePositionFieldInConfig('media')] = model.get('siteId');
            emptySitePosition = mf.initEntityInConfig(sitePositionList, emptySitePosition);
            table.order = 'asc';
            table.orderBy = sitePositionFieldInConfig('id');
            var saveRow = function (rowIndex) {
                var row = table.datasource[rowIndex];
                if (mf.tableSavingValidator.call(table, row, table.fields)) {
                    mf.parallelAjax({
                        type: 'POST',
                        url: '/adslot' + (row._isNew ? '' : '/' + operateData.get(row, 'id')),
                        data: mf.grepDataInConfig(row, sitePositionList)
                    }, function (result) {
                        var newData = result[0];
                        if (row._isNew) {
                            dataList.unshift(newData);
                            sitePositionCount.setContent(dataList.length);
                        } else {
                            var idField = sitePositionFieldInConfig('id');
                            var index = mf.m.utils.indexOfArray(dataList, row[idField], idField);
                            index > -1 && (dataList[index] = newData);
                        }
                        table.datasource[rowIndex] = newData;
                        table.render();
                    });
                } else {
                    return false;
                }
            };
            var refreshTable = mf.mockPager(dataList, {
                pager: pager,
                pageSizer: pageSizer,
                table: table
            }, {
                editToSave: function (value, options, editor) {
                    var row = table.datasource[options.rowIndex];
                    if (!row._isNew){
                        return saveRow(options.rowIndex);
                    }
                }
            });
            refreshTable();
            var jssdkDomain = location.host.replace(/^union\./i, 'cdn.');
            //var jssdkDomain = location.host.replace(/^union\./i, 'api.');

            table.onedit = (function (fn) {
                return function (value, options) {
                    var row = table.datasource[options.rowIndex];
                    switch (options.field.listKey) {
                        case 'type':
                            var r = mf.m.utils.deepSearch('children', config.maps.sitePositionTypeMap,
                                value, 'value', 0);
                            operateData.set(row, 'height', r.heightDefault);
                            operateData.set(row, 'hasCloseBtn', false);
                            break;
                        case 'displayType':
                            if (value === config.maps.sitePositionDisplayType['float']) {
                                operateData.set(row, 'position', config.maps.displayPositionType.bottom);
                                operateData.set(row, 'hasCloseBtn', true);
                                operateData.set(row, 'blank', false);
                            }
                            break;
                    }
                    fn.apply(this, arguments);
                };
            })(table.onedit);
            var preview = mf.m.utils.throttle(function (rowIndex) {
                //mf.m.preview.previewHTML(
                //    mf.reflectDataInConfig(table.datasource[rowIndex], sitePositionList),
                //'positionPreview'
                //);
                mf.m.preview.previewJS(
                    mf.reflectDataInConfig(table.datasource[rowIndex], sitePositionList),
                    'positionPreview'
                );
            }, 300);
            var previewWithCustomJS = function (adslotData) {
                return mf.m.utils.throttle(function (js, data) {
                    //mf.m.preview.previewHTML(
                    //    mf.reflectDataInConfig(table.datasource[rowIndex], sitePositionList),
                    //'positionPreview'
                    //);
                    adslotData.js = js;
                    adslotData.data = data;
                    mf.m.preview.previewCustomJS(
                        adslotData,
                        'positionPreview'
                    );
                }, 300);
            };
            table._rowOverHandler = function (rowIndex) {
                esui.Table.prototype._rowOverHandler.call(this, rowIndex);
                preview(rowIndex);
            };
            action.subAction = {};
            table.onsubrowopen = mf.m.utils.nextTickWrapper(function(index, item) {
                var me = this;
                var subRow = me.getSubrow(index);
                console.log('open subrow', subRow);
                if (action.subAction[index]) {
                    action.subAction[index].leave();
                }
                var adslotData = mf.reflectDataInConfig(item, sitePositionList);
                action.subAction[index] = er.controller.loadSub(
                    subRow.id,
                    'mf.index.media.siteTemplate',
                    {
                        queryMap: {
                            adslot: operateData.get(item, 'id'),
                            adslotData: adslotData
                        }
                    }
                );
                action.subAction[index].preview = previewWithCustomJS(adslotData);
            });
            table.onsubrowclose = function(index) {
                var subAction = action.subAction[index];
                if (subAction && subAction.leave) {
                    subAction.leave();
                    action.subAction[index] = null;
                }
            };
            $.extend(action._controlMap, esui.init(table.main));
            model.set(
                'commands',
                mf.clickCommand.register(
                    [
                        {
                            cmd: 'search',
                            handle: function (options) {
                                var text = esui.get('sitePositionName').getValue();
                                var filter;
                                if (text) {
                                    var valueRegExp = mf.m.utils.makeRegExp(text, 'i');
                                    filter = function (obj) {
                                        return valueRegExp.test(operateData.get(obj, 'name'));
                                    };
                                }
                                refreshTable({
                                    page: 0,
                                    filter: filter
                                });
                            }
                        },
                        {
                            cmd: 'add',
                            handle: function (options) {
                                var newRow = $.deepExtend({}, emptySitePosition);
                                newRow = mf.grepDataInConfig(newRow, sitePositionList);
                                newRow._isNew = true;
                                table.datasource = table.datasource || [];
                                table.datasource.unshift(newRow);
                                table.render();
                            }
                        },
                        {
                            cmd: 'delete_add',
                            handle: function (options) {
                                table.datasource.splice(options.index, 1);
                                table.render();
                            }
                        },
                        {
                            cmd: 'save',
                            handle: function (options) {
                                return saveRow(options.index);
                            }
                        },
                        {
                            cmd: 'copy',
                            handle: function (options) {
                                var row = table.datasource[options.index];
                                var newRow = $.deepExtend({}, emptySitePosition, row);
                                newRow = mf.grepDataInConfig(newRow, sitePositionList);
                                newRow._isModify = true;
                                newRow._isNew = true;
                                table.datasource.unshift(newRow);
                                table.render();
                            }
                        },
                        {
                            cmd: 'code',
                            handle: function (options) {
                                var row = table.datasource[options.index];
                                esui.Dialog.alert({
                                    title: '网站媒体代码',
                                    content: mf.etplFetch('position_jssdk_code', {
                                        domain: jssdkDomain,
                                        adslot: operateData.get(row, 'id'),
                                        channelId: T.cookie.get('union_default_channel')
                                    })
                                });
                            }
                        }
                    ],
                    {
                        region: '#' + action.view.target,
                        rewrite: true
                    }
                )
            );
        },
        onleave: function () {
            console.log('onleave');
            var action = this;
            $.each(action.subAction || {}, function (index, subAction) {
                if (subAction && subAction.leave) {
                    subAction.leave();
                }
            });
            action.subAction = null;
            var commands = this.model.get('commands');
            commands && mf.clickCommand.dispose(commands);
        }
    });
})();