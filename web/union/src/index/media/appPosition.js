/**
 * @file Generated by er-sync
 * @author Luics<xukai01@baidu.com>
 * @date Thu Apr 09 2015 10:53:19 GMT+0800 (CST)
 * Copyright (c) 2012 Baidu.com, Inc. All Rights Reserved
 */
(function () {
    mf.index.media.appPosition = new er.Action({
        model: mf.index.media.model.appPosition,
        view: new er.View({
            template: 'mf_index_media_appPosition',
            UI_PROP: {
                list: {
                    //select: 'single',
                    //selectMode: 'line'
                }
            }
        }),
        STATE_MAP: {
            page: 0,
            pageSize: mf.PAGER_MODEL.pageSize,
            pageSizes: mf.PAGER_MODEL.pageSizes
        },

        onenter: function () {
            console.log('onenter');
            mf.onenter();
        },
        onbeforemodelload: function () {
            console.log('onafterrepaint');
        },
        onafterrender: function () {
            console.log('onafterrender');
        },
        onentercomplete: function () {
            console.log('onentercomplete');
            mf.loaded();
            var action = this;
            var model = action.model;
            var table = esui.get('list');
            var pager = esui.get('pager');
            var pageSizer = esui.get('pageSize');
            var appPositionCount = esui.get('appPositionCount');
            var dataList = model.get('list');
            var config = model.get('config');
            var appPositionList = model.get('appPositionList');
            var appPositionFieldInConfig = mf.mockFieldInConfig(appPositionList);
            var operateData = mf.operateDataInConfigField(appPositionList);
            var emptySitePosition = {};
            emptySitePosition[appPositionFieldInConfig('media')] = model.get('appId');
            emptySitePosition = mf.initEntityInConfig(appPositionList, emptySitePosition);
            table.order = 'asc';
            table.orderBy = appPositionFieldInConfig('id');
            var refreshTable = mf.mockPager(dataList, {
                pager: pager,
                pageSizer: pageSizer,
                table: table
            }, {
                editToSave: function (value, options, editor) {
                    var row = table.datasource[options.rowIndex];
                    if (mf.tableSavingValidator(row, table.fields)) {
                        mf.parallelAjax({
                            type: 'POST',
                            url: '/adslot' + (row._isNew ? '' : '/' + operateData.get(row, 'id')),
                            data: mf.grepDataInConfig(row, appPositionList)
                        }, function (result) {
                            var newData = result[0];
                            if (row._isNew) {
                                dataList.unshift(newData);
                                appPositionCount.setContent(dataList.length);
                            } else {
                                var idField = appPositionFieldInConfig('id');
                                var index = mf.m.utils.indexOfArray(dataList, row[idField], idField);
                                index > -1 && (dataList[index] = newData);
                            }
                            table.datasource[options.rowIndex] = newData;
                            table.render();
                        });
                    } else {
                        return false;
                    }
                }
            });
            refreshTable();
            $.extend(action._controlMap, esui.init(table.main));
            model.set(
                'commands',
                mf.clickCommand.register(
                    [
                        {
                            cmd: 'search',
                            handle: function (options) {
                                var text = esui.get('appPositionName').getValue();
                                var filter;
                                if (text) {
                                    var valueRegExp = mf.m.utils.makeRegExp(text, 'i');
                                    filter = function (obj) {
                                        return valueRegExp.test(operateData.get(obj, 'name'));
                                    };
                                }
                                refreshTable({
                                    page: 0,
                                    filter: filter
                                });
                            }
                        },
                        {
                            cmd: 'add',
                            handle: function (options) {
                                var newRow = $.deepExtend({}, emptySitePosition);
                                newRow = mf.grepDataInConfig(newRow, appPositionList);
                                newRow._isNew = true;
                                table.datasource = table.datasource || [];
                                table.datasource.unshift(newRow);
                                table.render();
                            }
                        },
                        {
                            cmd: 'delete_add',
                            handle: function (options) {
                                table.datasource.splice(options.index, 1);
                                table.render();
                            }
                        },
                        {
                            cmd: 'save',
                            handle: function (options) {
                                var row = table.datasource[options.index];
                                if (mf.tableSavingValidator.call(table, row, table.fields)) {
                                    mf.parallelAjax({
                                        type: 'POST',
                                        url: '/adslot' + (row._isNew ? '' : '/' + operateData.get(row, 'id')),
                                        data: mf.grepDataInConfig(row, appPositionList)
                                    }, function (result) {
                                        var newData = result[0];
                                        if (row._isNew) {
                                            dataList.unshift(newData);
                                            appPositionCount.setContent(dataList.length);
                                        } else {
                                            var idField = appPositionFieldInConfig('id');
                                            var index = mf.m.utils.indexOfArray(dataList, row[idField], idField);
                                            index > -1 && (dataList[index] = newData);
                                        }
                                        table.datasource[options.index] = newData;
                                        table.render();
                                    });
                                }
                            }
                        },
                        {
                            cmd: 'copy',
                            handle: function (options) {
                                var row = table.datasource[options.index];
                                var newRow = $.deepExtend({}, emptySitePosition, row);
                                newRow = mf.grepDataInConfig(newRow, appPositionList);
                                newRow._isModify = true;
                                newRow._isNew = true;
                                table.datasource.unshift(newRow);
                                table.render();
                            }
                        }
                    ],
                    {
                        region: '#' + action.view.target,
                        rewrite: true
                    }
                )
            );
        },
        onleave: function () {
            console.log('onleave');
            var commands = this.model.get('commands');
            commands && mf.clickCommand.dispose(commands);
        }
    });
})();