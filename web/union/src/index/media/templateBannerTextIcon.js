/**
 * @file Generated by er-sync
 * @author Luics<xukai01@baidu.com>
 * @date Tue Apr 14 2015 14:15:42 GMT+0800 (CST)
 * Copyright (c) 2012 Baidu.com, Inc. All Rights Reserved
 */
(function () {
    /*var getCustomLayout = function (scaleOption) {
        var from = scaleOption.from;
        var to = scaleOption.to;
        var width = scaleOption.width;
        var areaWidth = [
            (from / width * 100),
            ((to - from) / width) * 100,
            (1 - to / width) * 100
        ];
        var iconAreaIndex = scaleOption.layout.iconArea;
        var textAreaIndex = scaleOption.layout.textArea;
        if (areaWidth[iconAreaIndex] < 1) {
            areaWidth[textAreaIndex] += areaWidth[iconAreaIndex];
        }
        var area = areaWidth.map(function (n) {
            return n <= 0.3 ? 'display: none;' : 'width: ' + n + '%;'
        });
        area[0] += 'float:left;';
        area[2] += 'float:right;';
        var data = {};
        /!*            var data = {
         'iconArea': 'width: ' + (from / width * 100) + '%;',
         'btnArea': 'width: ' + (1 - to / width) * 100 + '%;',
         'textArea': 'width: ' + ((to - from) / width) * 100 + '%;',
         'areaWhenNoIcon': 'width: ' + (to / width) * 100 + '%;'
         };

         if (from < 1) {
         area[0] = 'display: none;'
         }
         if (to - from < 1) {
         area[1] = 'display: none;'
         }
         if (width - to < 1) {
         area[2] = 'display: none;'
         }*!/
        $.each(scaleOption.layout, function (name, value) {
            data[name] = area[value];
        });

        return data;
    };*/
    var scaleConfig = {
        width: baseWidth,
        text: {},
        marker: {}
    };
    //scaleOption.minDistance = 60; // 限制文字区域最小宽度
    scaleConfig.text['0'] = '图片';
    scaleConfig.text[baseWidth] = '按钮';
    //scaleConfig.min = 75; //限制图标最小宽度
    //scaleConfig.max = baseWidth - 32; //限制按钮最小宽度
    scaleConfig.from = 75;
    scaleConfig.to = baseWidth - 32;
    scaleConfig.template = 'custom_text_icon';
    scaleConfig.marker = function (value, position) {
        if (position == "right") {
            value = baseWidth - value;
        }
        return value + 'px';
    };
    scaleConfig.layout = {
        iconArea: 0,
        textArea: 1,
        btnArea: 2
    };

    /*function getContentConfig(data) {
        var configs = {};
        configs.iconArea = {
            text: '图标区域',
            name: 'iconAreaStyle',
            properties: [
                propertyConfig.backgroundColor,
                propertyConfig.transform,
                propertyConfig.animation
            ]
        };
        configs.textArea = {
            text: '文本区域',
            name: 'textAreaStyle',
            properties: [
                propertyConfig.backgroundColor,
                propertyConfig.transform,
                propertyConfig.animation
            ]
        };
        configs.textTitleArea = {
            text: '标题区域',
            name: 'jgTitleStyle',
            properties: [
                propertyConfig.textAlign,
                propertyConfig.backgroundColor,
                propertyConfig.transform,
                propertyConfig.animation
            ]
        };
        configs.textTitleText = {
            text: '标题',
            name: 'jgTitleTextStyle',
            properties: [
                propertyConfig.font,
                propertyConfig.backgroundColor,
                propertyConfig.transform
            ]
        };
        configs.textDescriptionArea = {
            text: '描述区域',
            name: 'jgDescriptionStyle',
            properties: [
                propertyConfig.textAlign,
                propertyConfig.backgroundColor,
                propertyConfig.transform,
                propertyConfig.animation
            ]
        };
        configs.textDescriptionText = {
            text: '描述',
            name: 'jgDescriptionTextStyle',
            properties: [
                propertyConfig.font,
                propertyConfig.backgroundColor,
                propertyConfig.transform
            ]
        };
        configs.btnArea = {
            text: '按钮区域',
            name: 'btnAreaStyle',
            properties: [
                propertyConfig.textAlign,
                propertyConfig.backgroundColor,
                propertyConfig.transform,
                propertyConfig.animation
            ]
        };
        configs.btnContent = {
            text: '按钮',
            name: 'btnContentStyle',
            properties: [
                propertyConfig.content,
                propertyConfig.font,
                propertyConfig.backgroundColor,
                propertyConfig.transform
            ]
        };
        configs = baidu.object.clone(configs);
        configs.btnArea.properties[3].children[0].value = 3;

        return new PropertyConfig(configs, data);
    }*/

    function textIconStyle(textIcon, templateID, styleName, templateData) {
        var elementID = templateID + '_' + styleName;
        var textIconLayoutMap = [
            {
                name: '图标｜文本｜按钮',
                value: 'icon|text|btn'
            },
            {
                name: '图标｜按钮｜文本',
                value: 'icon|btn|text'
            },
            {
                name: '文本｜图标｜按钮',
                value: 'text|icon|btn'
            },
            {
                name: '按钮｜图标｜文本',
                value: 'btn|icon|text'
            },
            {
                name: '文本｜按钮｜图标',
                value: 'text|btn|icon'
            },
            {
                name: '按钮｜文本｜图标',
                value: 'btn|text|icon'
            }
        ];
        var textIconLayoutSelect = esui.get('layoutSelect_' + elementID);
        textIconLayoutSelect.onchange = function (values, value, text) {
            var newLayout = textIcon.scaleConfig.layout = {};
            console.log('textIconLayoutSelect', value, text);
            value.split('|').forEach(function (n, index) {
                newLayout[n + 'Area'] = index;
            });
            var scaleText = text.split('｜');
            textIcon.scaleConfig.text[0] = scaleText[0];
            textIcon.scaleConfig.text[baseWidth] = scaleText[2];
            textIcon.refresh();
        };
        var scaleData = templateData.scale || {};
        var layoutValue = textIconLayoutMap[0].value;
        if (scaleData.layout) {
            layoutValue = [];
            $.each(scaleData.layout, function (key, value) {
                layoutValue[value] = key.slice(0, -4);
            });
            layoutValue = layoutValue.join('|');
        }
        console.log('layoutValue', layoutValue);
        textIconLayoutSelect.datasource = textIconLayoutMap;
        textIconLayoutSelect.value = layoutValue;
        textIconLayoutSelect.eachLine = 2;
        textIconLayoutSelect.render();
        textIcon.toJSON = (function (fn) {
            return function () {
                var result = fn();
                var layout = textIconLayoutSelect.getValue()[0].split('|');
                result.scale.layout = result.scale.layout || {};
                layout.forEach(function (name, index) {
                    result.scale.layout[name + 'Area'] = index;
                });
                return result;
            }
        })(textIcon.toJSON);
    }

    mf.index.media.templateBannerTextIcon = new er.Action({
        model: mf.index.media.model.templateBannerTextIcon,
        view: new er.View({
            template: 'mf_index_media_templateBannerTextIcon',
            UI_PROP: {}
        }),
        STATE_MAP: {},

        onentercomplete: function () {
            console.log('onentercomplete');
            var action = this;
            var model = action.model;

            var config = model.get('config');
            var templateID = model.get('template');
            var styleName = model.get('styleName');
            var templateData = model.get('templateData') || {};

            var refreshActionNewESUI = mf.m.utils.nextTickWrapper(function () {
                $.extend(action._controlMap, esui.init(this));
            });
            if (templateData.scale) {
                scaleConfig.from = templateData.scale.from || 0;
                scaleConfig.to = templateData.scale.to || 0;
            }

            var property = propertyList[styleName](propertyConfig);
            var getCustomLayout = layoutList[styleName];

            var customTemplate = initCustomEditor({
                templateID: templateID,
                styleName: styleName,
                scaleConfig: scaleConfig,
                contentConfig: new PropertyConfig(property, templateData.content),
                getCustomLayout: getCustomLayout,
                refreshESUI: refreshActionNewESUI,
                mockData: new MockData(mf.index.media.model.mockData_text_icon)
            });

            customTemplate.preview();
            textIconStyle(customTemplate, templateID, styleName, templateData);

            action.save = function () {
                return customTemplate.toJSON();
            };
            var saveBtn = esui.get('saveStyle_' + templateID + '_' + styleName);
            saveBtn.onclick = function () {
                console.log('save');
                var result = customTemplate.toJSON();
                var getData = customTemplate.contentConfig.getData();
                mf.m.utils.writeInNewWindow(result);
                mf.m.utils.writeInNewWindow(getData);
            };
            var closeStyle = esui.get('closeStyle_' + templateID + '_' + styleName);
            closeStyle.onclick = function () {
                console.log('close');
            };
            refreshActionNewESUI.call(document.getElementById(action.view.target));
        },
        onleave: function () {
            console.log('onleave');
        }
    });
})();