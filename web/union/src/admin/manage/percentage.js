/**
 * @file Generated by er-sync
 * @author killeryyl<longgeyang@jesgoo.com>
 * @date Mon Jun 15 2015 19:28:07 GMT+0800 (CST)
 * Copyright (c) 2015 jesgoo.com, Inc. All Rights Reserved
 */
(function () {
    mf.admin.manage.percentage = new er.Action({
        model: mf.admin.manage.model.percentage,
        view: new er.View({
            template: 'mf_admin_manage_percentage',
            UI_PROP: {}
        }),
        STATE_MAP: {
            page: 0,
            pageSize: mf.PAGER_MODEL.pageSize,
            pageSizes: mf.PAGER_MODEL.pageSizes
        },

        onenter: function () {
            console.log('onenter');
            mf.onenter();
        },
        onafterrepaint: function () {
            console.log('onafterrepaint');
        },
        onafterrender: function () {
            console.log('onafterrender');
        },
        onentercomplete: function () {
            console.log('onentercomplete');
            mf.loaded();
            var action = this;
            var model = action.model;
            var percentageTable = esui.get('percentageTable');
            var pager = esui.get('percentagePager');
            var pageSizer = esui.get('percentagePageSize');
            var dataList = model.get('list');
            var mediaNames = model.get('mediaNames');
            var emptyPercentage = model.get('emptyPercentage');
            percentageTable.order = 'desc';
            percentageTable.orderBy = 'modified_time';

            var saveRow = function (rowIndex) {
                var row = percentageTable.datasource[rowIndex];
                var errorInfo = '';
                var percent = 0;
                percent += +row.media_percentage;
                percent += +row.channel_percentage;
                var existRow;
                dataList.forEach(function (n){
                    if (n.media === row.media && n.adslot === row.adslot && n.channel === row.channel) {
                        existRow = n;
                        return false;
                    }
                });
                if (existRow && row._isNew) {
                    errorInfo = '您当前创建的策略已经存在，不可重复创建。';
                } else if (percent < 0) {
                    errorInfo = '媒体分成与渠道分成比例总和总和范围不能小于0' +
                                '<br>当前总和为：' + percent;
                }
                if (errorInfo) {
                    var dialog = esui.Dialog.alert({
                        title: '操作失败',
                        content: errorInfo
                    });
                    return false;
                } else if (mf.tableSavingValidator(row, percentageTable.fields)) {
                    var postRow = $.deepExtend({}, row);
                    delete postRow.create_time;
                    delete postRow.modified_time;
                    delete postRow.channelName;
                    delete postRow.mediaName;
                    return mf.parallelAjax({
                        type: 'POST',
                        url: '/admin/percentage' + (row._isNew ? '' : '/' + row.channel + '/' + row.media + '/' + row.adslot),
                        data: postRow
                    }, function (result) {
                        var newData = result[0];
                        if (postRow._isNew) {
                            newData.mediaName = mediaNames[newData.media];
                            dataList.unshift(newData);
                        } else {
                            var index = mf.m.utils.indexOfArray(dataList, newData.media, 'media');
                            index > -1 && (dataList[index] = newData);
                        }
                        console.log('post', rowIndex, newData, percentageTable.datasource[rowIndex]);
                        percentageTable.datasource[rowIndex] = newData;
                        percentageTable.render();
                    });
                } else {
                    return false;
                }
            };
            var refreshTable = mf.mockPager(dataList, {
                pager: pager,
                pageSizer: pageSizer,
                table: percentageTable
            }, {
                editToSave: function (value, options, editor) {
                    var row = percentageTable.datasource[options.rowIndex];
                    if (!row._isNew){
                        return saveRow(options.rowIndex);
                    }
                }
            });
            refreshTable();
            var mediaList = esui.get('mediaListTable');
            mediaList.order = 'asc';
            mediaList.orderBy = 'id';
            var refreshMediaTable = mf.mockPager(model.get('media'), {
                pager: esui.get('mediaListPager'),
                pageSizer: esui.get('mediaListPageSize'),
                table: mediaList
            }, {
                afterRender: function () {
                    selectMedia = null;
                }
            });
            var selectMedia;
            mediaList.onselect = function (index) {
                selectMedia = mediaList.datasource[index].id;
                $('#mediaError').html('');
            };
            var createEditor = esui.get('createEditor');
            createEditor.oncommand = function (opt) {
                var index = opt.index;
                if (index == 0) {
                    $('#mediaError').html('请选择一个媒体');
                    if (!selectMedia) return false;
                    var newRow = $.deepExtend({}, emptyPercentage);
                    newRow._isNew = true;
                    newRow._isModify = true;
                    newRow.media = selectMedia;

                    percentageTable.datasource = percentageTable.datasource || [];
                    percentageTable.datasource.unshift(newRow);
                    percentageTable.render();
                }
            };
            model.set(
                'commands',
                mf.clickCommand.register(
                    [
                        {
                            cmd: 'search-media',
                            handle: function (options) {
                                var text = esui.get('mediaListName').getValue();
                                var filter;
                                if (text) {
                                    var valueRegExp = mf.m.utils.makeRegExp(text, 'i');
                                    filter = function (obj) {
                                        return valueRegExp.test(obj.id) || valueRegExp.test(obj.name);
                                    };
                                }
                                refreshMediaTable({
                                    page: 0,
                                    filter: filter
                                });
                            }
                        },
                        {
                            cmd: 'search',
                            handle: function (options) {
                                var text = esui.get('mediaName').getValue();
                                var filter;
                                if (text) {
                                    var valueRegExp = mf.m.utils.makeRegExp(text, 'i');
                                    filter = function (obj) {
                                        return valueRegExp.test(obj.mediaName);
                                    };
                                }
                                refreshTable({
                                    page: 0,
                                    filter: filter
                                });
                            }
                        },
                        {
                            cmd: 'add',
                            handle: function (options) {
                                $('#mediaError').html('');
                                selectMedia = null;
                                refreshMediaTable({
                                    page: 0,
                                    filter: null
                                });
                                createEditor.show();
                            }
                        },
                        {
                            cmd: 'delete_add',
                            handle: function (options) {
                                percentageTable.datasource.splice(options.index, 1);
                                percentageTable.render();
                            }
                        },
                        {
                            cmd: 'save',
                            handle: function (options) {
                                return saveRow(options.index);
                            }
                        }
                    ]
                )
            );
        },
        onleave: function () {
            console.log('onleave');
            var commands = this.model.get('commands');
            commands && mf.clickCommand.dispose(commands);
        }
    });
})();