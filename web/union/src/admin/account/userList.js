/**
 * @file Generated by er-sync
 * @author killeryyl<longgeyang@jesgoo.com>
 * @date Tue May 19 2015 19:37:10 GMT+0800 (CST)
 * Copyright (c) 2015 jesgoo.com, Inc. All Rights Reserved
 */
(function () {
    function mockLogin(username, display_name) {
        // 暂时这样吧，用户信息以后再加入
        var user = {
            authority : 255
        };
        user.authority = parseInt(user.authority || 0);
        if (user.authority > 0) {
            user.authority |= 1;
        }

        var expObj = {expires: 3600000 * 24 * 15};
        T.cookie.set(mf.cookieKeyMap.userUser_name, username, expObj);
        T.cookie.set(mf.cookieKeyMap.userDisplay_name, display_name || username, expObj);
        T.cookie.set(mf.cookieKeyMap.userAuthority, user.authority);
        var win = window.open('/index.html#/report/index', username, '', '_blank');
        esui.Dialog.alert({
            title: '操作提示',
            content: '操作完毕，结束模拟登录。',
            onok: function () {
                mf.parallelAjax([
                    '/admin/login/back'
                ], function () {
                    T.cookie.set(mf.cookieKeyMap.userUser_name, '', expObj);
                    T.cookie.set(mf.cookieKeyMap.userDisplay_name, '', expObj);
                    T.cookie.set(mf.cookieKeyMap.userAuthority, '0');
                    win.close();
                });
            }
        })
    }
    mf.admin.account.userList = new er.Action({
        model: mf.admin.account.model.userList,
        view: new er.View({
            template: 'mf_admin_account_userList',
            UI_PROP: {}
        }),
        STATE_MAP: {
            page: 0,
            pageSize: mf.PAGER_MODEL.pageSize,
            pageSizes: mf.PAGER_MODEL.pageSizes
        },
        onenter: function () {
            console.log('onenter');
            mf.onenter();
        },
        onafterrender: function () {
            console.log('onafterrender');
            mf.loaded();
            var action = this;
            var model = action.model;
            var userCount = esui.get('userCount');
            var dataList = model.get('list');
            var config = model.get('config');
            var userList = model.get('userList');
            var userFieldInConfig = mf.mockFieldInConfig(userList);
            var operateData = mf.operateDataInConfigField(userList);

            var table = esui.get('list');
            table.order = 'asc';
            table.orderBy = userFieldInConfig('id');
            var refreshTable = mf.mockPager(dataList, {
                pager: esui.get('pager'),
                pageSizer: esui.get('pageSize'),
                table: table
            });
            refreshTable();
            var searchName = function () {
                var text = esui.get('userName').getValue();
                var filter;
                if (text) {
                    var valueRegExp = mf.m.utils.makeRegExp(text, 'i');
                    filter = function (obj) {
                        return valueRegExp.test(operateData.get(obj, 'username'));
                    };
                }
                refreshTable({
                    page: 0,
                    filter: filter
                });
            };
            model.set(
                'commands',
                mf.clickCommand.register(
                    [
                        {
                            cmd: 'search',
                            handle: searchName
                        },
                        {
                            cmd: 'login',
                            handle: function (options) {
                                var row = table.datasource[options.index];
                                var username = operateData.get(row, 'username');
                                if (username) {
                                    mf.parallelAjax([
                                        '/admin/login?username=' + username
                                    ], function () {
                                        mockLogin(username, operateData.get(row, 'display'));
                                    });
                                }
                            }
                        }
                    ],
                    {
                        region: '#' + action.view.target,
                        rewrite: true
                    }
                )
            );
            $('body').unbind('keypress.search')
                .bind(
                'keypress.search', function (e) {
                    if (e.keyCode === 13) {
                        esui.get('userName').main.blur();
                        searchName();
                    }
                }
            );
        },
        onentercomplete: function () {
            console.log('onentercomplete');

        },
        onleave: function () {
            console.log('onleave');
            var commands = this.model.get('commands');
            commands && mf.clickCommand.dispose(commands);
            $('body').unbind('keypress.search');

        }
    });
})();