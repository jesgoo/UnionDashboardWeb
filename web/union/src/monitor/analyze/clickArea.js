/**
 * @file Generated by er-sync
 * @author killeryyl<longgeyang@jesgoo.com>
 * @date Fri May 15 2015 10:27:15 GMT+0800 (CST)
 * Copyright (c) 2015 jesgoo.com, Inc. All Rights Reserved
 */
(function () {
    var baseWidth = 320;
    var baseHeight = 80;

    function swap(item, value1, value2) {
        var tmp = item[value1];
        item[value1] = item[value2];
        item[value2] = tmp;
    }

    function getMedian(numberList, ll, rr, k, _undefined) {
        ll === _undefined && (ll = 0);
        rr === _undefined && (rr = numberList.length - 1);
        k === _undefined && (k = Math.floor(numberList.length / 2));
        var m = numberList[ll + k - 1], t = 0;
        var i = 0, j = 0;
        numberList[ll + k - 1] = numberList[rr];
        numberList[rr] = m;
        for (i = ll - 1, j = ll; j != rr; j += 1) {
            if (numberList[j] < m) {
                t = numberList[++i];
                numberList[i] = numberList[j];
                numberList[j] = t;
            }
        }
        t = numberList[++i];
        numberList[i] = numberList[j];
        numberList[j] = t;
        if (k == i - ll + 1) {
            return m;
        }
        if (k > i - ll + 1) {
            return getMedian(numberList, i + 1, rr, k - i + ll - 1);
        } else {
            return getMedian(numberList, ll, i - 1, k);
        }
    }

    /*Int FindMinK(Int data[], int l, int r, int k)
     {
     int m = data[l+k-1], t = 0;
     int i, j;
     data[l+k-1] = data[r], data[r] = m;
     for (i = l-1, j = l; j != r; ++j)
     if (data[j]<m)
     t=data[++i], data[i]=data[j], data[j]=t;
     t=data[++i], data[i]=data[j], data[j]=t;
     if (k==i-l+1) return m;
     if (k>i-l+1) return FindMinK(data, i+1, r, k-i+l-1);
     else    return FindMinK(data, l, i-1, k);
     }*/
    function getScale(x) {
        var scale = -1;
        if (x <= 0) {
        } else if (x <= 320) {
            scale = 1;
        } else if (x <= 360) {
            scale = 360 / baseWidth;
        } else if (x <= 400) {
            scale = 400 / baseWidth;
        } else if (x <= 800) {
            scale = 800 / baseWidth;
        } else if (x <= 1024) {
            scale = 1024 / baseWidth;
        } else if (x <= 1920) {
            scale = 1920 / baseWidth;
        }
        return scale;
    }

    function clickAreaDataFactory(data, validHeight) {
        var result = {
            size: {}
        };
        result.data = [].concat(data);
        result.data.forEach(function (n, index) {
            n.index = index;
            if (!('touch_x' in n)) {
                n.scale = -2;
                return true;
            }
            if (!('touch_x' in n)) {
                n.scale = -3;
                return true;
            }
            if (!('width' in n)) {
                n.scale = -1;
                return true;
            }
            /*var scaleX = getScale(n.touch_x);
             var scaleY = getScale(n.touch_y);
             if (scaleY > scaleX) {
             swap(n, 'height', 'width');
             swap(n, 'touch_x', 'touch_y');
             n.scale = scaleY;
             } else {
             n.scale = scaleX;
             }
             n.standardX = Math.round(n.touch_x / n.scale);
             n.standardHeight = Math.round(n.height / n.scale);
             n.standardWidth = Math.round(n.width / n.scale);
             n.standardY = Math.round(n.touch_y / n.scale);
             n.scale = Math.round(n.scale * 1000) / 1000;*/
            /*var swapXY = false;
            swapXY = swapXY || (n.touch_y > validHeight && n.touch_x <= validHeight);
            //swapXY = swapXY || n.height > n.width;
            //swapXY = swapXY || (n.touch_y > n.touch_x)
            if (swapXY) {
                swap(n, 'touch_x', 'touch_y');
                swap(n, 'height', 'width');
            }*/
            n.scale = 1;
            n.standardX = n.touch_x;
            n.standardY = n.touch_y;
        });
        /*var avgY = result.data.map(function (n) {
         return n.standardY;
         }).reduce(function (sum, y) {
         return sum + y;
         }, 0) / result.data.length;
         avgY *= 1.5;
         result.data.map(function (n) {
         if (n.standardY > avgY) {
         swap(n, 'standardX', 'standardY');
         }
         });*/
        /*var medianY = getMedian(result.data.map(function (n) {
            return n.standardY;
        }));

        result.data.forEach(function (n) {
            if (n.standardY > medianY) {
                swap(n, 'standardX', 'standardY');
                swap(n, 'height', 'width');
            }
        });*/

        result.data.reduce(function (size, n) {
            size[n.width] = size[n.width] || 0;
            size[n.width] += 1;
            return size;
        }, result.size);
        result.unvalidData = result.data.filter(function (n) {
            if (n.scale < 0) {
                return true;
            } else {
                return false;
            }
        });
        result.chartData = result.data.filter(function (n) {
            if (n.scale < 0) {
                return false;
            } else {
                return true;
            }
        }).map(function (n) {
            return [
                n.standardX,
                n.standardY
            ]
        });
        /*var size = {};
         result.regionData.forEach(function (n) {
         var name = n[0] + '_' + n[1];
         size[name] = size[name] || 0;
         size[name] += 1;
         });
         result.chartData = [];
         for (var name in size) {
         var axis = name.split('_');
         result.chartData.push([
         +axis[0],
         +axis[1],
         size[name]
         ]);
         }*/
        return result;
    }

    function clickArea(container, data, validHeight) {
        var $container = $(container);
        if (!data) {
            $container.append('<span>没有数据</span>');
            return false;
        }
        //console.log('origin data', data);
        var chartData = clickAreaDataFactory(data, validHeight);
        console.log('chart data', chartData);
        window.c = chartData;
        //mf.m.utils.writeInNewWindow(chartData.chartData, { type: 'json' });
        $container.children().remove();
        var unvalidPercent = chartData.unvalidData.length / chartData.data.length;
        unvalidPercent = Math.round(unvalidPercent * 10000) / 100;
        $('<div/>', {'class': 'chart-info'}).appendTo($container).html(
            '总点击数量:' + chartData.data.length + '个<br>'
        );
        $('<div/>', {'class': 'chart-info'}).appendTo($container).html(
            '神奇点击:' + chartData.unvalidData.length + '个<br>' +
            '占比:' + unvalidPercent + '%' +
            '<br><a class="ui-button"><span class="ui-button-label">点击查看</span></a>'
        ).click(function () {
                mf.m.utils.writeInNewWindow(chartData.unvalidData, {type: 'json'});
            });
        $('<div/>').prependTo($container).highcharts({
            chart: {
                type: 'scatter',
                zoomType: 'xy',
                height: 640,
                width: 1280
            },
            title: {
                text: '点击区域热力图'
            },
            credits: {
                enabled: false
            },
            subtitle: {
                text: '所有点击坐标均以320像素屏宽为标准转化'
            },
            xAxis: {
                title: {
                    enabled: true,
                    text: 'X (px)'
                },
                min: 0,
                //max: baseWidth,
                offset: 10,
                startOnTick: true,
                endOnTick: true,
                showLastLabel: true,
                opposite: true
            },
            yAxis: {
                title: {
                    text: 'Y (px)'
                },
                min: 0,
                offset: 10,
                reversed: true
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'bottom',
                x: -30,
                y: -30,
                floating: true,
                backgroundColor: '#FFFFFF',
                borderWidth: 1
            },
            series: [
                {
                    name: '标准点击坐标',
                    color: 'rgba(223, 83, 83, .1)',
                    data: chartData.chartData
                }
            ],
            plotOptions: {
                scatter: {
                    marker: {
                        radius: 5,
                        states: {
                            hover: {
                                enabled: true,
                                lineColor: 'rgb(100,100,100)'
                            }
                        }
                    },
                    states: {
                        hover: {
                            marker: {
                                enabled: false
                            }
                        }
                    },
                    tooltip: {
                        headerFormat: '<b>{series.name}</b><br>',
                        pointFormat: 'X {point.x} , Y {point.y}'
                    }
                }
            }
        });
    }

    mf.monitor.analyze.clickArea = new er.Action({
        model: mf.monitor.analyze.model.clickArea,
        view: new er.View({
            template: 'mf_monitor_analyze_clickArea',
            UI_PROP: {}
        }),
        STATE_MAP: {},

        onenter: function () {
            console.log('onenter');
            mf.onenter();
        },
        onafterrepaint: function () {
            console.log('onafterrepaint');
        },
        onafterrender: function () {
            console.log('onafterrender');
            var action = this;
            var model = action.model;
            /*esui.get('adslot').onblur = function () {
                var adslot = this.getValue();
                console.log('adslot', adslot);
                model.set('adslot', adslot);
            };*/
            esui.get('adslot').onchange = function (value) {
                console.log('adslot', value);
                model.set('adslot', value);
            };
            esui.get('date').onchange = function (date) {
                console.log('date', date);
                model.set('date', mf.getDateString(date));
            };
            esui.get('height').onblur = function (date) {
                var height = this.getValue();
                console.log('height', height);
                model.set('height', height);
            };
            esui.get('search').onclick = mf.m.utils.nextTickWrapper(function () {
                if (model.get('adslot')) {
                    action.refresh(model.QUERY_MAP);
                } else {
                    mf.msg('没有广告位ID');
                }
            });
        },
        onentercomplete: function () {
            console.log('onentercomplete');
            var action = this;
            var model = action.model;
            clickArea('#clickAreaChart', model.get('data'), +model.get('height'));
            mf.loaded();
        },
        onleave: function () {
            console.log('onleave');
        }
    });
})();