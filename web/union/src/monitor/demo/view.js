/**
 * @file Generated by er-sync
 * @author killeryyl<longgeyang@jesgoo.com>
 * @date Fri Sep 25 2015 11:24:12 GMT+0800 (CST)
 * Copyright (c) 2015 jesgoo.com, Inc. All Rights Reserved
 */
(function () {
    function windowMessage(event) {
        var messageData = event.data||{};
        var adPreview = $('#adPreview').get(0);
        var sendLog = function(url) {
            $('<div/>').hide().html(url).appendTo(adPreview);
            adPreview.refresh();
        };
        if (messageData.action) {
            switch (messageData.action) {
                case 'log':
                    sendLog('ad:' + messageData.log);
                    break;
                case 'resize':
                    sendLog('resize:' + messageData.height + ':' + !!messageData.force);
                    if (messageData.adInfo.height !== -1 || messageData.force) {
                        previewAd.setSize(messageData.fixed, messageData.height);
                    }
                    break;
            }
        } else {
            if (messageData.error) {
                sendLog('error:' + messageData.error);
            }
            sendLog('视频播放结束，启用回调');
        }
    }
    var previewAd = function (adPreview, adInfo) {
        adInfo.height = +adInfo.height || -1;
        $(adPreview).children().remove();
        var adPreviewFrame = document.createElement('iframe');
        adPreview.appendChild(adPreviewFrame);
        adPreviewFrame.frameBorder = "0";
        adPreviewFrame.scrolling = "no";
        var win = adPreviewFrame.contentWindow;
        var doc = win.document;
        doc.open();
        doc.write('<!doctype html><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, minimal-ui"><style type="text/css">html,body{height: 100%; width: 100%;text-align: center;}html, body, div, video, a {padding: 0;margin: 0}img{display: block;max-height: 100%;max-width: 100%;margin: auto;}.boxer{display: block;display:-webkit-box;-webkit-box-pack:center;-webkit-box-align:center;display:box;box-pack:center;box-align:center;}</style></head><body></body></html>');
        doc.close();
        var CallbackParams = {};
        var globalHTML = doc.documentElement;
        var globalBody = doc.body || globalHTML;
        var fixedSize = false;
        setSize();
        previewAd.setSize = setSize;
        function setSize(isFixed, height) {
            if (fixedSize && !isFixed) {
                return false;
            }
            adInfo.height = height || adInfo.height;
            fixedSize = fixedSize || isFixed;
            var width = globalHTML.clientWidth || globalBody.clientWidth || 320;

            var frameCss = [];

            height = +adInfo.height || 80;
            if (height !== -1) {
                switch (adInfo.prod) {
                    case 1:
                        height = height < 32 ? 32 : height;
                        break;
                    case 10:
                        height = height < 200 ? 200 : height;
                        break;
                    case 12://sure of video having a div parent
                        break;
                    case 13:
                        height = height < 8 ? 8 : height;
                        break;
                }
            }

            /*if (adInfo.type === 'inbed') {
                adParentCss.push('position:relative');
            } else if (adInfo.type == 'float') {
                var adPlace = adInfo.place + ':0';
                if (adInfo.prod === 4) {
                    height = 320;
                    adPlace = "top:15%;";
                }

                frameCss.push('border:1px');
                frameCss.push(adPlace);
                adParentCss.push('display:block');
                adParentCss.push('left:0;font-size:0;z-index:2147483583;position:fixed');
                adParentCss.push(adPlace);
            }
            frameCss.push('display:block');
            adParentCss.push('display:block');
            */
            var sizeText = 'width:100%;height:' + (height < 0 ? '100%' : ((isFixed ? height : Math.round(width / 320
                                                                                                         * height)) + 'px'))
                           + ';';
            frameCss.push(sizeText);
            adPreviewFrame.setAttribute("style", frameCss.join(';'));
            //blankDiv && (blankDiv.style.height = (Math.round(width / 320 * height)) + 'px');
            return sizeText;
        }
        function sendLog(url) {
            $('<div/>').hide().html(url).appendTo(adPreview);
            adPreview.refresh();
        }

        function now() {
            return new Date().getTime();
        }

        function TimeCounter(opt) {
            opt = opt || {};
            for (var i in opt) {
                this[i] = opt[i];
            }
            this.interval = this.interval || 100; // tick的频率，默认每100毫秒1次
            this.during = (this.during || 10) * 1000; // 总的计时时常，单位 秒，默认10秒
            if (this.auto !== false) {
                this.run();
            }
        }

        TimeCounter.prototype = {
            _now: now,
            reset: function () {
                this._endTime = 0;
            },
            run: function (during, info) {
                this._endTime = this._now() + (during * 1000 || this.during);
                this._pauseTime = this._now();
                this.stopInfo = info || '';
                this.resume(false);
            },
            pause: function (dispatch) {
                clearInterval(this._interval);
                this._interval = null;
                this._pauseTime = this._now();
                dispatch === false || this.onpause();
            },
            resume: function (dispatch) {
                var me = this;
                if (!me._endTime) {
                    me.run();
                } else if (!me._interval) {
                    me.isStopped = false;
                    if (me._pauseTime) {
                        me._endTime += me._now() - me._pauseTime;
                        me._pauseTime = 0;
                    }
                    me._interval = setInterval(function () {
                        var distance = me._endTime - me._now();
                        if (distance <= 0) {
                            me.stop(me.stopInfo);
                        } else {
                            me.ontick(distance / 1000);
                        }
                    }, me.interval);
                }
                dispatch === false || me.onresume();
            },
            stop: function (info) {
                this._endTime = -1;
                this.isStopped = true;
                this.pause(false);
                this.onend(info);
            },
            onpause: function () {
            },
            onresume: function () {
            },
            ontick: function () {
            },
            onend: function () {
            }
        };
        function TimeLeft(opt) {
            TimeCounter.call(this, opt);
            this.init();
        }

        for (var i in TimeCounter.prototype) {
            TimeLeft.prototype[i] = TimeCounter.prototype[i];
        }
        TimeLeft.prototype.init = function () {
            this.timer = document.createElement('div');
            this.timer.innerHTML = '内容加载中...';
            this.timer.setAttribute('style',
                'position: absolute;line-height:1.1;top: 0;right: 0;background: rgba(0,0,0,0.5);padding: 6px;border-radius: 4px 0 0 4px;color: #fff;z-index:10');
            this.container.appendChild(this.timer);
        };
        TimeLeft.prototype.ontick = function (time) {
            this.timer.innerHTML = '广告倒计时 ' + Math.ceil(time) + '秒';
        };
        TimeLeft.prototype.stop = function (info) {
            this.timer.innerHTML = '精彩即将开始';
            TimeCounter.prototype.stop.call(this, info);
        };

        function adEndAndCallback(endInfo) {
            endInfo = endInfo || {};
            endInfo.adInfo = adInfo;
            win.parent.postMessage(endInfo, '*');
        }

        function getClickAnchor(clickURL) {
            var clickAnchor = document.createElement("a");
            clickAnchor.style.textDecoration = 'none';
            if (clickURL) {
                clickAnchor.href = clickURL;
                clickAnchor.target = "_blank";
                clickAnchor.id = 'jesgoo-link';
            }
            return clickAnchor;
        }

        function getHTMLContainer(html) {
            var container = document.createElement("iframe");
            container.setAttribute("style", "height:100%;width:100%;");
            container.setAttribute("frameborder", "0");
            container.setAttribute("scrolling", "no");
            return container;
        }

        function setSquareAd(adData) {
            var clickAnchor = getClickAnchor(adData.Click_url);
            var img = document.createElement("img");
            img.setAttribute("style",
                "position:absolute;left: 0;top: 0;width:100%;height:100%;" +
                "-webkit-background-size:cover;" +
                "-moz-background-size:cover;" +
                "-o-background-size:cover;" +
                "background:transparent no-repeat 0 0;background-size:cover;");

            img.setAttribute("src", adData.Image_url);
            img.onerror = function () {
                adEndAndCallback({error: 'splash img error'});
            };
            clickAnchor.appendChild(img);
            clickAnchor.onclick = function () {
                (adData.Click_monitor_url || []).forEach(function (url) {
                    sendLog('Click_monitor:'+url);
                });
            };
            globalBody.appendChild(clickAnchor);
            (adData.Impression_log_url || []).forEach(function (url) {
                sendLog('Impression_log:'+url);
            });
            return win;
        }

        function setTimeCountImageAd(adData) {
            var clickAnchor = getClickAnchor(adData.Click_url);
            clickAnchor.setAttribute("class", "boxer");
            clickAnchor.setAttribute("style", "width:100%;height:100%;");

            var timeLeft = new TimeLeft({
                auto: false,
                during: adInfo.duration,
                container: globalBody,
                onend: adEndAndCallback
            });

            timeLeft.timer.style.visibility = 'hidden';

            var imgAd = document.createElement("img");
            imgAd.onload = imgAd.onerror = function () {
                timeLeft.timer.style.visibility = "visible";
                timeLeft.run();
            };
            imgAd.setAttribute("src", adData.Image_url);
            clickAnchor.appendChild(imgAd);
            clickAnchor.onclick = function () {
                (adData.Click_monitor_url || []).forEach(function (url) {
                    sendLog('Click_monitor' + url);
                });
            };
            globalBody.appendChild(clickAnchor);
            (adData.Impression_log_url || []).forEach(function (url) {
                sendLog('Impression:' + url);
            });
            return win;
        }

        function setTimeCountVideoAd(adData) {
            var clickAnchor = getClickAnchor(adData.Click_url);
            clickAnchor.className = 'boxer';
            clickAnchor.style.display = 'block';
            clickAnchor.style.height = '100%';
            clickAnchor.style.width = '100%';
            var needBlank = /(?:UC|M?QQ)Browser/i.test(ua);
            if (needBlank) {
                clickAnchor.style.boxSizing = 'border-box';
                clickAnchor.style.paddingTop = '24px';
            }
            globalBody.appendChild(clickAnchor);

            CallbackParams.src = adData.Video_src;
            var tLen = adData.Video_duration;
            var timeImpressions = adData.Video_impression_url || [];

            var clickArea = getClickAnchor(adData.Click_url);
            clickArea.innerHTML = "了解详情 >";
            var clickAreaStyle = 'color:inherit;text-decoration:none;position:absolute;;background:rgba(0,0,0,0.5);z-index:11;';
            globalBody.appendChild(clickArea);
            if (needBlank) {
                clickAreaStyle += 'border-radius:0 4px 4px 0;padding:6px 10px;top:0;left:0;font-size:12px;line-height:1.2;';
            } else {
                clickAreaStyle += 'border-radius:4px;padding:6px;bottom:50px;right:10px;font-size:16px;line-height:2.0';
            }
            clickArea.setAttribute("style", clickAreaStyle);

            //mi 2
            var continueArea = document.createElement("div");
            continueArea.innerHTML = "继续";
            continueArea.setAttribute("style",
                "position: absolute;line-height:1.0;bottom: 110px;right: 10px;background: rgba(0,0,0,0.5);padding: 6px;border-radius: 4px;z-index:11;font-size:16px;display:none");
            continueArea.onclick = function (e) {
                myvideo.play();
                e.stopPropagation();
                return false;
            };
            globalBody.appendChild(continueArea);

            var videoTimeRecord, hasPlayed, hasPaused, isPaused, isWaiting, manualPaused, pausedTimes = 0;
            var videoListen = setInterval(function () {
                if (!hasPlayed && myvideo.currentTime > 1) {
                    hasPlayed = true;
                    timeLeft.resume();
                }
                if (videoTimeRecord === myvideo.currentTime) {
                    pausedTimes += 1;
                } else {
                    pausedTimes = 0;
                }
                isPaused = pausedTimes > 12;
                if (isPaused) {
                    if (!hasPaused) {
                        if (hasPlayed && !manualPaused) {
                            recordErrorTimer.run(15, 'video seeking');
                        }
                    } else {
                        timeLeft.timer.innerHTML = hasPlayed || isWaiting ? '缓冲中，请耐心等待一会～' : '请点击播放按钮观看本视频';
                    }
                    timeLeft.pause(false);
                    hasPaused = true;
                } else {
                    hasPaused = false;
                    timeLeft.resume(false);
                    hasPlayed && recordErrorTimer.pause();
                }
                //clickArea.innerHTML = hasPlayed + '-' + hasPaused + '-' + isPaused + '-' + manualPaused + '-' + pausedTimes+ '-' + pausedTimes;
                videoTimeRecord = myvideo.currentTime;
            }, 25);

            // 记录非正常结束的播放
            var recordErrorTimer = new TimeCounter({
                stopInfo: 'video beginning',
                during: 15,
                onend: function (info) {
                    adEndAndCallback(info === '' ? {} : {error: info || 'video suck'});
                    timeLeft.stop();
                }
            });
            // 让不支持自动播放，且能响应非人为播放操作的浏览器自动播放起来
            var playTimer = new TimeCounter({
                during: 30,
                ontick: function () {
                    hasPlayed ? this.stop() : myvideo.play();
                }
            });
            var timeLeft = new TimeLeft({
                during: tLen,
                container: globalBody,
                onpause: function () {
                    continueArea.style.display = "block";
                },
                onresume: function () {
                    continueArea.style.display = "none";
                },
                ontick: function (time) {
                    if (hasPlayed) {
                        TimeLeft.prototype.ontick.call(this, time);
                        timeImpressions.forEach(function (n) {
                            if (myvideo.currentTime >= n.Time && !n.sent) {
                                n.sent = true;
                                (n.Impression_url || []).forEach(function (url) {
                                    sendLog('Impression:'+url);
                                });
                            }
                        });
                    }
                },
                onend: function (info) {
                    TimeLeft.prototype.onend.call(this, info);
                    clearInterval(videoListen);
                    recordErrorTimer.run(5, 'video more');
                }
            });

            var myvideo = document.createElement("video");
            myvideo.onwaiting = function () {
                isWaiting = true;
            };
            myvideo.onpause = function () {
                if (!hasPlayed) {
                    recordErrorTimer.run(7, 'video waiting');
                    hasPlayed = true;
                }
                manualPaused = true;
                timeLeft.pause();
            };
            myvideo.onplay = myvideo.onloadedmetadata = function () {
                manualPaused = false;
                isWaiting = false;
                timeLeft.resume();
                recordErrorTimer.pause();
            };
            myvideo.onended = function () {
                timeLeft.stop();
                adEndAndCallback();
            };
            clickAnchor.onclick = function (e) {
                if (!hasPlayed) {
                    myvideo.play();
                    timeLeft.resume();
                    return false;
                } else {
                    recordErrorTimer.run(7, 'video ad clicked');
                    (adData.Click_monitor_url || []).forEach(function (url) {
                        sendLog('Click_monitor:'+url);
                    });
                }
                e.stopPropagation();
            };
            clickArea.onclick = function (e) {
                clickAnchor.onclick(e);
            };

            myvideo.onabort = myvideo.onprogress = function () {
                return false;
            };
            myvideo.onerror = function () {
                adEndAndCallback({error: 'video load error'});
            };
            myvideo.setAttribute("style",
                "width:100%; height:100%;background:transparent no-repeat 0 0;-webkit-background-size:cover;-moz-background-size:cover;-o-background-size:cover;background-size:cover; background-color:gray;");
            myvideo.setAttribute("src", adData.Video_src);
            myvideo.setAttribute("autoplay", "autoplay");
            myvideo.setAttribute("controls", "controls");

            clickAnchor.appendChild(myvideo);

            (adData.Impression_log_url || []).forEach(function (n) {
                sendLog('Impression_log:' + n);
            });
            return win;
        }

        function setHTMLSnippet(html, container) {
            var adContainerParent = getHTMLContainer(html);
            container.appendChild(adContainerParent);
            var w = adContainerParent.contentWindow;
            setTimeout(function () {
                try {
                    w.document.open();
                    w.document.write(html);
                    w.document.close();
                } catch (e){
                    container.removeChild(adContainerParent);
                    try {
                        w = win;
                        w.document.open();
                        w.document.write(html);
                        w.document.close();
                    } catch (e){
                        var placeholderContainer = document.createElement('a');
                        placeholderContainer.style.cssText = 'width:100%;height:100%;display:block;';
                        container.appendChild(placeholderContainer);
                        var showTime = now();
                        var source = [
                            [
                                'http://c3.moogos.com/resource/oneoneADxiaomi3_1436858707_519a4fad81e74bca094efd90799e7fe8_64b55d50.png',
                                'http://f3.market.mi-img.com/download/AppStore/06162b427d7ef4f8e086ce5a8795727fffc90e3be/com.jesgoo.oneonecn.apk'
                            ],
                            [
                                'http://cd.moogos.com/resource/miniads.png',
                                'http://m.fallback.wdjcdn.com/apk.wdjcdn.com/f/ca/53e87be2d4f70d69687724a5ff7fbcaf.apk'
                            ]
                        ][Math.floor(Math.random() * 2)];
                        placeholderContainer.target = '_blank';
                        placeholderContainer.href = source[1];
                        placeholderContainer.innerHTML = '<img style="width:100%;height:100%;" src="' + source[0] + '">';
                        placeholderContainer.onclick = function () {
                            sendTypeLog(globalBody, {type: 'down', t: now() - showTime});
                        };
                        sendTypeLog(globalBody, {type: 'show', t: now() - showTime});
                        throw e;
                    }
                }
            }, 0);
            return w;
        }

        function setTimeCountHTMLAd(html) {
            var adWindow = setHTMLSnippet(html, adInfo, globalBody);

            var timeLeft = new TimeLeft({
                during: adInfo.duration,
                container: globalBody,
                onend: adEndAndCallback
            });

            adWindow.showError = function (info) {
                timeLeft.stop(info);
                sendTypeLog(globalBody, {type: 'e12', info: info})
            };

            return adWindow;
        }

        function showAd(adsData) {
            var adsNative = adsData.Native_material;
            var materialType = adsData.Material_type;
            var adWindow;
            if (adInfo.prod == 4) {
                if (materialType == 1 && adsNative) {
                    adWindow = setSquareAd(adsNative);
                } else {
                    adWindow = setHTMLSnippet(adsData.Html_snippet, globalBody);
                }
            } else if (adInfo.prod == 12) {
                globalHTML.style.backgroundColor = 'rgba(0,0,0,0.5)';
                globalHTML.style.color = '#fff';
                globalHTML.style.fontSize = '12px';
                if (materialType == 1 && adsNative) {
                    if (adsNative.Type == 1) {
                        adWindow = setTimeCountImageAd(adsNative);
                    } else if (adsNative.Type == 3) {
                        adWindow = setTimeCountVideoAd(adsNative);
                    }
                } else {
                    adWindow = setTimeCountHTMLAd(adsData.Html_snippet);
                }
            } else {
                adWindow = setHTMLSnippet(adsData.Html_snippet || '没有广告', globalBody);
            }
            adWindow.sendMessage = function (message) {
                message = message || {};
                message.adInfo = adInfo;
                win.parent.postMessage(message, '*');
            };
            return adWindow;
        }

        return showAd;
    };
    
    function saveData(data) {
        localStorage.setItem('mockRequest', JSON.stringify(data || {}));
    }

    function loadData() {
        return JSON.parse(localStorage.getItem('mockRequest') || '{}');
    }

    function parseResponse(data) {
        var result = {};
        if (data.Html_snippet) {
            var html = data.Html_snippet;
            if (html.indexOf('jesgoo_data=') > -1) {
                try {
                    data = html.match(/jesgoo_data=([\s\S]*?)<\/script/i)[1];
                    result = eval('(' + data + ')');
                } catch (e) {
                    console.log('error', e.toString())
                }
            } else {
                var $ad = $(html).filter('a, div');
                result.logs = [].map.call($ad.find('> img'), function (n) {
                    return n.src;
                });
                result.Click_monitor = [].map.call($ad.find('> input'), function (n) {
                    return n.value;
                });
                var $click = $ad.find('.jesgoo-content');
                result.Click_url = $click.attr('href');
                result.Image_url = $click.find('> img:only-child').attr('src');
                $click.find('> img:only-child').css('height', 'auto');
                result.Logo_url = $click.find('.jesgoo-icon img').attr('src');
                result.title = $click.find('.jesgoo-title').html();
                result.description = $click.find('.jesgoo-desc').html();
                result.text = $click.children().length ? '' : $click.text();
            }
        } else {
            result = mf.m.utils.deepExtend({}, data.Native_material);
        }
        return result
    }

    mf.monitor.demo.view = new er.Action({
        model: mf.monitor.demo.model.view,
        view: new er.View({
            template: 'mf_monitor_demo_view',
            UI_PROP: {}
        }),
        STATE_MAP: {},

        onenter: function () {
            console.log('onenter');
            mf.onenter();
        },
        onafterloadmodel: function () {
            console.log('onafterrepaint');
            this.model.set('requestTab', [
                {
                    title: '表单请求',
                    target: 'form'
                },
                {
                    title: 'JSON请求',
                    target: 'editor'
                },
                {
                    title: '结果展示',
                    target: 'result'
                },
                {
                    title: '原始结果',
                    target: 'raw-result'
                }
            ]);
            this.model.set('requestData', loadData());
        },
        onafterrepaint: function () {
            console.log('onafterrepaint');
            mf.loaded();
        },
        onafterrender: function () {
            console.log('onafterrender');
            mf.loaded();
            var action = this;
            var model = action.model;
            var tab = esui.get('displayTab');
            var requestResult = $('#requestResult');
            var requestRawResult = $('#requestRawResult');
            var $configArea = $('#' + action.view.target + ' .config-area');
            var jsonEditor = new mf.m.jsonEditor($configArea);
            var $adPreview = $('#adPreview');
            $adPreview.get(0).refresh = function () {
                var result = model.get('requestResult') || {};
                result.logs = (result.logs || []).concat([].map.call($adPreview.children('div').remove(), function (n) {
                    return n.innerHTML;
                }));
                model.set('requestResult', result);
                if (tab.datasource[tab.activeIndex].target==='result') {
                    requestResult.val(JSON.stringify(result, null, 4));
                }
            };
            tab.activeIndex = -1;
            tab.onchange = function (index) {
                var previous = (tab.datasource[tab.activeIndex] || {}).target;
                switch (previous) {
                    case 'form':
                        model.set('requestData', jsonEditor.getData());
                        break;
                    case 'editor':
                        var data = editor.getValue() || '{}';
                        try {
                            data = JSON.parse(data);
                        } catch (e) {
                            esui.Dialog.alert({
                                title: '错误提示',
                                content: 'JSON数据格式有误，请检查<br>' + e
                            });
                            return false;
                        }
                        model.set('requestData', data);
                        break;
                    case 'result':
                        break;
                    case 'raw-result':
                        break;
                }
                var target = tab.datasource[index].target;
                var $target = $('.display-tab-container').hide().filter('.display-' + target).show();
                saveBtn.enable();
                switch (target) {
                    case 'form':
                        jsonEditor.setData(model.get('requestData') || {});
                        break;
                    case 'editor':
                        editor.setValue(JSON.stringify(model.get('requestData') || {}, null, 4), 1);
                        saveBtn.disable();
                        break;
                    case 'result':
                        requestResult.val(JSON.stringify(model.get('requestResult') || {}, null, 4));
                        break;
                    case 'raw-result':
                        requestRawResult.val(JSON.stringify(model.get('requestRawResult') || {}, null, 4));
                        break;
                }
            };
            var saveBtn = esui.get('save');
            saveBtn.onclick = function () {
                saveData(tab.datasource[tab.activeIndex].target === 'form'
                    ? jsonEditor.getData()
                    : model.get('requestData'));
            };
            esui.get('load').onclick = function () {
                var data = loadData();
                model.set('requestData', loadData());
                switch (tab.datasource[tab.activeIndex].target) {
                    case 'form':
                        jsonEditor.setData(data);
                        break;
                    case 'editor':
                        editor.setValue(JSON.stringify(data, null, 4), 1);
                        break;
                }
            };
            esui.get('view').onclick = function () {
                var query;
                var target = tab.datasource[tab.activeIndex].target;
                switch (target) {
                    case 'form':
                        query = jsonEditor.getData();
                        model.set('requestData', query);
                        break;
                    case 'editor':
                        var data = editor.getValue() || '{}';
                        try {
                            query = JSON.parse(data);
                        } catch (e) {
                            esui.Dialog.alert({
                                title: '错误提示',
                                content: 'JSON数据格式有误，请检查<br>' + e
                            });
                            return false;
                        }
                        model.set('requestData', data);
                        break;
                    default :
                        query = model.get('requestData') || {};
                        break;
                }
                var host = esui.get('host').getValue() || 'api.moogos.com';
                $.ajax({
                    url: 'http://' + host + '/v1/json?_ts=' + (new Date().getTime()),
                    data: JSON.stringify(query),
                    dataType: 'json',
                    type: 'POST',
                    crossDomain: true
                }).done(function (data) {
                    model.set('requestRawResult', data || {});
                    if (data && data.Ads && data.Ads[0]) {
                        model.set('requestResult', parseResponse(data.Ads[0]));
                        tab._select(2);
                        previewAd($adPreview.get(0), {
                            height: esui.get('height').getValue(),
                            prod: query.adslots[0].type,
                            duration: 30
                        })(data.Ads[0]);
                    } else {
                        previewAd($adPreview.get(0), {})({});
                        tab._select(3);
                    }
                }).fail(function () {
                    esui.Dialog.alert({
                        title: '请求信息',
                        content: '请求失败'
                    });
                });
            };
            var editor = ace.edit("editor");
            editor.session.setMode("ace/mode/json");
            editor.setTheme("ace/theme/tomorrow");
            tab._select(0);
            window.addEventListener('message', windowMessage, false);
        },
        onleave: function () {
            console.log('onleave');
            var commands = this.model.get('commands');
            commands && mf.clickCommand.dispose(commands);
            window.removeEventListener('message', windowMessage);
        }
    });
})();