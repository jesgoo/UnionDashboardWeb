/**
 * @file Generated by er-sync
 * @author killeryyl<longgeyang@jesgoo.com>
 * @date Thu Aug 27 2015 12:44:55 GMT+0800 (CST)
 * Copyright (c) 2015 jesgoo.com, Inc. All Rights Reserved
 */
(function () {

    function convertData_machine(data) {
        var result = {
            data: {},
            time: []
        };
        var timeMap = $.deepExtend({}, data);
        $.each(timeMap, function (time, list) {
            result.time.push(time);
            $.each(list, function (field, counters) {
                //var count = 0;
                //var sum = 0;
                var f = result.data[field] = result.data[field] || {};
                $.each(counters, function (key, value) {
                    //count += 1;
                    //sum += +value || 0;
                    (f[key] = f[key] || {})[time] = value;
                });
                //list[field] = {
                //    count: count,
                //    sum: sum
                //};
            });
        });
        result.time.sort(function (a, b) {
            return a > b ? 1 : -1;
        });

        var timeList = result.time = result.time.slice(-30 * 6);
        //console.log(timeDistance, currentIndex, previousIndex, timeList);
        $.each(mf.monitor.main.model.fieldMap, function (field) {
            result.data[field] = result.data[field] || {};
            $.each(result.data[field], function (ip, machine) {
                var target = [];
                $.each(timeList, function (index, time) {
                    target.push(machine[time] || 0);
                });
                if (timeList.length < 180) {
                    console.log('补充时间');
                    target.splice.apply(target, mf.monitor.main.model.emptyData.slice(0, 30 * 6 - target.length + 2));
                }
                result.data[field][ip] = target;
            });
        });
        return result;

    }
    function convertData_all(data) {
        var result = {
            data: {},
            time: []
        };
        var timeMap = $.deepExtend({}, data);
        $.each(timeMap, function (time, list) {
            result.time.push(time);
            $.each(list, function (field, counters) {
                var count = 0;
                var sum = 0;
                $.each(counters, function (key, value) {
                    count += 1;
                    sum += +value || 0;
                });
                list[field] = {
                    count: count,
                    sum: sum
                };
            });
        });
        result.time.sort(function (a, b) {
            return a > b ? -1 : 1;
        });
        result.time.length = 720 * 3;
        result.time.reverse();
        var timeDistance = 0;
        var previousIndex = result.time.length;
        while (previousIndex > 0) {
            var currentIndex = previousIndex - 720;
            if (currentIndex < 0) {
                currentIndex = 0
            }
            var timeList = result.time.slice(currentIndex, previousIndex);
            $.each(mf.monitor.main.model.fieldMap, function (field) {
                result.data[field] = result.data[field] || {};
                var target = result.data[field][timeDistance] = [];
                $.each(timeList, function (index, time) {
                    var item = timeMap[time] || {};
                    var value = item[field];
                    target[index] = value && value.sum || 0;
                });
                if (timeList.length < 720) {
                    console.log('补充时间');
                    target.splice.apply(target, mf.monitor.main.model.emptyData.slice(0, 720 - target.length + 2));
                }
            });
            previousIndex = currentIndex;
            timeDistance += 1;
        }
        //result.time = result.time.slice(-180);

        return result;
    }

    function requestData(requestURL, target) {
        //console.log('requestData', requestURL);
        return $.getJSON(requestURL).pipe(mf.monitor.main.model.parseData.bind(null, target));
    }

    function RunMonitor(charElement, lookBackDays) {
        lookBackDays = lookBackDays || -3;
        var me = this;
        me.monitorList = $.map(mf.monitor.main.model.machineList, function (machine) {
            var requestURL = mf.ajaxParamFactory({
                url: '/machine/' + machine + ':' + mf.monitor.main.model.realTimePort + '/getdata_last'
            });
            return requestURL.url;

        });
        var logField = $.map(mf.monitor.main.model.fieldMap, function (obj, field) {
            return field + '.log';
        }).join(',');
        var historyList = $.map(mf.monitor.main.model.machineList, function (machine) {
            return mf.ajaxParamFactory({
                url: '/machine/' + machine + ':' + mf.monitor.main.model.realTimePort + '/getdata'
            }).url;
        });
        var dataRequest = $.map(historyList, function (requestURL, index) {
            return requestData(requestURL, mf.monitor.main.model.machineList[index]);
        });

        /*var historyList = $.map(mf.monitor.main.model.machineList, function (machine) {
            return '/machine/' + machine + ':' + mf.monitor.main.model.historyPort + '/index?'
                   + 'begin=' + mf.monitor.main.model.getDateTime(lookBackDays)
                   + '&end=' + mf.monitor.main.model.getDateTime() + '&name=' + logField;
        });
        var dataRequest = $.map(historyList, function (requestURL, index) {
            var def = $.Deferred();
            mf.parallelAjax(requestURL, function (data) {
                var historyData = $.map(data, function (fieldData, field) {
                    return {
                        table_name: field,
                        counters: $.map(fieldData, function (n) {
                            return {
                                time: new Date(n.time.replace(/\-/g, '/').replace(':', " ")).getTime() / 1000,
                                number: n.value
                            }
                        })
                    }
                });
                def.resolve(mf.monitor.main.model.parseData(mf.monitor.main.model.machineList[index], historyData));
            });
            return def.promise();
        });*/
        $.when.apply($, dataRequest)
            .pipe(mf.monitor.main.model.mergeData)
            .done(function (data) {
                me.data = data;
                me.chart = {};
                me.element = {};
                console.log('data', data);
                var machineChartData = convertData_machine(data);
                console.log('machineChartData', machineChartData);
                $.each(mf.monitor.main.model.fieldMap, function (field, opt) {
                    me.element['machine_' + field] = $('<div/>', {id: 'chart_' + field, 'class': 'mini-chart' }).appendTo(charElement[0]);
                    me.chart['machine_' + field] = mf.m.highchart_monitor_mini(me.element['machine_' + field], {
                        time: machineChartData.time,
                        data: machineChartData.data[field]
                    }, $.extend({}, opt, { name: '分机器' + opt.name}));
                });
                var allChartData = convertData_all(data);
                $.each(mf.monitor.main.model.fieldMap, function (field) {
                    $.each(allChartData.data[field], function (timeDistance, target) {
                        allChartData.data[field][timeDistance] = target.slice(-180);
                    });
                });
                console.log('allChartData', allChartData);
                $.each(mf.monitor.main.model.fieldMap, function (field, opt) {
                    me.element['all_' + field] = $('<div/>', {id: 'chart_' + field, 'class': 'mini-chart' }).appendTo(charElement[1]);
                    me.chart['all_' + field] = mf.m.highchart_monitor_mini(me.element['all_' + field], {
                        time: allChartData.time.slice(-180),
                        data: allChartData.data[field]
                    }, $.extend({}, opt, { name: '总体' + opt.name}));
                });
                me.monitor();
            }).fail(function () {
                console.log('%cwarning', 'color: #f00;', arguments);
                RunMonitor();
            });
    }

    RunMonitor.prototype.appendData = function (data) {
        var me = this;
        var machineChartData = convertData_machine($.deepExtend(me.data, data));
        var allChartData = convertData_all($.deepExtend(me.data, data));
        return [machineChartData, allChartData];
    };
    RunMonitor.prototype.monitor = function (interval) {
        var me = this;
        interval = interval || 3;
        me.monitorHandle = setTimeout(function () {
            console.log('monitor interval', interval);
            var dataRequest = $.map(me.monitorList, function (requestURL, index) {
                return requestData(requestURL, mf.monitor.main.model.machineList[index]);
            });
            $.when.apply($, dataRequest)
                .pipe(mf.monitor.main.model.mergeData)
                .pipe(me.appendData.bind(me))
                .done(function (chartData) {
                    var machineChartData = chartData[0];
                    var allChartData = chartData[1];
                    var startDate = new Date(((+machineChartData.time.slice(-1)[0] + 2) * 60000) - 1000 * 3600 * 6);
                    var UTCStartDate = Date.UTC(
                        startDate.getFullYear(),
                        startDate.getMonth(),
                        startDate.getMonth(),
                        startDate.getHours(),
                        startDate.getMinutes(),
                        startDate.getUTCSeconds()
                    );
                    console.log('startDate', startDate);
                    console.log('machineChartData', machineChartData);
                    $.each(mf.monitor.main.model.fieldMap, function (field) {
                        var index = 0;
                        $.each(machineChartData.data[field], function (ip, fieldData) {
                            if (me.chart['machine_' + field].series[index]) {
                                me.chart['machine_' + field].series[index].setData(fieldData, false, true);
                                me.chart['machine_' + field].series[index].update({
                                    pointStart: UTCStartDate
                                }, false);
                            }
                            index ++;
                        });
                        me.chart['machine_' + field].redraw();
                    });
                    console.log('allChartData', allChartData);
                    $.each(mf.monitor.main.model.fieldMap, function (field) {
                        $.each(allChartData.data[field], function (timeDistance, target) {
                            allChartData.data[field][timeDistance] = target.slice(-180);
                        });
                    });
                    $.each(mf.monitor.main.model.fieldMap, function (field) {
                        $.each(allChartData.data[field], function (index, data) {
                            if (me.chart['all_' + field].series[index]) {
                                me.chart['all_' + field].series[index].setData(data, false, true);
                                me.chart['all_' + field].series[index].update({
                                    pointStart: UTCStartDate
                                }, false);
                            }
                        });
                        me.chart['all_' + field].redraw();
                    });
                    me.monitor(20);
                }).fail(function () {
                    console.log('%cwarning', 'color: #f00;', arguments);
                    me.monitor(5);
                });
        }, interval * 1000);
    };
    RunMonitor.prototype.stop = function () {
        clearTimeout(this.monitorHandle);
        this.monitorHandle = null;
    };

    mf.monitor.main.detail = new er.Action({
        model: mf.monitor.main.model.detail,
        view: new er.View({
            template: 'mf_monitor_main_detail',
            UI_PROP: {}
        }),
        STATE_MAP: {},

        onenter: function () {
            console.log('onenter');
            mf.onenter();
        },
        onafterloadmodel: function () {
            console.log('onafterrepaint');
            this.model.set('machineList', $.map(mf.monitor.main.model.machineList, function (ip, index) {
                return {
                    name: ip,
                    color: ["#f6505c", "#1c62b8", "#f6c928", "#19b2b7", "#8772cd", "#eb6f25", "#e549d1", "#98f611", "#47b8ff"][index]
                };
            }))
        },
        onafterrender: function () {
            console.log('onafterrender');
        },
        onentercomplete: function () {
            console.log('onentercomplete');
            mf.loaded();
            var action = this;
            var model = action.model;
            var monitorChart = new RunMonitor(['#monitorChart_machine', '#monitorChart_all'], -model.get('days'));
            window.monitor = monitorChart;
            model.set('monitorChart', monitorChart);
        },
        onleave: function () {
            console.log('onleave');
            var monitorChart = this.model.get('monitorChart');
            monitorChart.stop();
        }
    });
})();