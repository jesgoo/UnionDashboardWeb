/**
 * @file Generated by er-sync
 * @author Luics<xukai01@baidu.com>
 * @date Thu Apr 09 2015 17:17:07 GMT+0800 (CST)
 * Copyright (c) 2012 Baidu.com, Inc. All Rights Reserved
 */
(function () {
    var fieldMap = {
        'event' : 0,
        'show' : 1,
        'ui' : 2
    };
    function getTimeString(timeNumber) {
        var timeObj = new Date(timeNumber * 1000);
        var date = ('0' + timeObj.getDate()).substr(-2);
        var hour = ('0' + timeObj.getHours()).substr(-2);
        //var minute = Math.floor(timeObj.getMinutes() / 2) * 2;
        var minute = ('0' + timeObj.getMinutes()).substr(-2);
        return date + '/' + hour + ':' + minute;
    }

    function parseData(data) {
        var result = {};
        $.each(data || [], function (index, obj) {
            if (!/\.log$/i.test(obj.table_name)) {
                return true;
            }
            var key = obj.table_name.slice(0, -4);
            result[key] = result[key] || {};
            $.each(obj.counters || [], function (index, item) {
                result[key][getTimeString(item.time)] = item.number;
            });
        });
        //console.log('parseData', data, result);
        return result;
    }

    function mergeData() {
        var result = {};
        var dataList = [].slice.call(arguments);
        $.each(dataList, function (index, data) {
            $.each(data, function (key, list) {
                var item = result[key] = result[key] || {};
                $.each(list, function (time, value) {
                    item[time] = item[time] || 0;
                    item[time] += +value;
                });
            });
        });
        //console.log('mergeData', dataList, result);
        return result;
    }

    function convertData(data) {
        var result = {
            data: {}
        };
        var timeMap = {};
        $.each(data, function (key, list) {
            $.each(list, function (time) {
                timeMap[time] = time;
            });
        });
        var timeList = $.map(timeMap, function (time) {
            return time;
        });
        timeList.sort(function (a, b) {
            return a > b ? 1 : -1;
        });
        $.each(data, function (key, list) {
            var item = result.data[key] = [];
            $.each(timeList, function (index, time) {
                item[index] = list[time] || 0;
            });
        });
        result.time = timeList;
        //console.log('convertData', data, result);
        return result;
    }

    function requestData(requestURL) {
        //console.log('requestData', requestURL);
        return $.getJSON(requestURL).pipe(parseData);
    }

    function RunMonitor(charElement, requestList, monitorList) {
        console.log('RunMonitor', charElement, requestList);
        var me = this;
        me.element = charElement;
        me.monitorList = $.map(monitorList, function (requestURL) {
            requestURL = mf.ajaxParamFactory({ url:requestURL });
            return requestURL.url;
        });
        var dataRequest = $.map(requestList, function (requestURL) {
            requestURL = mf.ajaxParamFactory({ url:requestURL });
            return requestData(requestURL.url);
        });
        $.when.apply($, dataRequest)
            .pipe(mergeData)
            .pipe(convertData)
            .done(function (data) {
                me.data = data;
                me.chart = mf.m.highchart_monitor(me.element, data);
                me.monitor();
            }).fail(function () {
                console.log('%cwarning', 'color: #f00;', arguments);
                //RunMonitor();
            });
    }
    RunMonitor.prototype.appendData = function (data) {
        var me = this;
        console.log('monitor appendData', data);
        $.each(data.time, function (index, time) {
            var inTimeList = mf.m.utils.indexOfArray(me.data.time, time);
            if (inTimeList == -1) {
                data.isNew = true;
                inTimeList = me.data.time.push(time) - 1;
            }
            $.each(me.data.data, function (field, list) {
                list[inTimeList] = data.data[field][index] || list[inTimeList] || 0;
            });
        });
        //var overflowLength = me.data.time.length - 60 / 2 * 24;
        //if (overflowLength > 0) {
        //    me.data.time.splice(0, overflowLength);
        //    $.each(me.data.data, function (field, list) {
        //        list.splice(0, overflowLength);
        //    });
        //}
        return data;
    };
    RunMonitor.prototype.monitor = function (interval) {
        var me = this;
        interval = interval || 3;
        setTimeout(function () {
            console.log('monitor interval', interval);
            var dataRequest = $.map(me.monitorList, function (requestURL) {
                return requestData(requestURL);
            });
            $.when.apply($, dataRequest)
                .pipe(mergeData)
                .pipe(convertData)
                .pipe(me.appendData.bind(me))
                .done(function (data) {
                    if (data.isNew) {
                        console.log('%cappend New Data', 'color: #f00;');
                        $.each(data.data, function (field, list) {
                            me.chart.series[fieldMap[field]].addPoint([data.time, +list[0]], false, true);
                        });
                        me.chart.redraw();
                        me.monitor(3);
                    } else {
                        $.each(me.data.data, function (field, list) {
                            me.chart.series[fieldMap[field]].setData(list, false, false, true);
                        });
                        me.chart.redraw();
                        me.monitor(3);
                    }
                }).fail(function () {
                    console.log('%cwarning', 'color: #f00;', arguments);
                    me.monitor(5);
                });
        }, interval * 1000);
    };

    mf.monitor.main.index = new er.Action({
        model: mf.monitor.main.model.index,
        view: new er.View({
            template: 'mf_monitor_main_index',
            UI_PROP: {}
        }),
        STATE_MAP: {},

        onenter: function () {
            console.log('onenter');
            mf.onenter();
        },
        onafterloadmodel: function () {
        },
        onafterrepaint: function () {
            console.log('onafterrepaint');
        },
        onafterrender: function () {
            console.log('onafterrender');
        },
        onentercomplete: function () {
            console.log('onentercomplete');
            mf.loaded();
            var action = this;
            var model = action.model;
            var requestList = $.map(mf.monitor.main.model.machineList, function (machine) {
                return '/machine/' + machine + '/getdata';
            });
            var monitorList = $.map(mf.monitor.main.model.machineList, function (machine) {
                return '/machine/' + machine + '/getdata_last';
            });
            window.monitor = new RunMonitor('#monitorChart', requestList, monitorList);
        },
        onleave: function () {
            console.log('onleave');
        }
    });
})();