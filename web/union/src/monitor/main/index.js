/**
 * @file Generated by er-sync
 * @author Luics<xukai01@baidu.com>
 * @date Thu Apr 09 2015 17:17:07 GMT+0800 (CST)
 * Copyright (c) 2012 Baidu.com, Inc. All Rights Reserved
 */
(function () {
    var fieldMap = {
        'event' : 0,
        'show' : 1,
        'ui' : 2
    };
    function getTimeString(timeNumber) {
        var timeObj = new Date(timeNumber * 1000);
        var date = ('0' + timeObj.getDate()).substr(-2);
        var hour = ('0' + timeObj.getHours()).substr(-2);
        //var minute = Math.floor(timeObj.getMinutes() / 2) * 2;
        var minute = ('0' + timeObj.getMinutes()).substr(-2);
        return date + '/' + hour + ':' + minute;
    }

    function parseData(target) {
        return function (data) {
            var result = {};
            $.each(data || [], function (index, obj) {
                if (!/\.log$/i.test(obj.table_name)) {
                    return true;
                }
                var field = obj.table_name.slice(0, -4);
                $.each(obj.counters || [], function (index, counter) {
                    var time = getTimeString(counter.time);
                    var item = result[time] = result[time] || {};
                    var obj = item[field] = item[field] || {};
                    obj[target] = counter.number;
                });
            });
            //console.log('parseData', data, result);
            return result;
        }
    }

    function mergeData() {
        var result = {};
        var dataList = [].slice.call(arguments);
        $.each(dataList, function (index, data) {
            $.deepExtend(result, data);
            /*$.each(data.timeMap, function (field, timeObj) {
                var item = result.timeMap[field] = result.timeMap[field] || {};
                $.each(timeObj, function (time, targetObj) {
                    var timeCollection = item[time] = item[time] || {};
                    $.each(targetObj, function (target, value) {
                        timeCollection[target] = value;
                    });
                });
            });*/
        });
        //console.log('mergeData', dataList, result);
        return result;
    }

    function objectCount (obj) {
        var count = 0 ;
        var sum = 0 ;
        $.each(obj, function (key, value) {
            count += 1;
            sum += +value || 0;
        });
        return {
            count: count,
            sum: sum
        };
    }
    function convertData(data) {
        var result = {
            data: {},
            time: []
        };
        var timeMap = $.deepExtend({}, data);
        $.each(timeMap, function (time, list) {
            result.time.push(time);
            $.each(list, function (field, counters) {
                list[field] = objectCount(counters);
            });
        });
        result.time.sort(function (a, b) {
            return a > b ? 1 : -1;
        });
        $.each(result.time, function (index, time) {
            var item = timeMap[time];
            $.each(fieldMap, function (field) {
                var target = result.data[field] = result.data[field] || [];
                var value = item[field];
                target[index] = value && value.sum || 0;
            });
        });
        console.log('convertData', data, result);
        return result;
    }

    function requestData(requestURL) {
        //console.log('requestData', requestURL);
        return $.getJSON(requestURL).pipe(parseData(requestURL.substring(0, requestURL.lastIndexOf('/'))));
    }

    function RunMonitor(charElement, requestList, monitorList) {
        console.log('RunMonitor', charElement, requestList);
        var me = this;
        me.element = charElement;
        me.monitorList = $.map(monitorList, function (requestURL) {
            requestURL = mf.ajaxParamFactory({ url:requestURL });
            return requestURL.url;
        });
        var dataRequest = $.map(requestList, function (requestURL) {
            requestURL = mf.ajaxParamFactory({ url:requestURL });
            return requestData(requestURL.url);
        });
        $.when.apply($, dataRequest)
            .pipe(mergeData)
            .done(function (data) {
                me.data = data;
                me.chart = mf.m.highchart_monitor(me.element, convertData(data));
                me.monitor();
            }).fail(function () {
                console.log('%cwarning', 'color: #f00;', arguments);
                //RunMonitor();
            });
    }
    RunMonitor.prototype.appendData = function (data) {
        var me = this;
        var maxLength = 30 * 24;
        var chartData = convertData($.deepExtend(me.data, data));
        var discardLength = chartData.length - maxLength;
        if (discardLength > 0) {
            var discardTime = chartData.time.splice(0, discardLength);
            $.each(fieldMap, function (field) {
                chartData.data[field].splice(0, discardLength);
            });
            $.each(discardTime, function (index, time) {
                delete me.data[time];
            });
        }
        return chartData;
    };
    RunMonitor.prototype.monitor = function (interval) {
        var me = this;
        interval = interval || 3;
        setTimeout(function () {
            console.log('monitor interval', interval);
            var dataRequest = $.map(me.monitorList, function (requestURL) {
                return requestData(requestURL);
            });
            $.when.apply($, dataRequest)
                .pipe(mergeData)
                .pipe(me.appendData.bind(me))
                .done(function (chartData) {
                    $.each(fieldMap, function (field, index) {
                        me.chart.series[index].setData(chartData.data[field], false, true);
                    });
                    me.chart.xAxis[0].categories = chartData.time;
                    me.chart.redraw();
                    me.monitor(20);
                }).fail(function () {
                    console.log('%cwarning', 'color: #f00;', arguments);
                    me.monitor(5);
                });
        }, interval * 1000);
    };

    mf.monitor.main.index = new er.Action({
        model: mf.monitor.main.model.index,
        view: new er.View({
            template: 'mf_monitor_main_index',
            UI_PROP: {}
        }),
        STATE_MAP: {},

        onenter: function () {
            console.log('onenter');
            mf.onenter();
        },
        onafterloadmodel: function () {
        },
        onafterrepaint: function () {
            console.log('onafterrepaint');
        },
        onafterrender: function () {
            console.log('onafterrender');
        },
        onentercomplete: function () {
            console.log('onentercomplete');
            mf.loaded();
            var action = this;
            var model = action.model;
            var requestList = $.map(mf.monitor.main.model.machineList, function (machine) {
                return '/machine/' + machine + '/getdata';
            });
            var monitorList = $.map(mf.monitor.main.model.machineList, function (machine) {
                return '/machine/' + machine + '/getdata_last';
            });
            window.monitor = new RunMonitor('#monitorChart', requestList, monitorList);
        },
        onleave: function () {
            console.log('onleave');
        }
    });
})();