/**
 * @file Generated by er-sync
 * @author killeryyl<longgeyang@jesgoo.com>
 * @date Fri Sep 25 2015 13:42:17 GMT+0800 (CST)
 * Copyright (c) 2015 jesgoo.com, Inc. All Rights Reserved
 */
(function () {
    var reports= {
        dailyUnit: {
            action: 'dailyUnit'
        },
        dayIdea: {
            action: 'dayIdea'
        },
        dayRegion: {
            action: 'dayRegion'
        },
        dayOS: {
            action: 'dayOS'
        }
    };
    mf.index.report.unit = new er.Action({
        model: mf.index.report.model.unit,
        view: new er.View({
            template: 'mf_index_report_unit',
            UI_PROP: {}
        }),
        STATE_MAP: {},

        onenter: function () {
            console.log('onenter');
            mf.onenter();
        },
        onafterrender: function () {
            console.log('onafterrender');
            var action = this;
            var model = action.model;
            var unitId = model.get('unit');
            var reporter = mf.index.reportBind(action, '#unitReportArea');
            reporter(reports, {
                unit: unitId
            });
            model.set(
                'commands',
                mf.clickCommand.register(
                    [
                        {
                            cmd: 'step_idea',
                            handle: function (options) {
                                options.idea && window.open('#/report/idea~unit=' + unitId + '&name=' + options.name+ '&idea=' + options.idea);
                            }
                        }
                    ],
                    {
                        region: typeof action.view.target === 'string'
                            ? '#' + action.view.target
                            : action.view.target,
                        rewrite: true
                    }
                )
            );
        },
        onentercomplete: function () {
            console.log('onentercomplete');
            mf.loaded();
            var action = this;
            var model = action.model;
        },
        onleave: function () {
            console.log('onleave');
            var action = this;
            $.each(action.subAction || {}, function (name, subAction) {
                subAction && subAction.leave();
            });
            action.subAction = null;
            var commands = action.model.get('commands');
            commands && mf.clickCommand.dispose(commands);
        }
    });
})();