/**
 * @file Generated by er-sync
 * @author killeryyl<longgeyang@jesgoo.com>
 * @date Fri May 29 2015 13:27:15 GMT+0800 (CST)
 * Copyright (c) 2015 jesgoo.com, Inc. All Rights Reserved
 */
(function () {
    mf.index.market.resource = new er.Action({
        model: mf.index.market.model.resource,
        view: new er.View({
            template: 'mf_index_market_resource',
            UI_PROP: {
                resource_upload_tab: {
                    datasource: [
                        {
                            title: '本地上传',
                            value: 'local'
                        }/*,
                        {
                            title: '远程地址',
                            value: 'remote'
                        }*/
                    ]
                },
                resource_upload_dialog: {
                    mask: {
                        level: 10,
                        type: 'resource-upload'
                    }
                }
            }
        }),
        STATE_MAP: {
            page: 0,
            pageSize: mf.PAGER_MODEL.pageSize,
            pageSizes: mf.PAGER_MODEL.pageSizes
        },

        onenter: function () {
            console.log('onenter');
            mf.onenter();
        },
        onafterloadmodel: function () {
            console.log('onafterloadmodel');
            /*var model = this.model;
            var typeList = model.get('typeList');
            for (var value in typeList) {
                model.set('list_resource_' + value , typeList[value]);
            }*/
        },
        onafterrender: function () {
            console.log('onafterrender');
            var tab = esui.get('resource_tab');
            tab.onchange = function (value, item) {
                $('#resource_tabs_' + item.value, this.main.nextElementSibling).show().siblings().hide();
                var table = esui.get('list_resource_' + item.value);
                table && table.refreshView();
            };
            tab._select(0);
            var uploadTab = esui.get('resource_upload_tab');
            uploadTab.onchange = function (value, item) {
                $('#resource_upload_' + item.value, this.main.nextElementSibling).show().siblings().hide();
            };
            uploadTab._select(0);
        },
        onentercomplete: function () {
            console.log('onentercomplete');
            mf.loaded();
            var action = this;
            var model = action.model;
            var config = model.get('config');
            var resourceList = model.get('resourceList');
            var operateData = mf.operateDataInConfigField(resourceList);
            var tab = model.get('tab');
            var resources = model.get('resources');
            var isOnlyForListing = model.get('listing');
            var resourceFieldInConfig = mf.mockFieldInConfig(resourceList);
            var selectedResource = model.get('selectedResource');

            $.map(tab, function (item) {
                var dataList = model.get('typeList_' + item.value);
                var table = esui.get('list_resource_' + item.value);
                var pager = esui.get('resourcePager_' + item.value);
                var pageSizer = esui.get('resourcePageSize_' + item.value);
                table.order = 'desc';
                table.orderBy = resourceFieldInConfig('createTime');
                isOnlyForListing && (table.select = 'single');

                table.onedit = function (value, options, editor) {
                    var row = table.datasource[options.rowIndex];
                    mf.m.utils.recursion.set(row, options.field.field, value);
                    row._isModify = true;
                    table.render();
                };
                item.addNewRow = function (result) {
                    var newData = result[0];
                    mf.setValueEntity(resourceList, newData);
                    dataList.unshift(newData);
                    resources.unshift(newData);
                    table.datasource.unshift(newData);
                    console.log('add new row', newData);
                    table.render();
                };
                var saveRow = function (rowIndex) {
                    var row = table.datasource[rowIndex];
                    if (mf.tableSavingValidator(row, table.fields)) {
                        return mf.parallelAjax({
                            type: 'POST',
                            url: '/resource' + (row._isNew ? '' : '/' + operateData.get(row, 'id')),
                            data: mf.getValueEntity(resourceList, mf.grepDataInConfig(row, resourceList))
                        }, function (result) {
                            var newData = result[0];
                            mf.setValueEntity(resourceList, newData);
                            if (row._isNew) {
                                dataList.unshift(newData);
                            } else {
                                var idField = resourceFieldInConfig('id');
                                var index = mf.m.utils.indexOfArray(dataList, row[idField], idField);
                                index > -1 && (dataList[index] = newData);
                            }
                            table.datasource[rowIndex] = newData;
                            table.render();
                            var singleSelectID = table.__getId('singleSelect');
                            table.datasource.forEach(function (n, index) {
                                if (n.id === selectedResource) {
                                    $('#' + singleSelectID + index).prop('checked', true);
                                }
                            });
                        });
                    } else {
                        return false;
                    }
                };
                var refreshTable = mf.mockPager(dataList, {
                    pager: pager,
                    pageSizer: pageSizer,
                    table: table
                }, {
                    editToSave: function (value, options, editor) {
                        return saveRow(options.rowIndex);
                    },
                    afterRender: function () {
                        var singleSelectID = table.__getId('singleSelect');
                        table.datasource.forEach(function (n, index) {
                            if (n.id === selectedResource) {
                                $('#' + singleSelectID + index).prop('checked', true);
                            }
                        });
                        console.log('afterRender selectedResource', selectedResource);
                    }
                });
                table.onselect = function (index, isInit) {
                    if (isInit) return true;
                    selectedResource = table.datasource[index].id;
                    console.log('afterSelect selectedResource', selectedResource, index);
                };
                refreshTable();
                item.saveRow = saveRow;
                item.refreshTable = refreshTable;
            });
            action.getSelectedResource = function () {
                console.log('get selectedResource', selectedResource);
                return selectedResource;
            };
            var resourceUpload = esui.get('resource_upload_dialog');
            var fileUpload = new mf.m.Upload({
                action: '/resource',
                name: 'file'
            });
            var showInfo = function (info) {
                $('.upload_info').html(info);
                if (showInfo.i) {
                    clearTimeout(showInfo.i);
                }
                showInfo.i = setTimeout(function () {
                    $('.upload_info').html('');
                    showInfo.i = null;
                }, 5000);
            };
            fileUpload.start = function (filename) {
                filename = filename.split(/[\/\\]/).pop();
                if (!/^[0-9\w_\.]+$/i.test(filename)) {
                    showInfo('文件名包含无效字符，请修改！');
                    return false;
                }
                mf.loading();
            };
            fileUpload.complete = function (data) {
                console.log('upload complete', data, model.get('currentEditingType'));
                mf.loaded();
                var info = '';
                if (!data.success) {
                    data.error = data.error || data.message || '';
                    if (data.error.indexOf('资源重复') > -1) {
                        info = '您已上传过该资源了。请查看资源ID ' + ((data.error.match(/\d+/) || [])[0] || '');
                    } else {
                        info = '上传失败，请确认上传正确的内容。<br>若多次重试皆不能成功，请联系管理员。';
                    }
                } else {
                    var item = mf.m.utils.deepSearch(tab, model.get('currentEditingType'), 'value');
                    console.log(tab, model.get('currentEditingType'), item);
                    item && data.entities && data.entities[0] && item.addNewRow(data.entities);
                    resourceUpload.hide();
                }
                if (info) {
                    showInfo(info);
                }
            };
            esui.get('localFile').onclick = function () {
                fileUpload.upload();
            };
            var remoteFile = esui.get('remoteFile');
            remoteFile.onclick = function () {
                var remoteURL = esui.get('remoteURL').getValue();
                var remoteName = esui.get('remoteName').getValue();
                if (!remoteURL) {
                    showInfo('请输入远程地址');
                } else if (!remoteName) {
                    showInfo('请输入资源名称');
                } else {
                    mf.parallelAjax([
                        {
                            url: '/longtask/download',
                            data: {
                                name : remoteName,
                                url : remoteURL
                            }
                        }
                    ], function (entities) {
                        listeningTask(entities.id);
                        remoteFile.disable();
                    });
                }
            };
            function listeningTask(id) {
                mf.parallelAjax([
                    {
                        url : '/longtask/status/' + id,
                        dataFilter: function (data) {
                            return data;
                        }
                    }
                ], function (data) {
                    data.output && (data.outputHTML = data.output.split('\n').reverse().join('<br>'));
                    showInfo(data.outputHTML);
                    if (data.done) {
                        var item = mf.m.utils.deepSearch(tab, model.get('currentEditingType'), 'value');
                        item && data.entities && data.entities[0] && item.addNewRow(data.entities);
                        resourceUpload.hide();
                    } else {
                        setTimeout(listeningTask.bind(null, id), 1000);
                    }
                });
            }
            model.set(
                'commands',
                mf.clickCommand.register(
                    [
                        {
                            cmd: 'add_resource',
                            handle: function (options) {
                                esui.get('remoteURL').setValue('');
                                $('.upload_info').html('');
                                resourceUpload.show();
                                model.set('currentEditingType', options.value);
                            }
                        }
                    ],
                    {
                        region: '#' + action.view.target,
                        rewrite: true
                    }
                )
            )
            ;
        },
        onleave: function () {
            console.log('onleave');
            var commands = this.model.get('commands');
            commands && mf.clickCommand.dispose(commands);
        }
    });
})();