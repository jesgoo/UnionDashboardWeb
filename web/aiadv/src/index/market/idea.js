/**
 * @file Generated by er-sync
 * @author killeryyl<longgeyang@jesgoo.com>
 * @date Wed May 27 2015 11:31:41 GMT+0800 (CST)
 * Copyright (c) 2015 jesgoo.com, Inc. All Rights Reserved
 */
(function () {
    mf.index.market.idea = new er.Action({
        model: mf.index.market.model.idea,
        view: new er.View({
            template: 'mf_index_market_idea',
            UI_PROP: {
                ideaList: {
                    selectMode: 'line'
                },
                ideaDetailEditor: {
                    closeButton:0,
                    mask: {
                        level: 5
                    }
                }
            }
        }),
        STATE_MAP: { page: 0,
            pageSize: mf.PAGER_MODEL.pageSize,
            pageSizes: mf.PAGER_MODEL.pageSizes
        },

        onenter: function () {
            console.log('onenter');
            mf.onenter();
        },
        onentercomplete: function () {
            console.log('onentercomplete');
            mf.loaded();
            var action = this;
            var model = action.model;
            var ideaCount = esui.get('ideaCount');
            var dataList = model.get('list');
            var ideaList = model.get('ideaList');
            var ideaListFieldInConfig = mf.mockFieldInConfig(ideaList);
            var operateData = mf.operateDataInConfigField(ideaList);
            var isOnlyForListing = model.get('listing');
            var selectedIdeas = baidu.object.clone(model.get('selectedIdeas') || []);
            var resources = model.get('resources');
            var getFilename = mf.adv.getResourceFilenameById(resources);
            var emptyIdea = mf.initEntityInConfig(ideaList);

            action.subAction = {};
            var ideaDetailEditor = esui.get('ideaDetailEditor');

            ideaDetailEditor.oncommand = function (opt) {
                var index = opt.index;
                if (index === 0) {
                    var idea = action.subAction.idea.getIdea();
                    if (idea === false) {
                        return false;
                    }
                    var row;
                    var rowIndex = model.get('currentEditingRow');
                    if (rowIndex > -1) {
                        row = table.datasource[rowIndex];
                    } else {
                        row = {
                            _isNew: true
                        };
                        table.datasource.unshift(row);
                        rowIndex = 0;
                    }
                    for (var field in idea) {
                        operateData.set(row, field, idea[field]);
                    }
                    console.log('saving', row, rowIndex);
                    var savor = saveRow(rowIndex);
                    savor && savor.done(function () {
                        ideaDetailEditor.hide();
                        action.subAction.idea.leave();
                        action.subAction.idea = null;
                    });
                    return false;
                } else {
                    action.subAction.idea.leave();
                    action.subAction.idea = null;
                }
            };

            var table = esui.get('ideaList');
            isOnlyForListing && (table.select = 'multi');
            isOnlyForListing && (table.editable = false);
            table.order = 'desc';
            table.orderBy = ideaListFieldInConfig('createTime');
            var saveRow = function (rowIndex) {
                var row = table.datasource[rowIndex];
                if (mf.tableSavingValidator(row, table.fields)) {
                    return mf.parallelAjax({
                        type: 'POST',
                        url: '/idea' + (row._isNew ? '' : '/' + operateData.get(row, 'id')),
                        data: mf.getValueEntity(ideaList, mf.grepDataInConfig(row, ideaList))
                    }, function (result) {
                        var newData = result[0];

                        var imageFilenameField = ideaListFieldInConfig('imageFilename');
                        var downloadFilenameField = ideaListFieldInConfig('downloadFilename');
                        var imageField = ideaListFieldInConfig('image');
                        var downloadField = ideaListFieldInConfig('app');
                        newData[imageFilenameField] = getFilename(newData[imageField]);
                        newData[downloadFilenameField] = getFilename(newData[downloadField]);

                        mf.setValueEntity(ideaList, newData);
                        var idField = ideaListFieldInConfig('id');
                        var index = mf.m.utils.indexOfArray(dataList, row[idField], idField);
                        index > -1 && (dataList[index] = newData);
                        table.datasource[rowIndex] = newData;
                        table.render();
                    });
                } else {
                    return false;
                }
            };
            var refreshTable = mf.mockPager(dataList, {
                pager: esui.get('ideaPager'),
                pageSizer: esui.get('ideaPageSize'),
                table: table
            }, {
                editToSave: function (value, options, editor) {
                    var row = table.datasource[options.rowIndex];
                    if (!row._isNew){
                        return saveRow(options.rowIndex);
                    }
                },
                afterRender: function () {
                    var selectedCount = 0;
                    var multiSelectID = table.__getId('multiSelect');
                    table.datasource.forEach(function (n, index) {
                        if (mf.m.utils.indexOfArray(selectedIdeas, n.id) > -1) {
                            $('#' + multiSelectID + index).prop('checked', true);
                            selectedCount += 1;
                        }
                    });
                    console.log('afterRender selectedIdeas', selectedIdeas);
                    $(table._getHeadCheckbox()).prop('checked', selectedCount === table.datasource.length);
                }
            });
            table.onselect = function (indexes, isInit) {
                if (isInit) return true;
                var ideaIndex;
                table.datasource.forEach(function (n) {
                    if ((ideaIndex = mf.m.utils.indexOfArray(selectedIdeas, n.id)) > -1) {
                        selectedIdeas.splice(ideaIndex, 1);
                    }
                });
                indexes.forEach(function (index) {
                    var id = table.datasource[index].id;
                    if (mf.m.utils.indexOfArray(selectedIdeas, id) === -1) {
                        selectedIdeas.push(id);
                    }
                });
                console.log('afterSelect selectedIdeas', selectedIdeas, indexes);

            };
            console.log('init selectedIdeas', selectedIdeas);
            action.getSelectedIdea = function () {
                console.log('get selectedIdeas', selectedIdeas);
                return selectedIdeas;
            };
            if (model.get('ideaName')) {
                var valueRegExp = mf.m.utils.makeRegExp(model.get('ideaName'), 'i');
                refreshTable.setFilter(function (obj) {
                    return valueRegExp.test(operateData.get(obj, 'name'));
                });
            }
            refreshTable();
            model.set(
                'commands',
                mf.clickCommand.register(
                    [
                        {
                            cmd: 'search-idea',
                            handle: function (options) {
                                var text = esui.get('ideaName').getValue();
                                var filter;
                                if (text) {
                                    var valueRegExp = mf.m.utils.makeRegExp(text, 'i');
                                    filter = function (obj) {
                                        return valueRegExp.test(operateData.get(obj, 'name'));
                                    };
                                }
                                refreshTable.setFilter(filter);
                                refreshTable({
                                    page: 0
                                });
                            }
                        },
                        {
                            cmd: 'edit-idea',
                            handle: function (options) {
                                /*var row = table.datasource[options.index];
                                var ideaId = operateData.get(row, 'id');
                                if (ideaId) {
                                    var url = '/market/ideaDetail~' + $.param(
                                            $.extend(refreshTable.getState(), {
                                                idea: ideaId,
                                                ideaName: esui.get('ideaName').getValue()
                                            })
                                        );
                                    mf.m.utils.nextTick(function () {
                                        er.locator.redirect(url);
                                    });
                                }*/
                                var row, currentEditingRow;
                                if (options.index > -1) {
                                    currentEditingRow = options.index;
                                    row = table.datasource[currentEditingRow];
                                } else {
                                    row = emptyIdea;
                                    currentEditingRow = -1;
                                }
                                ideaDetailEditor.show();
                                if (action.subAction.idea) {
                                    action.subAction.idea.leave();
                                }
                                action.subAction.idea = er.controller.loadSub(
                                    ideaDetailEditor.getBody().id,
                                    'mf.index.market.ideaDetail',
                                    {
                                        queryMap: $.extend(mf.reflectDataInConfig(row, ideaList), {
                                            resources: model.get('resources'),
                                            config: model.get('config'),
                                            isEditing: currentEditingRow > -1
                                        })
                                    }
                                );
                                model.set('currentEditingRow', currentEditingRow);
                                console.log('idea editing', currentEditingRow)
                            }
                        },
                        {
                            cmd: 'add-idea',
                            handle: function (options) {
                                var url = '/market/ideaDetail~' + $.param(
                                    refreshTable.getState()
                                );
                                mf.m.utils.nextTick(function () {
                                    er.locator.redirect(url);
                                });
                            }
                        }
                    ],
                    {
                        region: '#' + action.view.target,
                        rewrite: true
                    }
                )
            );
            if (model.get('addNew')) {
                $('[data-cmd=add-idea]','#' + action.view.target).trigger('click');
            }
        },
        onleave: function () {
            console.log('onleave');
            var commands = this.model.get('commands');
            commands && mf.clickCommand.dispose(commands);
        }
    });
})();